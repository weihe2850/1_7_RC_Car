# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from in2ulv_msgs/INSStdMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class INSStdMsg(genpy.Message):
  _md5sum = "e660d7b5d497967dad824f69729739ae"
  _type = "in2ulv_msgs/INSStdMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# 帧头，包含时间戳信息
std_msgs/Header header

# 模块类型
uint8 module_type

# error_code
uint32 error_code

# 模块信息
string ins_data

# ROS 标准信息
sensor_msgs/Imu imu
sensor_msgs/NavSatFix nav_sat_fix

# INS_Acc (0X500)
float64 ACC_X
float64 ACC_Y
float64 ACC_Z

# INS_GYRO (0X501)
float64 GYRO_X
float64 GYRO_Y
float64 GYRO_Z

# INS_HeadingPitchRoll (0X502)
float64 INS_PitchAngle
float64 INS_RollAngle
float64 INS_HeadingAngle

# INS_HeightAndTime (0X503)
float64 INS_LocatHeight
uint32 INS_Time

# INS_LatitudeLongitude (0X504)
float64 INS_Latitude
float64 INS_Longitude

# INS_Speed (0X505)
float64 INS_NorthSpd
float64 INS_EastSpd
float64 INS_ToGroundSpd

# INS_DataInfo (0X506)
uint8 INS_GpsFlag_Pos
uint8 INS_NumSV     #星数
uint8 INS_GpsFlag_Heading
uint8 INS_Gps_Age
uint8 INS_Car_Status
uint8 INS_Status

# INS_Std (0X507)
float32 INS_Std_Lat
float32 INS_Std_Lon
float32 INS_Std_LocatHeight
float32 INS_Std_Heading

# 新增的 UTM 坐标字段
float64 INS_UTM_East
float64 INS_UTM_North
float64 INS_UTM_NorthSpd
float64 INS_UTM_EastSpd
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: sensor_msgs/Imu
# This is a message to hold data from an IMU (Inertial Measurement Unit)
#
# Accelerations should be in m/s^2 (not in g's), and rotational velocity should be in rad/sec
#
# If the covariance of the measurement is known, it should be filled in (if all you know is the 
# variance of each measurement, e.g. from the datasheet, just put those along the diagonal)
# A covariance matrix of all zeros will be interpreted as "covariance unknown", and to use the
# data a covariance will have to be assumed or gotten from some other source
#
# If you have no estimate for one of the data elements (e.g. your IMU doesn't produce an orientation 
# estimate), please set element 0 of the associated covariance matrix to -1
# If you are interpreting this message, please check for a value of -1 in the first element of each 
# covariance matrix, and disregard the associated estimate.

Header header

geometry_msgs/Quaternion orientation
float64[9] orientation_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 angular_velocity
float64[9] angular_velocity_covariance # Row major about x, y, z axes

geometry_msgs/Vector3 linear_acceleration
float64[9] linear_acceleration_covariance # Row major x, y z 

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: sensor_msgs/NavSatFix
# Navigation Satellite fix for any Global Navigation Satellite System
#
# Specified using the WGS 84 reference ellipsoid

# header.stamp specifies the ROS time for this measurement (the
#        corresponding satellite time may be reported using the
#        sensor_msgs/TimeReference message).
#
# header.frame_id is the frame of reference reported by the satellite
#        receiver, usually the location of the antenna.  This is a
#        Euclidean frame relative to the vehicle, not a reference
#        ellipsoid.
Header header

# satellite fix status information
NavSatStatus status

# Latitude [degrees]. Positive is north of equator; negative is south.
float64 latitude

# Longitude [degrees]. Positive is east of prime meridian; negative is west.
float64 longitude

# Altitude [m]. Positive is above the WGS 84 ellipsoid
# (quiet NaN if no altitude is available).
float64 altitude

# Position covariance [m^2] defined relative to a tangential plane
# through the reported position. The components are East, North, and
# Up (ENU), in row-major order.
#
# Beware: this coordinate system exhibits singularities at the poles.

float64[9] position_covariance

# If the covariance of the fix is known, fill it in completely. If the
# GPS receiver provides the variance of each measurement, put them
# along the diagonal. If only Dilution of Precision is available,
# estimate an approximate covariance from that.

uint8 COVARIANCE_TYPE_UNKNOWN = 0
uint8 COVARIANCE_TYPE_APPROXIMATED = 1
uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2
uint8 COVARIANCE_TYPE_KNOWN = 3

uint8 position_covariance_type

================================================================================
MSG: sensor_msgs/NavSatStatus
# Navigation Satellite fix status for any Global Navigation Satellite System

# Whether to output an augmented fix is determined by both the fix
# type and the last time differential corrections were received.  A
# fix is valid when status >= STATUS_FIX.

int8 STATUS_NO_FIX =  -1        # unable to fix position
int8 STATUS_FIX =      0        # unaugmented fix
int8 STATUS_SBAS_FIX = 1        # with satellite-based augmentation
int8 STATUS_GBAS_FIX = 2        # with ground-based augmentation

int8 status

# Bits defining which Global Navigation Satellite System signals were
# used by the receiver.

uint16 SERVICE_GPS =     1
uint16 SERVICE_GLONASS = 2
uint16 SERVICE_COMPASS = 4      # includes BeiDou.
uint16 SERVICE_GALILEO = 8

uint16 service
"""
  __slots__ = ['header','module_type','error_code','ins_data','imu','nav_sat_fix','ACC_X','ACC_Y','ACC_Z','GYRO_X','GYRO_Y','GYRO_Z','INS_PitchAngle','INS_RollAngle','INS_HeadingAngle','INS_LocatHeight','INS_Time','INS_Latitude','INS_Longitude','INS_NorthSpd','INS_EastSpd','INS_ToGroundSpd','INS_GpsFlag_Pos','INS_NumSV','INS_GpsFlag_Heading','INS_Gps_Age','INS_Car_Status','INS_Status','INS_Std_Lat','INS_Std_Lon','INS_Std_LocatHeight','INS_Std_Heading','INS_UTM_East','INS_UTM_North','INS_UTM_NorthSpd','INS_UTM_EastSpd']
  _slot_types = ['std_msgs/Header','uint8','uint32','string','sensor_msgs/Imu','sensor_msgs/NavSatFix','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','uint32','float64','float64','float64','float64','float64','uint8','uint8','uint8','uint8','uint8','uint8','float32','float32','float32','float32','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,module_type,error_code,ins_data,imu,nav_sat_fix,ACC_X,ACC_Y,ACC_Z,GYRO_X,GYRO_Y,GYRO_Z,INS_PitchAngle,INS_RollAngle,INS_HeadingAngle,INS_LocatHeight,INS_Time,INS_Latitude,INS_Longitude,INS_NorthSpd,INS_EastSpd,INS_ToGroundSpd,INS_GpsFlag_Pos,INS_NumSV,INS_GpsFlag_Heading,INS_Gps_Age,INS_Car_Status,INS_Status,INS_Std_Lat,INS_Std_Lon,INS_Std_LocatHeight,INS_Std_Heading,INS_UTM_East,INS_UTM_North,INS_UTM_NorthSpd,INS_UTM_EastSpd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSStdMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.module_type is None:
        self.module_type = 0
      if self.error_code is None:
        self.error_code = 0
      if self.ins_data is None:
        self.ins_data = ''
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.nav_sat_fix is None:
        self.nav_sat_fix = sensor_msgs.msg.NavSatFix()
      if self.ACC_X is None:
        self.ACC_X = 0.
      if self.ACC_Y is None:
        self.ACC_Y = 0.
      if self.ACC_Z is None:
        self.ACC_Z = 0.
      if self.GYRO_X is None:
        self.GYRO_X = 0.
      if self.GYRO_Y is None:
        self.GYRO_Y = 0.
      if self.GYRO_Z is None:
        self.GYRO_Z = 0.
      if self.INS_PitchAngle is None:
        self.INS_PitchAngle = 0.
      if self.INS_RollAngle is None:
        self.INS_RollAngle = 0.
      if self.INS_HeadingAngle is None:
        self.INS_HeadingAngle = 0.
      if self.INS_LocatHeight is None:
        self.INS_LocatHeight = 0.
      if self.INS_Time is None:
        self.INS_Time = 0
      if self.INS_Latitude is None:
        self.INS_Latitude = 0.
      if self.INS_Longitude is None:
        self.INS_Longitude = 0.
      if self.INS_NorthSpd is None:
        self.INS_NorthSpd = 0.
      if self.INS_EastSpd is None:
        self.INS_EastSpd = 0.
      if self.INS_ToGroundSpd is None:
        self.INS_ToGroundSpd = 0.
      if self.INS_GpsFlag_Pos is None:
        self.INS_GpsFlag_Pos = 0
      if self.INS_NumSV is None:
        self.INS_NumSV = 0
      if self.INS_GpsFlag_Heading is None:
        self.INS_GpsFlag_Heading = 0
      if self.INS_Gps_Age is None:
        self.INS_Gps_Age = 0
      if self.INS_Car_Status is None:
        self.INS_Car_Status = 0
      if self.INS_Status is None:
        self.INS_Status = 0
      if self.INS_Std_Lat is None:
        self.INS_Std_Lat = 0.
      if self.INS_Std_Lon is None:
        self.INS_Std_Lon = 0.
      if self.INS_Std_LocatHeight is None:
        self.INS_Std_LocatHeight = 0.
      if self.INS_Std_Heading is None:
        self.INS_Std_Heading = 0.
      if self.INS_UTM_East is None:
        self.INS_UTM_East = 0.
      if self.INS_UTM_North is None:
        self.INS_UTM_North = 0.
      if self.INS_UTM_NorthSpd is None:
        self.INS_UTM_NorthSpd = 0.
      if self.INS_UTM_EastSpd is None:
        self.INS_UTM_EastSpd = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.module_type = 0
      self.error_code = 0
      self.ins_data = ''
      self.imu = sensor_msgs.msg.Imu()
      self.nav_sat_fix = sensor_msgs.msg.NavSatFix()
      self.ACC_X = 0.
      self.ACC_Y = 0.
      self.ACC_Z = 0.
      self.GYRO_X = 0.
      self.GYRO_Y = 0.
      self.GYRO_Z = 0.
      self.INS_PitchAngle = 0.
      self.INS_RollAngle = 0.
      self.INS_HeadingAngle = 0.
      self.INS_LocatHeight = 0.
      self.INS_Time = 0
      self.INS_Latitude = 0.
      self.INS_Longitude = 0.
      self.INS_NorthSpd = 0.
      self.INS_EastSpd = 0.
      self.INS_ToGroundSpd = 0.
      self.INS_GpsFlag_Pos = 0
      self.INS_NumSV = 0
      self.INS_GpsFlag_Heading = 0
      self.INS_Gps_Age = 0
      self.INS_Car_Status = 0
      self.INS_Status = 0
      self.INS_Std_Lat = 0.
      self.INS_Std_Lon = 0.
      self.INS_Std_LocatHeight = 0.
      self.INS_Std_Heading = 0.
      self.INS_UTM_East = 0.
      self.INS_UTM_North = 0.
      self.INS_UTM_NorthSpd = 0.
      self.INS_UTM_EastSpd = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_type, _x.error_code))
      _x = self.ins_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w))
      buff.write(_get_struct_9d().pack(*self.imu.orientation_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z))
      buff.write(_get_struct_9d().pack(*self.imu.angular_velocity_covariance))
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z))
      buff.write(_get_struct_9d().pack(*self.imu.linear_acceleration_covariance))
      _x = self
      buff.write(_get_struct_3I().pack(_x.nav_sat_fix.header.seq, _x.nav_sat_fix.header.stamp.secs, _x.nav_sat_fix.header.stamp.nsecs))
      _x = self.nav_sat_fix.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_bH3d().pack(_x.nav_sat_fix.status.status, _x.nav_sat_fix.status.service, _x.nav_sat_fix.latitude, _x.nav_sat_fix.longitude, _x.nav_sat_fix.altitude))
      buff.write(_get_struct_9d().pack(*self.nav_sat_fix.position_covariance))
      _x = self
      buff.write(_get_struct_B10dI5d6B4f4d().pack(_x.nav_sat_fix.position_covariance_type, _x.ACC_X, _x.ACC_Y, _x.ACC_Z, _x.GYRO_X, _x.GYRO_Y, _x.GYRO_Z, _x.INS_PitchAngle, _x.INS_RollAngle, _x.INS_HeadingAngle, _x.INS_LocatHeight, _x.INS_Time, _x.INS_Latitude, _x.INS_Longitude, _x.INS_NorthSpd, _x.INS_EastSpd, _x.INS_ToGroundSpd, _x.INS_GpsFlag_Pos, _x.INS_NumSV, _x.INS_GpsFlag_Heading, _x.INS_Gps_Age, _x.INS_Car_Status, _x.INS_Status, _x.INS_Std_Lat, _x.INS_Std_Lon, _x.INS_Std_LocatHeight, _x.INS_Std_Heading, _x.INS_UTM_East, _x.INS_UTM_North, _x.INS_UTM_NorthSpd, _x.INS_UTM_EastSpd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.nav_sat_fix is None:
        self.nav_sat_fix = sensor_msgs.msg.NavSatFix()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.module_type, _x.error_code,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ins_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ins_data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.orientation_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.angular_velocity_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 24
      (_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.linear_acceleration_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.nav_sat_fix.header.seq, _x.nav_sat_fix.header.stamp.secs, _x.nav_sat_fix.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nav_sat_fix.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nav_sat_fix.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.nav_sat_fix.status.status, _x.nav_sat_fix.status.service, _x.nav_sat_fix.latitude, _x.nav_sat_fix.longitude, _x.nav_sat_fix.altitude,) = _get_struct_bH3d().unpack(str[start:end])
      start = end
      end += 72
      self.nav_sat_fix.position_covariance = _get_struct_9d().unpack(str[start:end])
      _x = self
      start = end
      end += 179
      (_x.nav_sat_fix.position_covariance_type, _x.ACC_X, _x.ACC_Y, _x.ACC_Z, _x.GYRO_X, _x.GYRO_Y, _x.GYRO_Z, _x.INS_PitchAngle, _x.INS_RollAngle, _x.INS_HeadingAngle, _x.INS_LocatHeight, _x.INS_Time, _x.INS_Latitude, _x.INS_Longitude, _x.INS_NorthSpd, _x.INS_EastSpd, _x.INS_ToGroundSpd, _x.INS_GpsFlag_Pos, _x.INS_NumSV, _x.INS_GpsFlag_Heading, _x.INS_Gps_Age, _x.INS_Car_Status, _x.INS_Status, _x.INS_Std_Lat, _x.INS_Std_Lon, _x.INS_Std_LocatHeight, _x.INS_Std_Heading, _x.INS_UTM_East, _x.INS_UTM_North, _x.INS_UTM_NorthSpd, _x.INS_UTM_EastSpd,) = _get_struct_B10dI5d6B4f4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_type, _x.error_code))
      _x = self.ins_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs))
      _x = self.imu.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w))
      buff.write(self.imu.orientation_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z))
      buff.write(self.imu.angular_velocity_covariance.tostring())
      _x = self
      buff.write(_get_struct_3d().pack(_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z))
      buff.write(self.imu.linear_acceleration_covariance.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.nav_sat_fix.header.seq, _x.nav_sat_fix.header.stamp.secs, _x.nav_sat_fix.header.stamp.nsecs))
      _x = self.nav_sat_fix.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_bH3d().pack(_x.nav_sat_fix.status.status, _x.nav_sat_fix.status.service, _x.nav_sat_fix.latitude, _x.nav_sat_fix.longitude, _x.nav_sat_fix.altitude))
      buff.write(self.nav_sat_fix.position_covariance.tostring())
      _x = self
      buff.write(_get_struct_B10dI5d6B4f4d().pack(_x.nav_sat_fix.position_covariance_type, _x.ACC_X, _x.ACC_Y, _x.ACC_Z, _x.GYRO_X, _x.GYRO_Y, _x.GYRO_Z, _x.INS_PitchAngle, _x.INS_RollAngle, _x.INS_HeadingAngle, _x.INS_LocatHeight, _x.INS_Time, _x.INS_Latitude, _x.INS_Longitude, _x.INS_NorthSpd, _x.INS_EastSpd, _x.INS_ToGroundSpd, _x.INS_GpsFlag_Pos, _x.INS_NumSV, _x.INS_GpsFlag_Heading, _x.INS_Gps_Age, _x.INS_Car_Status, _x.INS_Status, _x.INS_Std_Lat, _x.INS_Std_Lon, _x.INS_Std_LocatHeight, _x.INS_Std_Heading, _x.INS_UTM_East, _x.INS_UTM_North, _x.INS_UTM_NorthSpd, _x.INS_UTM_EastSpd))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imu is None:
        self.imu = sensor_msgs.msg.Imu()
      if self.nav_sat_fix is None:
        self.nav_sat_fix = sensor_msgs.msg.NavSatFix()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.module_type, _x.error_code,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ins_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ins_data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.imu.header.seq, _x.imu.header.stamp.secs, _x.imu.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.imu.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.imu.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.imu.orientation.x, _x.imu.orientation.y, _x.imu.orientation.z, _x.imu.orientation.w,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.orientation_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.angular_velocity.x, _x.imu.angular_velocity.y, _x.imu.angular_velocity.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.angular_velocity_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 24
      (_x.imu.linear_acceleration.x, _x.imu.linear_acceleration.y, _x.imu.linear_acceleration.z,) = _get_struct_3d().unpack(str[start:end])
      start = end
      end += 72
      self.imu.linear_acceleration_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 12
      (_x.nav_sat_fix.header.seq, _x.nav_sat_fix.header.stamp.secs, _x.nav_sat_fix.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.nav_sat_fix.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.nav_sat_fix.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 27
      (_x.nav_sat_fix.status.status, _x.nav_sat_fix.status.service, _x.nav_sat_fix.latitude, _x.nav_sat_fix.longitude, _x.nav_sat_fix.altitude,) = _get_struct_bH3d().unpack(str[start:end])
      start = end
      end += 72
      self.nav_sat_fix.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=9)
      _x = self
      start = end
      end += 179
      (_x.nav_sat_fix.position_covariance_type, _x.ACC_X, _x.ACC_Y, _x.ACC_Z, _x.GYRO_X, _x.GYRO_Y, _x.GYRO_Z, _x.INS_PitchAngle, _x.INS_RollAngle, _x.INS_HeadingAngle, _x.INS_LocatHeight, _x.INS_Time, _x.INS_Latitude, _x.INS_Longitude, _x.INS_NorthSpd, _x.INS_EastSpd, _x.INS_ToGroundSpd, _x.INS_GpsFlag_Pos, _x.INS_NumSV, _x.INS_GpsFlag_Heading, _x.INS_Gps_Age, _x.INS_Car_Status, _x.INS_Status, _x.INS_Std_Lat, _x.INS_Std_Lon, _x.INS_Std_LocatHeight, _x.INS_Std_Heading, _x.INS_UTM_East, _x.INS_UTM_North, _x.INS_UTM_NorthSpd, _x.INS_UTM_EastSpd,) = _get_struct_B10dI5d6B4f4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_9d = None
def _get_struct_9d():
    global _struct_9d
    if _struct_9d is None:
        _struct_9d = struct.Struct("<9d")
    return _struct_9d
_struct_B10dI5d6B4f4d = None
def _get_struct_B10dI5d6B4f4d():
    global _struct_B10dI5d6B4f4d
    if _struct_B10dI5d6B4f4d is None:
        _struct_B10dI5d6B4f4d = struct.Struct("<B10dI5d6B4f4d")
    return _struct_B10dI5d6B4f4d
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_bH3d = None
def _get_struct_bH3d():
    global _struct_bH3d
    if _struct_bH3d is None:
        _struct_bH3d = struct.Struct("<bH3d")
    return _struct_bH3d
