# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from in2ulv_msgs/HDMapRoute.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import in2ulv_msgs.msg
import std_msgs.msg

class HDMapRoute(genpy.Message):
  _md5sum = "88e8c74cae4a65bf3fa1a537ffb8d3b6"
  _type = "in2ulv_msgs/HDMapRoute"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# A route within a high-definition map defined by the start and goal points and map primitives describing the route between the two.

# 帧头，包含时间戳信息
std_msgs/Header header

# The start_pose must exist within the bounds of the primitives in the first segment defined in the route_segments array.
geometry_msgs/Pose start_pose

# The goal_pose must exist within the bounds of the primitives in the last segment defined in the route_semgents array.
geometry_msgs/Pose goal_pose

HDMapSegment[] segments

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: in2ulv_msgs/HDMapSegment
# A segment of an HDMap which contains one or more MapPrimitives.
in2ulv_msgs/HDMapPrimitive[] primitives

int64 preferred_primitive_id

================================================================================
MSG: in2ulv_msgs/HDMapPrimitive
# Map primitive information
int64 id

# Type of primitive, such as lane, polygon, line.
string primitive_type"""
  __slots__ = ['header','start_pose','goal_pose','segments']
  _slot_types = ['std_msgs/Header','geometry_msgs/Pose','geometry_msgs/Pose','in2ulv_msgs/HDMapSegment[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,start_pose,goal_pose,segments

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HDMapRoute, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.Pose()
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.Pose()
      if self.segments is None:
        self.segments = []
    else:
      self.header = std_msgs.msg.Header()
      self.start_pose = geometry_msgs.msg.Pose()
      self.goal_pose = geometry_msgs.msg.Pose()
      self.segments = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.start_pose.position.x, _x.start_pose.position.y, _x.start_pose.position.z, _x.start_pose.orientation.x, _x.start_pose.orientation.y, _x.start_pose.orientation.z, _x.start_pose.orientation.w, _x.goal_pose.position.x, _x.goal_pose.position.y, _x.goal_pose.position.z, _x.goal_pose.orientation.x, _x.goal_pose.orientation.y, _x.goal_pose.orientation.z, _x.goal_pose.orientation.w))
      length = len(self.segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.segments:
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.id
          buff.write(_get_struct_q().pack(_x))
          _x = val2.primitive_type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.preferred_primitive_id
        buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.Pose()
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.Pose()
      if self.segments is None:
        self.segments = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.start_pose.position.x, _x.start_pose.position.y, _x.start_pose.position.z, _x.start_pose.orientation.x, _x.start_pose.orientation.y, _x.start_pose.orientation.z, _x.start_pose.orientation.w, _x.goal_pose.position.x, _x.goal_pose.position.y, _x.goal_pose.position.z, _x.goal_pose.orientation.x, _x.goal_pose.orientation.y, _x.goal_pose.orientation.z, _x.goal_pose.orientation.w,) = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segments = []
      for i in range(0, length):
        val1 = in2ulv_msgs.msg.HDMapSegment()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = in2ulv_msgs.msg.HDMapPrimitive()
          start = end
          end += 8
          (val2.id,) = _get_struct_q().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.primitive_type = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.primitive_type = str[start:end]
          val1.primitives.append(val2)
        start = end
        end += 8
        (val1.preferred_primitive_id,) = _get_struct_q().unpack(str[start:end])
        self.segments.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.start_pose.position.x, _x.start_pose.position.y, _x.start_pose.position.z, _x.start_pose.orientation.x, _x.start_pose.orientation.y, _x.start_pose.orientation.z, _x.start_pose.orientation.w, _x.goal_pose.position.x, _x.goal_pose.position.y, _x.goal_pose.position.z, _x.goal_pose.orientation.x, _x.goal_pose.orientation.y, _x.goal_pose.orientation.z, _x.goal_pose.orientation.w))
      length = len(self.segments)
      buff.write(_struct_I.pack(length))
      for val1 in self.segments:
        length = len(val1.primitives)
        buff.write(_struct_I.pack(length))
        for val2 in val1.primitives:
          _x = val2.id
          buff.write(_get_struct_q().pack(_x))
          _x = val2.primitive_type
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.preferred_primitive_id
        buff.write(_get_struct_q().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.start_pose is None:
        self.start_pose = geometry_msgs.msg.Pose()
      if self.goal_pose is None:
        self.goal_pose = geometry_msgs.msg.Pose()
      if self.segments is None:
        self.segments = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.start_pose.position.x, _x.start_pose.position.y, _x.start_pose.position.z, _x.start_pose.orientation.x, _x.start_pose.orientation.y, _x.start_pose.orientation.z, _x.start_pose.orientation.w, _x.goal_pose.position.x, _x.goal_pose.position.y, _x.goal_pose.position.z, _x.goal_pose.orientation.x, _x.goal_pose.orientation.y, _x.goal_pose.orientation.z, _x.goal_pose.orientation.w,) = _get_struct_14d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.segments = []
      for i in range(0, length):
        val1 = in2ulv_msgs.msg.HDMapSegment()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.primitives = []
        for i in range(0, length):
          val2 = in2ulv_msgs.msg.HDMapPrimitive()
          start = end
          end += 8
          (val2.id,) = _get_struct_q().unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.primitive_type = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.primitive_type = str[start:end]
          val1.primitives.append(val2)
        start = end
        end += 8
        (val1.preferred_primitive_id,) = _get_struct_q().unpack(str[start:end])
        self.segments.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_q = None
def _get_struct_q():
    global _struct_q
    if _struct_q is None:
        _struct_q = struct.Struct("<q")
    return _struct_q
