# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from in2ulv_msgs/INSMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class INSMsg(genpy.Message):
  _md5sum = "7becfa5a7d632c7c67b72fd6b667376f"
  _type = "in2ulv_msgs/INSMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# 帧头，包含时间戳信息
std_msgs/Header header

# 模块类型
uint8 module_type

# error_code
uint32 error_code

# 模块信息
string ins_data

# INS_Acc (0X500)
uint16 ACC_X
uint16 ACC_Y
uint16 ACC_Z

# INS_GYRO (0X501)
uint16 GYRO_X
uint16 GYRO_Y
uint16 GYRO_Z

# INS_HeadingPitchRoll (0X502)
uint16 INS_PitchAngle
uint16 INS_RollAngle
uint16 INS_HeadingAngle

# INS_HeightAndTime (0X503)
uint32 INS_LocatHeight
uint32 INS_Time

# INS_LatitudeLongitude (0X504)
uint32 INS_Latitude
uint32 INS_Longitude

# INS_Speed (0X505)
uint16 INS_NorthSpd
uint16 INS_EastSpd
uint16 INS_ToGroundSpd

# INS_DataInfo (0X506)
uint8 INS_GpsFlag_Pos
uint8 INS_NumSV     #星数
uint8 INS_GpsFlag_Heading
uint8 INS_Gps_Age
uint8 INS_Car_Status
uint8 INS_Status

# INS_Std (0X507)
uint16 INS_Std_Lat
uint16 INS_Std_Lon
uint16 INS_Std_LocatHeight
uint16 INS_Std_Heading

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','module_type','error_code','ins_data','ACC_X','ACC_Y','ACC_Z','GYRO_X','GYRO_Y','GYRO_Z','INS_PitchAngle','INS_RollAngle','INS_HeadingAngle','INS_LocatHeight','INS_Time','INS_Latitude','INS_Longitude','INS_NorthSpd','INS_EastSpd','INS_ToGroundSpd','INS_GpsFlag_Pos','INS_NumSV','INS_GpsFlag_Heading','INS_Gps_Age','INS_Car_Status','INS_Status','INS_Std_Lat','INS_Std_Lon','INS_Std_LocatHeight','INS_Std_Heading']
  _slot_types = ['std_msgs/Header','uint8','uint32','string','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint16','uint32','uint32','uint32','uint32','uint16','uint16','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint16','uint16','uint16','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,module_type,error_code,ins_data,ACC_X,ACC_Y,ACC_Z,GYRO_X,GYRO_Y,GYRO_Z,INS_PitchAngle,INS_RollAngle,INS_HeadingAngle,INS_LocatHeight,INS_Time,INS_Latitude,INS_Longitude,INS_NorthSpd,INS_EastSpd,INS_ToGroundSpd,INS_GpsFlag_Pos,INS_NumSV,INS_GpsFlag_Heading,INS_Gps_Age,INS_Car_Status,INS_Status,INS_Std_Lat,INS_Std_Lon,INS_Std_LocatHeight,INS_Std_Heading

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(INSMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.module_type is None:
        self.module_type = 0
      if self.error_code is None:
        self.error_code = 0
      if self.ins_data is None:
        self.ins_data = ''
      if self.ACC_X is None:
        self.ACC_X = 0
      if self.ACC_Y is None:
        self.ACC_Y = 0
      if self.ACC_Z is None:
        self.ACC_Z = 0
      if self.GYRO_X is None:
        self.GYRO_X = 0
      if self.GYRO_Y is None:
        self.GYRO_Y = 0
      if self.GYRO_Z is None:
        self.GYRO_Z = 0
      if self.INS_PitchAngle is None:
        self.INS_PitchAngle = 0
      if self.INS_RollAngle is None:
        self.INS_RollAngle = 0
      if self.INS_HeadingAngle is None:
        self.INS_HeadingAngle = 0
      if self.INS_LocatHeight is None:
        self.INS_LocatHeight = 0
      if self.INS_Time is None:
        self.INS_Time = 0
      if self.INS_Latitude is None:
        self.INS_Latitude = 0
      if self.INS_Longitude is None:
        self.INS_Longitude = 0
      if self.INS_NorthSpd is None:
        self.INS_NorthSpd = 0
      if self.INS_EastSpd is None:
        self.INS_EastSpd = 0
      if self.INS_ToGroundSpd is None:
        self.INS_ToGroundSpd = 0
      if self.INS_GpsFlag_Pos is None:
        self.INS_GpsFlag_Pos = 0
      if self.INS_NumSV is None:
        self.INS_NumSV = 0
      if self.INS_GpsFlag_Heading is None:
        self.INS_GpsFlag_Heading = 0
      if self.INS_Gps_Age is None:
        self.INS_Gps_Age = 0
      if self.INS_Car_Status is None:
        self.INS_Car_Status = 0
      if self.INS_Status is None:
        self.INS_Status = 0
      if self.INS_Std_Lat is None:
        self.INS_Std_Lat = 0
      if self.INS_Std_Lon is None:
        self.INS_Std_Lon = 0
      if self.INS_Std_LocatHeight is None:
        self.INS_Std_LocatHeight = 0
      if self.INS_Std_Heading is None:
        self.INS_Std_Heading = 0
    else:
      self.header = std_msgs.msg.Header()
      self.module_type = 0
      self.error_code = 0
      self.ins_data = ''
      self.ACC_X = 0
      self.ACC_Y = 0
      self.ACC_Z = 0
      self.GYRO_X = 0
      self.GYRO_Y = 0
      self.GYRO_Z = 0
      self.INS_PitchAngle = 0
      self.INS_RollAngle = 0
      self.INS_HeadingAngle = 0
      self.INS_LocatHeight = 0
      self.INS_Time = 0
      self.INS_Latitude = 0
      self.INS_Longitude = 0
      self.INS_NorthSpd = 0
      self.INS_EastSpd = 0
      self.INS_ToGroundSpd = 0
      self.INS_GpsFlag_Pos = 0
      self.INS_NumSV = 0
      self.INS_GpsFlag_Heading = 0
      self.INS_Gps_Age = 0
      self.INS_Car_Status = 0
      self.INS_Status = 0
      self.INS_Std_Lat = 0
      self.INS_Std_Lon = 0
      self.INS_Std_LocatHeight = 0
      self.INS_Std_Heading = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_type, _x.error_code))
      _x = self.ins_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9H4I3H6B4H().pack(_x.ACC_X, _x.ACC_Y, _x.ACC_Z, _x.GYRO_X, _x.GYRO_Y, _x.GYRO_Z, _x.INS_PitchAngle, _x.INS_RollAngle, _x.INS_HeadingAngle, _x.INS_LocatHeight, _x.INS_Time, _x.INS_Latitude, _x.INS_Longitude, _x.INS_NorthSpd, _x.INS_EastSpd, _x.INS_ToGroundSpd, _x.INS_GpsFlag_Pos, _x.INS_NumSV, _x.INS_GpsFlag_Heading, _x.INS_Gps_Age, _x.INS_Car_Status, _x.INS_Status, _x.INS_Std_Lat, _x.INS_Std_Lon, _x.INS_Std_LocatHeight, _x.INS_Std_Heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.module_type, _x.error_code,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ins_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ins_data = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.ACC_X, _x.ACC_Y, _x.ACC_Z, _x.GYRO_X, _x.GYRO_Y, _x.GYRO_Z, _x.INS_PitchAngle, _x.INS_RollAngle, _x.INS_HeadingAngle, _x.INS_LocatHeight, _x.INS_Time, _x.INS_Latitude, _x.INS_Longitude, _x.INS_NorthSpd, _x.INS_EastSpd, _x.INS_ToGroundSpd, _x.INS_GpsFlag_Pos, _x.INS_NumSV, _x.INS_GpsFlag_Heading, _x.INS_Gps_Age, _x.INS_Car_Status, _x.INS_Status, _x.INS_Std_Lat, _x.INS_Std_Lon, _x.INS_Std_LocatHeight, _x.INS_Std_Heading,) = _get_struct_9H4I3H6B4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_type, _x.error_code))
      _x = self.ins_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9H4I3H6B4H().pack(_x.ACC_X, _x.ACC_Y, _x.ACC_Z, _x.GYRO_X, _x.GYRO_Y, _x.GYRO_Z, _x.INS_PitchAngle, _x.INS_RollAngle, _x.INS_HeadingAngle, _x.INS_LocatHeight, _x.INS_Time, _x.INS_Latitude, _x.INS_Longitude, _x.INS_NorthSpd, _x.INS_EastSpd, _x.INS_ToGroundSpd, _x.INS_GpsFlag_Pos, _x.INS_NumSV, _x.INS_GpsFlag_Heading, _x.INS_Gps_Age, _x.INS_Car_Status, _x.INS_Status, _x.INS_Std_Lat, _x.INS_Std_Lon, _x.INS_Std_LocatHeight, _x.INS_Std_Heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.module_type, _x.error_code,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ins_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ins_data = str[start:end]
      _x = self
      start = end
      end += 54
      (_x.ACC_X, _x.ACC_Y, _x.ACC_Z, _x.GYRO_X, _x.GYRO_Y, _x.GYRO_Z, _x.INS_PitchAngle, _x.INS_RollAngle, _x.INS_HeadingAngle, _x.INS_LocatHeight, _x.INS_Time, _x.INS_Latitude, _x.INS_Longitude, _x.INS_NorthSpd, _x.INS_EastSpd, _x.INS_ToGroundSpd, _x.INS_GpsFlag_Pos, _x.INS_NumSV, _x.INS_GpsFlag_Heading, _x.INS_Gps_Age, _x.INS_Car_Status, _x.INS_Status, _x.INS_Std_Lat, _x.INS_Std_Lon, _x.INS_Std_LocatHeight, _x.INS_Std_Heading,) = _get_struct_9H4I3H6B4H().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9H4I3H6B4H = None
def _get_struct_9H4I3H6B4H():
    global _struct_9H4I3H6B4H
    if _struct_9H4I3H6B4H is None:
        _struct_9H4I3H6B4H = struct.Struct("<9H4I3H6B4H")
    return _struct_9H4I3H6B4H
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
