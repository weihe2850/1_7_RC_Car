# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from in2ulv_msgs/LatticeDebug.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class LatticeDebug(genpy.Message):
  _md5sum = "3feccd66a4ab06d8162cf5e6ebd8f19f"
  _type = "in2ulv_msgs/LatticeDebug"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

float64 trajectory_point_x
float64 trajectory_point_y
float64 trajectory_point_theta
float64 trajectory_point_kappa
float64 trajectory_point_v
float64 trajectory_point_a

float64 matched_point_s
float64 matched_point_x
float64 matched_point_y
float64 matched_point_theta
float64 matched_point_kappa
float64 matched_point_kappa_prime

float64 s
float64 s_dot
float64 s_ddot
float64 d
float64 d_prime
float64 d_pprime

float64 stop_point_distance
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','trajectory_point_x','trajectory_point_y','trajectory_point_theta','trajectory_point_kappa','trajectory_point_v','trajectory_point_a','matched_point_s','matched_point_x','matched_point_y','matched_point_theta','matched_point_kappa','matched_point_kappa_prime','s','s_dot','s_ddot','d','d_prime','d_pprime','stop_point_distance']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,trajectory_point_x,trajectory_point_y,trajectory_point_theta,trajectory_point_kappa,trajectory_point_v,trajectory_point_a,matched_point_s,matched_point_x,matched_point_y,matched_point_theta,matched_point_kappa,matched_point_kappa_prime,s,s_dot,s_ddot,d,d_prime,d_pprime,stop_point_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LatticeDebug, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trajectory_point_x is None:
        self.trajectory_point_x = 0.
      if self.trajectory_point_y is None:
        self.trajectory_point_y = 0.
      if self.trajectory_point_theta is None:
        self.trajectory_point_theta = 0.
      if self.trajectory_point_kappa is None:
        self.trajectory_point_kappa = 0.
      if self.trajectory_point_v is None:
        self.trajectory_point_v = 0.
      if self.trajectory_point_a is None:
        self.trajectory_point_a = 0.
      if self.matched_point_s is None:
        self.matched_point_s = 0.
      if self.matched_point_x is None:
        self.matched_point_x = 0.
      if self.matched_point_y is None:
        self.matched_point_y = 0.
      if self.matched_point_theta is None:
        self.matched_point_theta = 0.
      if self.matched_point_kappa is None:
        self.matched_point_kappa = 0.
      if self.matched_point_kappa_prime is None:
        self.matched_point_kappa_prime = 0.
      if self.s is None:
        self.s = 0.
      if self.s_dot is None:
        self.s_dot = 0.
      if self.s_ddot is None:
        self.s_ddot = 0.
      if self.d is None:
        self.d = 0.
      if self.d_prime is None:
        self.d_prime = 0.
      if self.d_pprime is None:
        self.d_pprime = 0.
      if self.stop_point_distance is None:
        self.stop_point_distance = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.trajectory_point_x = 0.
      self.trajectory_point_y = 0.
      self.trajectory_point_theta = 0.
      self.trajectory_point_kappa = 0.
      self.trajectory_point_v = 0.
      self.trajectory_point_a = 0.
      self.matched_point_s = 0.
      self.matched_point_x = 0.
      self.matched_point_y = 0.
      self.matched_point_theta = 0.
      self.matched_point_kappa = 0.
      self.matched_point_kappa_prime = 0.
      self.s = 0.
      self.s_dot = 0.
      self.s_ddot = 0.
      self.d = 0.
      self.d_prime = 0.
      self.d_pprime = 0.
      self.stop_point_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_19d().pack(_x.trajectory_point_x, _x.trajectory_point_y, _x.trajectory_point_theta, _x.trajectory_point_kappa, _x.trajectory_point_v, _x.trajectory_point_a, _x.matched_point_s, _x.matched_point_x, _x.matched_point_y, _x.matched_point_theta, _x.matched_point_kappa, _x.matched_point_kappa_prime, _x.s, _x.s_dot, _x.s_ddot, _x.d, _x.d_prime, _x.d_pprime, _x.stop_point_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 152
      (_x.trajectory_point_x, _x.trajectory_point_y, _x.trajectory_point_theta, _x.trajectory_point_kappa, _x.trajectory_point_v, _x.trajectory_point_a, _x.matched_point_s, _x.matched_point_x, _x.matched_point_y, _x.matched_point_theta, _x.matched_point_kappa, _x.matched_point_kappa_prime, _x.s, _x.s_dot, _x.s_ddot, _x.d, _x.d_prime, _x.d_pprime, _x.stop_point_distance,) = _get_struct_19d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_19d().pack(_x.trajectory_point_x, _x.trajectory_point_y, _x.trajectory_point_theta, _x.trajectory_point_kappa, _x.trajectory_point_v, _x.trajectory_point_a, _x.matched_point_s, _x.matched_point_x, _x.matched_point_y, _x.matched_point_theta, _x.matched_point_kappa, _x.matched_point_kappa_prime, _x.s, _x.s_dot, _x.s_ddot, _x.d, _x.d_prime, _x.d_pprime, _x.stop_point_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 152
      (_x.trajectory_point_x, _x.trajectory_point_y, _x.trajectory_point_theta, _x.trajectory_point_kappa, _x.trajectory_point_v, _x.trajectory_point_a, _x.matched_point_s, _x.matched_point_x, _x.matched_point_y, _x.matched_point_theta, _x.matched_point_kappa, _x.matched_point_kappa_prime, _x.s, _x.s_dot, _x.s_ddot, _x.d, _x.d_prime, _x.d_pprime, _x.stop_point_distance,) = _get_struct_19d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_19d = None
def _get_struct_19d():
    global _struct_19d
    if _struct_19d is None:
        _struct_19d = struct.Struct("<19d")
    return _struct_19d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
