# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from in2ulv_msgs/ChassisMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ChassisMsg(genpy.Message):
  _md5sum = "4afd528f4d1ffe906c0a12d9e60847f2"
  _type = "in2ulv_msgs/ChassisMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# 帧头，包含时间戳信息
std_msgs/Header header

# 模块类型
uint8 module_type

# error_code
uint32 error_code

# 模块信息
string chassis_data

# VCU_Torque_Request (0x165)
uint8 TMTorqRqstV       # 电机扭矩请求有效性
float64 TMTorqRqst      # 电机扭矩请求
# uint8 VCUCtrlRqst1RollCnt# 循环计数
# uint8 VCUCtrlRqst1Cksm  # 校验和

# VCU_General_Status_1 (04C5)
uint8 HandBrkSts        # 手刹开关状态
uint8 VecStatRdy        # 整车运行准备就绪
uint8 KyPstn            # 钥匙状态

# VCU_General_Status_2 (0x36A)
uint8 VecSOC            # SOC值
uint8 VehSpdAvgDrvnV    # 车速有效性
float64 VehSpdAvgDrvn   # 车速
uint8 VecTMActSpdV      # 电机当前转速有效性
uint16 VecTMActSpd     # 电机当前转速
# uint8 VCUGenStRollCn    # 循环计数
uint8 VCUVehDrvMod      # VCU驱动模式
# uint8 VCUGenStCksm      # 校验和

# VCU_General_Status_3 0x4C7
float64 LowBatVol       # 低压蓄电池电压

# BMS_General_Status_2 (0x297)
uint8 BatSOC    # 电池电量

# Exterior_Lighting_HS (0x140)
uint8 HhBmIO        # 远光灯指示
uint8 WindscenWipSt # 雨刮状态
uint8 LwBmIO        # 近光灯指示
uint8 HzrdLgtSwAtv  # 危险警报开关状态
uint8 HzrdLtIO      # 危险警报灯指示
uint8 RtTrnLmpAtv   # 右转向灯指示
uint8 LftTrnLmpAtv  # 左转向灯指示
uint8 WipSwStat     # 雨刮控制开关状态
uint8 StpLpSt       # 行车制动灯状态

# Bool Is Turn Light Blinking Status
bool is_left_blinking
bool is_right_blinking

# Airbag_Impact_Data (0x0E1)
uint8 DrSbltAtc     # 驾驶员安全带状态
uint8 DrSbltAtcV    # 安全带状态有效性

# LS_Device_Information (0x12A)
uint8 TDAjrSwAtv        # 尾门门碰开关状态
uint8 PsDoorOpenSwAct   # 右前门锁开关状态
uint8 PDAjrSwAtv        # 右前门门碰开关状态
uint8 DrDoorOpenSwAct   # 驾驶员侧门锁开关状态
uint8 DDAjrSwAct        # 驾驶员侧门碰开关状态
float64 PsWdwOpenDgr    # 副驾驶车窗开度
float64 DrWdwOpenDgr    # 驾驶员车窗开度
uint8 BCMRunMod         # BCM运行模式
uint8 BCMRunModV        # BCM运行模式有效性

# Electric_Park_Brake_Status_1 (0x17E)
uint8 EPBSysWrnIndReq_1     # EPB系统报警显示要求
uint8 EPBSysWrnIndReqV_1    # EPB系统报警显示要求有效性
uint8 EPBSysBrkLtsReq_1     # PB制动灯点亮要求
uint8 EPBSysStatIndReq_1    # EPB系统状态指示灯需求
# uint8 EPBAlvRlCnt_1         # 电子驻车循环计数
uint8 ElecPrkBrkSwStatV_1   # 驻车按键状态有效性
uint8 ElecPrkBrkStat_1      # EPB系统工作状态
uint8 ElecPrkBrkSwStat_1    # 驻车按键状态
# uint8 EPBStaCksm_1          # 校验和


# ADAS_General_Status_11 (0x329)
uint8 ADASWndSnWpCtrl       # ADAS雨刮控制
uint8 ADASHzdLtCtrl         # ADAS双闪控制
uint8 ADASSdTrnLmpRHCtrl    # ADAS右转向控制
uint8 ADASSdTrnLmpLHCtrl    # ADAS左转向控制
uint8 ADASLowBmCtrl         # ADAS近光灯控制
uint8 ADASHighBmCtrl        # ADAS远光灯控制
uint8 ADASLkCtrl            # ADAS锁控功能
uint8 CarWindCtrl           # ADAS车窗控制
uint8 ADASRemtPrkModRqst    # ADAS电源模式请求
uint8 BCMADASCtrlRqst       # ADAS控制请求
uint8 BCMADASCtrlRqstV      # ADAS控制请求有效性

# MCU_General_Status_1 (0x16C)
float64 TMActTorq   # 电机当前扭矩
int32 TMActSpd      # 电机当前转速

# # VCU_General_Status_2 (0x36A)
# uint8 VehSpdAvgDrvnV    # 车速有效性
# float64 VehSpdAvgDrvn   # 车速

# PPEI_Chassis_General_Status_1 (0x1E9)
uint8 VSELatAccV    # 横向加速度有效性
float64 VSELatAcc   # 车辆横向加速度 

# Vehicle_Stability_Information (0x128)
uint8 VSELongAccV   # 纵向加速度有效性
float64 VSELongAcc  # 车辆纵向加速度

# Vehicle_Odometer (0x120)
float64 VehOdo  # 车辆行驶里程
uint8 VehOdoV   # 车辆里程有效性

# VCU_Vehicle_Command_State (0x155)
uint8 BrakPedalPos  # 制动踏板位置
uint8 AccActPos     # 加速踏板位置
uint8 VecActGearStsV    # 整车当前档位状态有效性
uint8 VecActGearSts     # 整车当前档位状态

# PPEI_Steering_Wheel_Angle (0x1E5)
uint8 StrWhAngV     # 方向盘角度有效性
float64 StrWhAng    # 方向盘角度
uint8 EPSProId      # EPS产品标识符
uint8 PwrStrIo      # EPS故障指示
# uint8 StWhlAngAliveRollCnt  # 循环计数
# uint8 StrWhAngExPrtVal      # 校验和

# PPEI_Steering_Wheel_Angle_Information (0x1E6)
uint8 SterModV          # 转向模式有效性
uint8 SterMod           # 转向模式
float64 EPS_LKARespTorq # EPS LKA的响应扭矩
uint8 SterFltMod        # 转向故障码(预留)
uint8 DrStrTorqV        # 驾驶员转向扭矩有效性
float64 DrStrTorqVal    # 驾驶员转向扭矩
# uint8 StWhlAngInfmtnRollCnt # 循环计数
# uint8 StWhlAngInfmtnCksm    # 校验和

# Steering_Sensor_1 (0x14A)
uint16 SteerWheelRotSpd     # 方向盘角速度
float64 SteerWheelAngle     # 方向盘转角

# Electic_Park_Brake_Status (0x230)
uint8 ElecPrkBrkStat    # EBP系统工作状态

# Electric_Wheel_Grnd_Velocity (0x348)
uint8 WhlGrndVlctyLftDrvnV  # 左驱动轮对地速度有效性
float64 WhlGrndVlctyLftDrvn # 左驱动轮对地速度
uint8 WhlGrndVlctyRtDrvnV   # 右驱动轮对地速度有效性
float64 WhlGrndVlctyRtDrvn  # 右驱动轮对地速度

# NonDriven_Wheel_Grnd_Velocity (0x34A)
uint8 WhlGrndVlctyLftNnDrvnV    # 左从动轮对地速度有效性
float64 WhlGrndVlctyLftNnDrvn   # 左从动轮对地速度
uint8 WhlGrndVlctyRtNnDrvnV     # 右从动轮对地速度有效性
float64 WhlGrndVlctyRtNnDrvn    # 右从动轮对地速度

# PPEI_Driven_Whl_Rotational_Stat (0x0C1)
uint8 LftDrvnWhlDirec       # 左驱动轮方向
uint8 WhlGrndPlsLftDrvnV    # 左驱动轮对地脉冲有效性
uint16 WhlGrndPlsLftDrvn    # 左驱动轮对地脉冲
uint8 RtDrvnWhlDirec        # 右驱动轮方向
uint8 WhlGrndPlsRtDrvnV     # 右驱动轮对地脉冲有效性
uint16 WhlGrndPlsRtDrvn     # 右驱动轮对地脉冲

# PPEI_NonDriven_Whl_Rotational_Stat (0x0C5)
uint8 LftNnDrvnWhlDirec     # 左从动轮方向
uint8 WhlGrndPlsLftNnDrvnV  # 左从动轮对地脉冲有效性
uint16 WhlGrndPlsLftNnDrvn  # 左从动轮对地脉冲
uint8 RtNnDrvnWhlDirec      # 右从动轮方向
uint8 WhlGrndPlsRtNnDrvnV   # 右从动轮对地脉冲有效性
uint16 WhlGrndPlsRtNnDrvn   # 右从动轮对地脉冲

# EBS_General_Status_1 (0x132)
uint8 BBWSts            # 线控制动功能状态
uint8 EBSDrvMod         # EBS运行模式
uint8 IDURqst           # IDU线控制动请求状态
uint8 EBSMCBrPressure   # EBS主缸制动压力
uint8 BrakPedalDisp     # 制动踏板位移量
# uint8 EBSGenSts1RollCnt # 循环计数
# uint8 EBSGenSts1Cksm    # 校验和

# ADAS_General_Status_1 (0x1D1)
uint8 ADAS_StrAngleRqstV    # ADAS期望转向角度请求有效值
uint16 ADASBrakRqstPres     # ADAS制动请求压力
uint8 EPB_ADASPrkngRqst     # EPB ADAS驻车请求
uint8 ADASStrTorqRqst       # ADAS转向扭矩请求
uint16 ADASStrTorqTgt       # ADAS转向扭矩目标值
uint16 ADAS_StrAngle        # ADAS期望转向角度

# ADAS_General_Status_2 (0x1D2)
uint8 VCUTTgtAclrtnRqst         # VCU目标加速度请求
float64 VCUTTgtAclrtnRqstVal    # VCU目标加速度请求值
uint8 GearRqst                  # 档位请求
uint8 TgtGear                   # 档位
uint8 VCUTTgtSpRqst             # VCU目标速度请求
float64 VCUTTgtSpRqstVal        # VCU目标速度请求值

# URC_Genertal_Status_1 (0x211)
uint8 SensSt_1st        # 1号探头状态
uint16 DisFrm1stFrtSens # 1号探头距离
uint8 SensSt_2nd
uint16 DisFrm2ndFrtSens
uint8 SensSt_3rd
uint16 DisFrm3rdFrtSens
uint8 SensSt_4th
uint16 DisFrm4thFrtSens

# URC_Genertal_Status_2 (0x212)
uint8 SensSt_5th
uint16 DisFrm5thFrtSens
uint8 SensSt_6th
uint16 DisFrm6thFrtSens
uint8 SensSt_7th
uint16 DisFrm7thFrtSens
uint8 SensSt_8th
uint16 DisFrm8thFrtSens

# URC_Genertal_Status_3 (0x213)
uint8 SensSt_9th
uint16 DisFrm9thFrtSens
uint8 SensSt_10th
uint16 DisFrm10thFrtSens
uint8 SensSt_11th
uint16 DisFrm11thFrtSens
uint8 SensSt_12th
uint16 DisFrm12thFrtSens


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','module_type','error_code','chassis_data','TMTorqRqstV','TMTorqRqst','HandBrkSts','VecStatRdy','KyPstn','VecSOC','VehSpdAvgDrvnV','VehSpdAvgDrvn','VecTMActSpdV','VecTMActSpd','VCUVehDrvMod','LowBatVol','BatSOC','HhBmIO','WindscenWipSt','LwBmIO','HzrdLgtSwAtv','HzrdLtIO','RtTrnLmpAtv','LftTrnLmpAtv','WipSwStat','StpLpSt','is_left_blinking','is_right_blinking','DrSbltAtc','DrSbltAtcV','TDAjrSwAtv','PsDoorOpenSwAct','PDAjrSwAtv','DrDoorOpenSwAct','DDAjrSwAct','PsWdwOpenDgr','DrWdwOpenDgr','BCMRunMod','BCMRunModV','EPBSysWrnIndReq_1','EPBSysWrnIndReqV_1','EPBSysBrkLtsReq_1','EPBSysStatIndReq_1','ElecPrkBrkSwStatV_1','ElecPrkBrkStat_1','ElecPrkBrkSwStat_1','ADASWndSnWpCtrl','ADASHzdLtCtrl','ADASSdTrnLmpRHCtrl','ADASSdTrnLmpLHCtrl','ADASLowBmCtrl','ADASHighBmCtrl','ADASLkCtrl','CarWindCtrl','ADASRemtPrkModRqst','BCMADASCtrlRqst','BCMADASCtrlRqstV','TMActTorq','TMActSpd','VSELatAccV','VSELatAcc','VSELongAccV','VSELongAcc','VehOdo','VehOdoV','BrakPedalPos','AccActPos','VecActGearStsV','VecActGearSts','StrWhAngV','StrWhAng','EPSProId','PwrStrIo','SterModV','SterMod','EPS_LKARespTorq','SterFltMod','DrStrTorqV','DrStrTorqVal','SteerWheelRotSpd','SteerWheelAngle','ElecPrkBrkStat','WhlGrndVlctyLftDrvnV','WhlGrndVlctyLftDrvn','WhlGrndVlctyRtDrvnV','WhlGrndVlctyRtDrvn','WhlGrndVlctyLftNnDrvnV','WhlGrndVlctyLftNnDrvn','WhlGrndVlctyRtNnDrvnV','WhlGrndVlctyRtNnDrvn','LftDrvnWhlDirec','WhlGrndPlsLftDrvnV','WhlGrndPlsLftDrvn','RtDrvnWhlDirec','WhlGrndPlsRtDrvnV','WhlGrndPlsRtDrvn','LftNnDrvnWhlDirec','WhlGrndPlsLftNnDrvnV','WhlGrndPlsLftNnDrvn','RtNnDrvnWhlDirec','WhlGrndPlsRtNnDrvnV','WhlGrndPlsRtNnDrvn','BBWSts','EBSDrvMod','IDURqst','EBSMCBrPressure','BrakPedalDisp','ADAS_StrAngleRqstV','ADASBrakRqstPres','EPB_ADASPrkngRqst','ADASStrTorqRqst','ADASStrTorqTgt','ADAS_StrAngle','VCUTTgtAclrtnRqst','VCUTTgtAclrtnRqstVal','GearRqst','TgtGear','VCUTTgtSpRqst','VCUTTgtSpRqstVal','SensSt_1st','DisFrm1stFrtSens','SensSt_2nd','DisFrm2ndFrtSens','SensSt_3rd','DisFrm3rdFrtSens','SensSt_4th','DisFrm4thFrtSens','SensSt_5th','DisFrm5thFrtSens','SensSt_6th','DisFrm6thFrtSens','SensSt_7th','DisFrm7thFrtSens','SensSt_8th','DisFrm8thFrtSens','SensSt_9th','DisFrm9thFrtSens','SensSt_10th','DisFrm10thFrtSens','SensSt_11th','DisFrm11thFrtSens','SensSt_12th','DisFrm12thFrtSens']
  _slot_types = ['std_msgs/Header','uint8','uint32','string','uint8','float64','uint8','uint8','uint8','uint8','uint8','float64','uint8','uint16','uint8','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','bool','bool','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float64','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float64','int32','uint8','float64','uint8','float64','float64','uint8','uint8','uint8','uint8','uint8','uint8','float64','uint8','uint8','uint8','uint8','float64','uint8','uint8','float64','uint16','float64','uint8','uint8','float64','uint8','float64','uint8','float64','uint8','float64','uint8','uint8','uint16','uint8','uint8','uint16','uint8','uint8','uint16','uint8','uint8','uint16','uint8','uint8','uint8','uint8','uint8','uint8','uint16','uint8','uint8','uint16','uint16','uint8','float64','uint8','uint8','uint8','float64','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,module_type,error_code,chassis_data,TMTorqRqstV,TMTorqRqst,HandBrkSts,VecStatRdy,KyPstn,VecSOC,VehSpdAvgDrvnV,VehSpdAvgDrvn,VecTMActSpdV,VecTMActSpd,VCUVehDrvMod,LowBatVol,BatSOC,HhBmIO,WindscenWipSt,LwBmIO,HzrdLgtSwAtv,HzrdLtIO,RtTrnLmpAtv,LftTrnLmpAtv,WipSwStat,StpLpSt,is_left_blinking,is_right_blinking,DrSbltAtc,DrSbltAtcV,TDAjrSwAtv,PsDoorOpenSwAct,PDAjrSwAtv,DrDoorOpenSwAct,DDAjrSwAct,PsWdwOpenDgr,DrWdwOpenDgr,BCMRunMod,BCMRunModV,EPBSysWrnIndReq_1,EPBSysWrnIndReqV_1,EPBSysBrkLtsReq_1,EPBSysStatIndReq_1,ElecPrkBrkSwStatV_1,ElecPrkBrkStat_1,ElecPrkBrkSwStat_1,ADASWndSnWpCtrl,ADASHzdLtCtrl,ADASSdTrnLmpRHCtrl,ADASSdTrnLmpLHCtrl,ADASLowBmCtrl,ADASHighBmCtrl,ADASLkCtrl,CarWindCtrl,ADASRemtPrkModRqst,BCMADASCtrlRqst,BCMADASCtrlRqstV,TMActTorq,TMActSpd,VSELatAccV,VSELatAcc,VSELongAccV,VSELongAcc,VehOdo,VehOdoV,BrakPedalPos,AccActPos,VecActGearStsV,VecActGearSts,StrWhAngV,StrWhAng,EPSProId,PwrStrIo,SterModV,SterMod,EPS_LKARespTorq,SterFltMod,DrStrTorqV,DrStrTorqVal,SteerWheelRotSpd,SteerWheelAngle,ElecPrkBrkStat,WhlGrndVlctyLftDrvnV,WhlGrndVlctyLftDrvn,WhlGrndVlctyRtDrvnV,WhlGrndVlctyRtDrvn,WhlGrndVlctyLftNnDrvnV,WhlGrndVlctyLftNnDrvn,WhlGrndVlctyRtNnDrvnV,WhlGrndVlctyRtNnDrvn,LftDrvnWhlDirec,WhlGrndPlsLftDrvnV,WhlGrndPlsLftDrvn,RtDrvnWhlDirec,WhlGrndPlsRtDrvnV,WhlGrndPlsRtDrvn,LftNnDrvnWhlDirec,WhlGrndPlsLftNnDrvnV,WhlGrndPlsLftNnDrvn,RtNnDrvnWhlDirec,WhlGrndPlsRtNnDrvnV,WhlGrndPlsRtNnDrvn,BBWSts,EBSDrvMod,IDURqst,EBSMCBrPressure,BrakPedalDisp,ADAS_StrAngleRqstV,ADASBrakRqstPres,EPB_ADASPrkngRqst,ADASStrTorqRqst,ADASStrTorqTgt,ADAS_StrAngle,VCUTTgtAclrtnRqst,VCUTTgtAclrtnRqstVal,GearRqst,TgtGear,VCUTTgtSpRqst,VCUTTgtSpRqstVal,SensSt_1st,DisFrm1stFrtSens,SensSt_2nd,DisFrm2ndFrtSens,SensSt_3rd,DisFrm3rdFrtSens,SensSt_4th,DisFrm4thFrtSens,SensSt_5th,DisFrm5thFrtSens,SensSt_6th,DisFrm6thFrtSens,SensSt_7th,DisFrm7thFrtSens,SensSt_8th,DisFrm8thFrtSens,SensSt_9th,DisFrm9thFrtSens,SensSt_10th,DisFrm10thFrtSens,SensSt_11th,DisFrm11thFrtSens,SensSt_12th,DisFrm12thFrtSens

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChassisMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.module_type is None:
        self.module_type = 0
      if self.error_code is None:
        self.error_code = 0
      if self.chassis_data is None:
        self.chassis_data = ''
      if self.TMTorqRqstV is None:
        self.TMTorqRqstV = 0
      if self.TMTorqRqst is None:
        self.TMTorqRqst = 0.
      if self.HandBrkSts is None:
        self.HandBrkSts = 0
      if self.VecStatRdy is None:
        self.VecStatRdy = 0
      if self.KyPstn is None:
        self.KyPstn = 0
      if self.VecSOC is None:
        self.VecSOC = 0
      if self.VehSpdAvgDrvnV is None:
        self.VehSpdAvgDrvnV = 0
      if self.VehSpdAvgDrvn is None:
        self.VehSpdAvgDrvn = 0.
      if self.VecTMActSpdV is None:
        self.VecTMActSpdV = 0
      if self.VecTMActSpd is None:
        self.VecTMActSpd = 0
      if self.VCUVehDrvMod is None:
        self.VCUVehDrvMod = 0
      if self.LowBatVol is None:
        self.LowBatVol = 0.
      if self.BatSOC is None:
        self.BatSOC = 0
      if self.HhBmIO is None:
        self.HhBmIO = 0
      if self.WindscenWipSt is None:
        self.WindscenWipSt = 0
      if self.LwBmIO is None:
        self.LwBmIO = 0
      if self.HzrdLgtSwAtv is None:
        self.HzrdLgtSwAtv = 0
      if self.HzrdLtIO is None:
        self.HzrdLtIO = 0
      if self.RtTrnLmpAtv is None:
        self.RtTrnLmpAtv = 0
      if self.LftTrnLmpAtv is None:
        self.LftTrnLmpAtv = 0
      if self.WipSwStat is None:
        self.WipSwStat = 0
      if self.StpLpSt is None:
        self.StpLpSt = 0
      if self.is_left_blinking is None:
        self.is_left_blinking = False
      if self.is_right_blinking is None:
        self.is_right_blinking = False
      if self.DrSbltAtc is None:
        self.DrSbltAtc = 0
      if self.DrSbltAtcV is None:
        self.DrSbltAtcV = 0
      if self.TDAjrSwAtv is None:
        self.TDAjrSwAtv = 0
      if self.PsDoorOpenSwAct is None:
        self.PsDoorOpenSwAct = 0
      if self.PDAjrSwAtv is None:
        self.PDAjrSwAtv = 0
      if self.DrDoorOpenSwAct is None:
        self.DrDoorOpenSwAct = 0
      if self.DDAjrSwAct is None:
        self.DDAjrSwAct = 0
      if self.PsWdwOpenDgr is None:
        self.PsWdwOpenDgr = 0.
      if self.DrWdwOpenDgr is None:
        self.DrWdwOpenDgr = 0.
      if self.BCMRunMod is None:
        self.BCMRunMod = 0
      if self.BCMRunModV is None:
        self.BCMRunModV = 0
      if self.EPBSysWrnIndReq_1 is None:
        self.EPBSysWrnIndReq_1 = 0
      if self.EPBSysWrnIndReqV_1 is None:
        self.EPBSysWrnIndReqV_1 = 0
      if self.EPBSysBrkLtsReq_1 is None:
        self.EPBSysBrkLtsReq_1 = 0
      if self.EPBSysStatIndReq_1 is None:
        self.EPBSysStatIndReq_1 = 0
      if self.ElecPrkBrkSwStatV_1 is None:
        self.ElecPrkBrkSwStatV_1 = 0
      if self.ElecPrkBrkStat_1 is None:
        self.ElecPrkBrkStat_1 = 0
      if self.ElecPrkBrkSwStat_1 is None:
        self.ElecPrkBrkSwStat_1 = 0
      if self.ADASWndSnWpCtrl is None:
        self.ADASWndSnWpCtrl = 0
      if self.ADASHzdLtCtrl is None:
        self.ADASHzdLtCtrl = 0
      if self.ADASSdTrnLmpRHCtrl is None:
        self.ADASSdTrnLmpRHCtrl = 0
      if self.ADASSdTrnLmpLHCtrl is None:
        self.ADASSdTrnLmpLHCtrl = 0
      if self.ADASLowBmCtrl is None:
        self.ADASLowBmCtrl = 0
      if self.ADASHighBmCtrl is None:
        self.ADASHighBmCtrl = 0
      if self.ADASLkCtrl is None:
        self.ADASLkCtrl = 0
      if self.CarWindCtrl is None:
        self.CarWindCtrl = 0
      if self.ADASRemtPrkModRqst is None:
        self.ADASRemtPrkModRqst = 0
      if self.BCMADASCtrlRqst is None:
        self.BCMADASCtrlRqst = 0
      if self.BCMADASCtrlRqstV is None:
        self.BCMADASCtrlRqstV = 0
      if self.TMActTorq is None:
        self.TMActTorq = 0.
      if self.TMActSpd is None:
        self.TMActSpd = 0
      if self.VSELatAccV is None:
        self.VSELatAccV = 0
      if self.VSELatAcc is None:
        self.VSELatAcc = 0.
      if self.VSELongAccV is None:
        self.VSELongAccV = 0
      if self.VSELongAcc is None:
        self.VSELongAcc = 0.
      if self.VehOdo is None:
        self.VehOdo = 0.
      if self.VehOdoV is None:
        self.VehOdoV = 0
      if self.BrakPedalPos is None:
        self.BrakPedalPos = 0
      if self.AccActPos is None:
        self.AccActPos = 0
      if self.VecActGearStsV is None:
        self.VecActGearStsV = 0
      if self.VecActGearSts is None:
        self.VecActGearSts = 0
      if self.StrWhAngV is None:
        self.StrWhAngV = 0
      if self.StrWhAng is None:
        self.StrWhAng = 0.
      if self.EPSProId is None:
        self.EPSProId = 0
      if self.PwrStrIo is None:
        self.PwrStrIo = 0
      if self.SterModV is None:
        self.SterModV = 0
      if self.SterMod is None:
        self.SterMod = 0
      if self.EPS_LKARespTorq is None:
        self.EPS_LKARespTorq = 0.
      if self.SterFltMod is None:
        self.SterFltMod = 0
      if self.DrStrTorqV is None:
        self.DrStrTorqV = 0
      if self.DrStrTorqVal is None:
        self.DrStrTorqVal = 0.
      if self.SteerWheelRotSpd is None:
        self.SteerWheelRotSpd = 0
      if self.SteerWheelAngle is None:
        self.SteerWheelAngle = 0.
      if self.ElecPrkBrkStat is None:
        self.ElecPrkBrkStat = 0
      if self.WhlGrndVlctyLftDrvnV is None:
        self.WhlGrndVlctyLftDrvnV = 0
      if self.WhlGrndVlctyLftDrvn is None:
        self.WhlGrndVlctyLftDrvn = 0.
      if self.WhlGrndVlctyRtDrvnV is None:
        self.WhlGrndVlctyRtDrvnV = 0
      if self.WhlGrndVlctyRtDrvn is None:
        self.WhlGrndVlctyRtDrvn = 0.
      if self.WhlGrndVlctyLftNnDrvnV is None:
        self.WhlGrndVlctyLftNnDrvnV = 0
      if self.WhlGrndVlctyLftNnDrvn is None:
        self.WhlGrndVlctyLftNnDrvn = 0.
      if self.WhlGrndVlctyRtNnDrvnV is None:
        self.WhlGrndVlctyRtNnDrvnV = 0
      if self.WhlGrndVlctyRtNnDrvn is None:
        self.WhlGrndVlctyRtNnDrvn = 0.
      if self.LftDrvnWhlDirec is None:
        self.LftDrvnWhlDirec = 0
      if self.WhlGrndPlsLftDrvnV is None:
        self.WhlGrndPlsLftDrvnV = 0
      if self.WhlGrndPlsLftDrvn is None:
        self.WhlGrndPlsLftDrvn = 0
      if self.RtDrvnWhlDirec is None:
        self.RtDrvnWhlDirec = 0
      if self.WhlGrndPlsRtDrvnV is None:
        self.WhlGrndPlsRtDrvnV = 0
      if self.WhlGrndPlsRtDrvn is None:
        self.WhlGrndPlsRtDrvn = 0
      if self.LftNnDrvnWhlDirec is None:
        self.LftNnDrvnWhlDirec = 0
      if self.WhlGrndPlsLftNnDrvnV is None:
        self.WhlGrndPlsLftNnDrvnV = 0
      if self.WhlGrndPlsLftNnDrvn is None:
        self.WhlGrndPlsLftNnDrvn = 0
      if self.RtNnDrvnWhlDirec is None:
        self.RtNnDrvnWhlDirec = 0
      if self.WhlGrndPlsRtNnDrvnV is None:
        self.WhlGrndPlsRtNnDrvnV = 0
      if self.WhlGrndPlsRtNnDrvn is None:
        self.WhlGrndPlsRtNnDrvn = 0
      if self.BBWSts is None:
        self.BBWSts = 0
      if self.EBSDrvMod is None:
        self.EBSDrvMod = 0
      if self.IDURqst is None:
        self.IDURqst = 0
      if self.EBSMCBrPressure is None:
        self.EBSMCBrPressure = 0
      if self.BrakPedalDisp is None:
        self.BrakPedalDisp = 0
      if self.ADAS_StrAngleRqstV is None:
        self.ADAS_StrAngleRqstV = 0
      if self.ADASBrakRqstPres is None:
        self.ADASBrakRqstPres = 0
      if self.EPB_ADASPrkngRqst is None:
        self.EPB_ADASPrkngRqst = 0
      if self.ADASStrTorqRqst is None:
        self.ADASStrTorqRqst = 0
      if self.ADASStrTorqTgt is None:
        self.ADASStrTorqTgt = 0
      if self.ADAS_StrAngle is None:
        self.ADAS_StrAngle = 0
      if self.VCUTTgtAclrtnRqst is None:
        self.VCUTTgtAclrtnRqst = 0
      if self.VCUTTgtAclrtnRqstVal is None:
        self.VCUTTgtAclrtnRqstVal = 0.
      if self.GearRqst is None:
        self.GearRqst = 0
      if self.TgtGear is None:
        self.TgtGear = 0
      if self.VCUTTgtSpRqst is None:
        self.VCUTTgtSpRqst = 0
      if self.VCUTTgtSpRqstVal is None:
        self.VCUTTgtSpRqstVal = 0.
      if self.SensSt_1st is None:
        self.SensSt_1st = 0
      if self.DisFrm1stFrtSens is None:
        self.DisFrm1stFrtSens = 0
      if self.SensSt_2nd is None:
        self.SensSt_2nd = 0
      if self.DisFrm2ndFrtSens is None:
        self.DisFrm2ndFrtSens = 0
      if self.SensSt_3rd is None:
        self.SensSt_3rd = 0
      if self.DisFrm3rdFrtSens is None:
        self.DisFrm3rdFrtSens = 0
      if self.SensSt_4th is None:
        self.SensSt_4th = 0
      if self.DisFrm4thFrtSens is None:
        self.DisFrm4thFrtSens = 0
      if self.SensSt_5th is None:
        self.SensSt_5th = 0
      if self.DisFrm5thFrtSens is None:
        self.DisFrm5thFrtSens = 0
      if self.SensSt_6th is None:
        self.SensSt_6th = 0
      if self.DisFrm6thFrtSens is None:
        self.DisFrm6thFrtSens = 0
      if self.SensSt_7th is None:
        self.SensSt_7th = 0
      if self.DisFrm7thFrtSens is None:
        self.DisFrm7thFrtSens = 0
      if self.SensSt_8th is None:
        self.SensSt_8th = 0
      if self.DisFrm8thFrtSens is None:
        self.DisFrm8thFrtSens = 0
      if self.SensSt_9th is None:
        self.SensSt_9th = 0
      if self.DisFrm9thFrtSens is None:
        self.DisFrm9thFrtSens = 0
      if self.SensSt_10th is None:
        self.SensSt_10th = 0
      if self.DisFrm10thFrtSens is None:
        self.DisFrm10thFrtSens = 0
      if self.SensSt_11th is None:
        self.SensSt_11th = 0
      if self.DisFrm11thFrtSens is None:
        self.DisFrm11thFrtSens = 0
      if self.SensSt_12th is None:
        self.SensSt_12th = 0
      if self.DisFrm12thFrtSens is None:
        self.DisFrm12thFrtSens = 0
    else:
      self.header = std_msgs.msg.Header()
      self.module_type = 0
      self.error_code = 0
      self.chassis_data = ''
      self.TMTorqRqstV = 0
      self.TMTorqRqst = 0.
      self.HandBrkSts = 0
      self.VecStatRdy = 0
      self.KyPstn = 0
      self.VecSOC = 0
      self.VehSpdAvgDrvnV = 0
      self.VehSpdAvgDrvn = 0.
      self.VecTMActSpdV = 0
      self.VecTMActSpd = 0
      self.VCUVehDrvMod = 0
      self.LowBatVol = 0.
      self.BatSOC = 0
      self.HhBmIO = 0
      self.WindscenWipSt = 0
      self.LwBmIO = 0
      self.HzrdLgtSwAtv = 0
      self.HzrdLtIO = 0
      self.RtTrnLmpAtv = 0
      self.LftTrnLmpAtv = 0
      self.WipSwStat = 0
      self.StpLpSt = 0
      self.is_left_blinking = False
      self.is_right_blinking = False
      self.DrSbltAtc = 0
      self.DrSbltAtcV = 0
      self.TDAjrSwAtv = 0
      self.PsDoorOpenSwAct = 0
      self.PDAjrSwAtv = 0
      self.DrDoorOpenSwAct = 0
      self.DDAjrSwAct = 0
      self.PsWdwOpenDgr = 0.
      self.DrWdwOpenDgr = 0.
      self.BCMRunMod = 0
      self.BCMRunModV = 0
      self.EPBSysWrnIndReq_1 = 0
      self.EPBSysWrnIndReqV_1 = 0
      self.EPBSysBrkLtsReq_1 = 0
      self.EPBSysStatIndReq_1 = 0
      self.ElecPrkBrkSwStatV_1 = 0
      self.ElecPrkBrkStat_1 = 0
      self.ElecPrkBrkSwStat_1 = 0
      self.ADASWndSnWpCtrl = 0
      self.ADASHzdLtCtrl = 0
      self.ADASSdTrnLmpRHCtrl = 0
      self.ADASSdTrnLmpLHCtrl = 0
      self.ADASLowBmCtrl = 0
      self.ADASHighBmCtrl = 0
      self.ADASLkCtrl = 0
      self.CarWindCtrl = 0
      self.ADASRemtPrkModRqst = 0
      self.BCMADASCtrlRqst = 0
      self.BCMADASCtrlRqstV = 0
      self.TMActTorq = 0.
      self.TMActSpd = 0
      self.VSELatAccV = 0
      self.VSELatAcc = 0.
      self.VSELongAccV = 0
      self.VSELongAcc = 0.
      self.VehOdo = 0.
      self.VehOdoV = 0
      self.BrakPedalPos = 0
      self.AccActPos = 0
      self.VecActGearStsV = 0
      self.VecActGearSts = 0
      self.StrWhAngV = 0
      self.StrWhAng = 0.
      self.EPSProId = 0
      self.PwrStrIo = 0
      self.SterModV = 0
      self.SterMod = 0
      self.EPS_LKARespTorq = 0.
      self.SterFltMod = 0
      self.DrStrTorqV = 0
      self.DrStrTorqVal = 0.
      self.SteerWheelRotSpd = 0
      self.SteerWheelAngle = 0.
      self.ElecPrkBrkStat = 0
      self.WhlGrndVlctyLftDrvnV = 0
      self.WhlGrndVlctyLftDrvn = 0.
      self.WhlGrndVlctyRtDrvnV = 0
      self.WhlGrndVlctyRtDrvn = 0.
      self.WhlGrndVlctyLftNnDrvnV = 0
      self.WhlGrndVlctyLftNnDrvn = 0.
      self.WhlGrndVlctyRtNnDrvnV = 0
      self.WhlGrndVlctyRtNnDrvn = 0.
      self.LftDrvnWhlDirec = 0
      self.WhlGrndPlsLftDrvnV = 0
      self.WhlGrndPlsLftDrvn = 0
      self.RtDrvnWhlDirec = 0
      self.WhlGrndPlsRtDrvnV = 0
      self.WhlGrndPlsRtDrvn = 0
      self.LftNnDrvnWhlDirec = 0
      self.WhlGrndPlsLftNnDrvnV = 0
      self.WhlGrndPlsLftNnDrvn = 0
      self.RtNnDrvnWhlDirec = 0
      self.WhlGrndPlsRtNnDrvnV = 0
      self.WhlGrndPlsRtNnDrvn = 0
      self.BBWSts = 0
      self.EBSDrvMod = 0
      self.IDURqst = 0
      self.EBSMCBrPressure = 0
      self.BrakPedalDisp = 0
      self.ADAS_StrAngleRqstV = 0
      self.ADASBrakRqstPres = 0
      self.EPB_ADASPrkngRqst = 0
      self.ADASStrTorqRqst = 0
      self.ADASStrTorqTgt = 0
      self.ADAS_StrAngle = 0
      self.VCUTTgtAclrtnRqst = 0
      self.VCUTTgtAclrtnRqstVal = 0.
      self.GearRqst = 0
      self.TgtGear = 0
      self.VCUTTgtSpRqst = 0
      self.VCUTTgtSpRqstVal = 0.
      self.SensSt_1st = 0
      self.DisFrm1stFrtSens = 0
      self.SensSt_2nd = 0
      self.DisFrm2ndFrtSens = 0
      self.SensSt_3rd = 0
      self.DisFrm3rdFrtSens = 0
      self.SensSt_4th = 0
      self.DisFrm4thFrtSens = 0
      self.SensSt_5th = 0
      self.DisFrm5thFrtSens = 0
      self.SensSt_6th = 0
      self.DisFrm6thFrtSens = 0
      self.SensSt_7th = 0
      self.DisFrm7thFrtSens = 0
      self.SensSt_8th = 0
      self.DisFrm8thFrtSens = 0
      self.SensSt_9th = 0
      self.DisFrm9thFrtSens = 0
      self.SensSt_10th = 0
      self.DisFrm10thFrtSens = 0
      self.SensSt_11th = 0
      self.DisFrm11thFrtSens = 0
      self.SensSt_12th = 0
      self.DisFrm12thFrtSens = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_type, _x.error_code))
      _x = self.chassis_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH().pack(_x.TMTorqRqstV, _x.TMTorqRqst, _x.HandBrkSts, _x.VecStatRdy, _x.KyPstn, _x.VecSOC, _x.VehSpdAvgDrvnV, _x.VehSpdAvgDrvn, _x.VecTMActSpdV, _x.VecTMActSpd, _x.VCUVehDrvMod, _x.LowBatVol, _x.BatSOC, _x.HhBmIO, _x.WindscenWipSt, _x.LwBmIO, _x.HzrdLgtSwAtv, _x.HzrdLtIO, _x.RtTrnLmpAtv, _x.LftTrnLmpAtv, _x.WipSwStat, _x.StpLpSt, _x.is_left_blinking, _x.is_right_blinking, _x.DrSbltAtc, _x.DrSbltAtcV, _x.TDAjrSwAtv, _x.PsDoorOpenSwAct, _x.PDAjrSwAtv, _x.DrDoorOpenSwAct, _x.DDAjrSwAct, _x.PsWdwOpenDgr, _x.DrWdwOpenDgr, _x.BCMRunMod, _x.BCMRunModV, _x.EPBSysWrnIndReq_1, _x.EPBSysWrnIndReqV_1, _x.EPBSysBrkLtsReq_1, _x.EPBSysStatIndReq_1, _x.ElecPrkBrkSwStatV_1, _x.ElecPrkBrkStat_1, _x.ElecPrkBrkSwStat_1, _x.ADASWndSnWpCtrl, _x.ADASHzdLtCtrl, _x.ADASSdTrnLmpRHCtrl, _x.ADASSdTrnLmpLHCtrl, _x.ADASLowBmCtrl, _x.ADASHighBmCtrl, _x.ADASLkCtrl, _x.CarWindCtrl, _x.ADASRemtPrkModRqst, _x.BCMADASCtrlRqst, _x.BCMADASCtrlRqstV, _x.TMActTorq, _x.TMActSpd, _x.VSELatAccV, _x.VSELatAcc, _x.VSELongAccV, _x.VSELongAcc, _x.VehOdo, _x.VehOdoV, _x.BrakPedalPos, _x.AccActPos, _x.VecActGearStsV, _x.VecActGearSts, _x.StrWhAngV, _x.StrWhAng, _x.EPSProId, _x.PwrStrIo, _x.SterModV, _x.SterMod, _x.EPS_LKARespTorq, _x.SterFltMod, _x.DrStrTorqV, _x.DrStrTorqVal, _x.SteerWheelRotSpd, _x.SteerWheelAngle, _x.ElecPrkBrkStat, _x.WhlGrndVlctyLftDrvnV, _x.WhlGrndVlctyLftDrvn, _x.WhlGrndVlctyRtDrvnV, _x.WhlGrndVlctyRtDrvn, _x.WhlGrndVlctyLftNnDrvnV, _x.WhlGrndVlctyLftNnDrvn, _x.WhlGrndVlctyRtNnDrvnV, _x.WhlGrndVlctyRtNnDrvn, _x.LftDrvnWhlDirec, _x.WhlGrndPlsLftDrvnV, _x.WhlGrndPlsLftDrvn, _x.RtDrvnWhlDirec, _x.WhlGrndPlsRtDrvnV, _x.WhlGrndPlsRtDrvn, _x.LftNnDrvnWhlDirec, _x.WhlGrndPlsLftNnDrvnV, _x.WhlGrndPlsLftNnDrvn, _x.RtNnDrvnWhlDirec, _x.WhlGrndPlsRtNnDrvnV, _x.WhlGrndPlsRtNnDrvn, _x.BBWSts, _x.EBSDrvMod, _x.IDURqst, _x.EBSMCBrPressure, _x.BrakPedalDisp, _x.ADAS_StrAngleRqstV, _x.ADASBrakRqstPres, _x.EPB_ADASPrkngRqst, _x.ADASStrTorqRqst, _x.ADASStrTorqTgt, _x.ADAS_StrAngle, _x.VCUTTgtAclrtnRqst, _x.VCUTTgtAclrtnRqstVal, _x.GearRqst, _x.TgtGear, _x.VCUTTgtSpRqst, _x.VCUTTgtSpRqstVal, _x.SensSt_1st, _x.DisFrm1stFrtSens, _x.SensSt_2nd, _x.DisFrm2ndFrtSens, _x.SensSt_3rd, _x.DisFrm3rdFrtSens, _x.SensSt_4th, _x.DisFrm4thFrtSens, _x.SensSt_5th, _x.DisFrm5thFrtSens, _x.SensSt_6th, _x.DisFrm6thFrtSens, _x.SensSt_7th, _x.DisFrm7thFrtSens, _x.SensSt_8th, _x.DisFrm8thFrtSens, _x.SensSt_9th, _x.DisFrm9thFrtSens, _x.SensSt_10th, _x.DisFrm10thFrtSens, _x.SensSt_11th, _x.DisFrm11thFrtSens, _x.SensSt_12th, _x.DisFrm12thFrtSens))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.module_type, _x.error_code,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.chassis_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.chassis_data = str[start:end]
      _x = self
      start = end
      end += 296
      (_x.TMTorqRqstV, _x.TMTorqRqst, _x.HandBrkSts, _x.VecStatRdy, _x.KyPstn, _x.VecSOC, _x.VehSpdAvgDrvnV, _x.VehSpdAvgDrvn, _x.VecTMActSpdV, _x.VecTMActSpd, _x.VCUVehDrvMod, _x.LowBatVol, _x.BatSOC, _x.HhBmIO, _x.WindscenWipSt, _x.LwBmIO, _x.HzrdLgtSwAtv, _x.HzrdLtIO, _x.RtTrnLmpAtv, _x.LftTrnLmpAtv, _x.WipSwStat, _x.StpLpSt, _x.is_left_blinking, _x.is_right_blinking, _x.DrSbltAtc, _x.DrSbltAtcV, _x.TDAjrSwAtv, _x.PsDoorOpenSwAct, _x.PDAjrSwAtv, _x.DrDoorOpenSwAct, _x.DDAjrSwAct, _x.PsWdwOpenDgr, _x.DrWdwOpenDgr, _x.BCMRunMod, _x.BCMRunModV, _x.EPBSysWrnIndReq_1, _x.EPBSysWrnIndReqV_1, _x.EPBSysBrkLtsReq_1, _x.EPBSysStatIndReq_1, _x.ElecPrkBrkSwStatV_1, _x.ElecPrkBrkStat_1, _x.ElecPrkBrkSwStat_1, _x.ADASWndSnWpCtrl, _x.ADASHzdLtCtrl, _x.ADASSdTrnLmpRHCtrl, _x.ADASSdTrnLmpLHCtrl, _x.ADASLowBmCtrl, _x.ADASHighBmCtrl, _x.ADASLkCtrl, _x.CarWindCtrl, _x.ADASRemtPrkModRqst, _x.BCMADASCtrlRqst, _x.BCMADASCtrlRqstV, _x.TMActTorq, _x.TMActSpd, _x.VSELatAccV, _x.VSELatAcc, _x.VSELongAccV, _x.VSELongAcc, _x.VehOdo, _x.VehOdoV, _x.BrakPedalPos, _x.AccActPos, _x.VecActGearStsV, _x.VecActGearSts, _x.StrWhAngV, _x.StrWhAng, _x.EPSProId, _x.PwrStrIo, _x.SterModV, _x.SterMod, _x.EPS_LKARespTorq, _x.SterFltMod, _x.DrStrTorqV, _x.DrStrTorqVal, _x.SteerWheelRotSpd, _x.SteerWheelAngle, _x.ElecPrkBrkStat, _x.WhlGrndVlctyLftDrvnV, _x.WhlGrndVlctyLftDrvn, _x.WhlGrndVlctyRtDrvnV, _x.WhlGrndVlctyRtDrvn, _x.WhlGrndVlctyLftNnDrvnV, _x.WhlGrndVlctyLftNnDrvn, _x.WhlGrndVlctyRtNnDrvnV, _x.WhlGrndVlctyRtNnDrvn, _x.LftDrvnWhlDirec, _x.WhlGrndPlsLftDrvnV, _x.WhlGrndPlsLftDrvn, _x.RtDrvnWhlDirec, _x.WhlGrndPlsRtDrvnV, _x.WhlGrndPlsRtDrvn, _x.LftNnDrvnWhlDirec, _x.WhlGrndPlsLftNnDrvnV, _x.WhlGrndPlsLftNnDrvn, _x.RtNnDrvnWhlDirec, _x.WhlGrndPlsRtNnDrvnV, _x.WhlGrndPlsRtNnDrvn, _x.BBWSts, _x.EBSDrvMod, _x.IDURqst, _x.EBSMCBrPressure, _x.BrakPedalDisp, _x.ADAS_StrAngleRqstV, _x.ADASBrakRqstPres, _x.EPB_ADASPrkngRqst, _x.ADASStrTorqRqst, _x.ADASStrTorqTgt, _x.ADAS_StrAngle, _x.VCUTTgtAclrtnRqst, _x.VCUTTgtAclrtnRqstVal, _x.GearRqst, _x.TgtGear, _x.VCUTTgtSpRqst, _x.VCUTTgtSpRqstVal, _x.SensSt_1st, _x.DisFrm1stFrtSens, _x.SensSt_2nd, _x.DisFrm2ndFrtSens, _x.SensSt_3rd, _x.DisFrm3rdFrtSens, _x.SensSt_4th, _x.DisFrm4thFrtSens, _x.SensSt_5th, _x.DisFrm5thFrtSens, _x.SensSt_6th, _x.DisFrm6thFrtSens, _x.SensSt_7th, _x.DisFrm7thFrtSens, _x.SensSt_8th, _x.DisFrm8thFrtSens, _x.SensSt_9th, _x.DisFrm9thFrtSens, _x.SensSt_10th, _x.DisFrm10thFrtSens, _x.SensSt_11th, _x.DisFrm11thFrtSens, _x.SensSt_12th, _x.DisFrm12thFrtSens,) = _get_struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH().unpack(str[start:end])
      self.is_left_blinking = bool(self.is_left_blinking)
      self.is_right_blinking = bool(self.is_right_blinking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_type, _x.error_code))
      _x = self.chassis_data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH().pack(_x.TMTorqRqstV, _x.TMTorqRqst, _x.HandBrkSts, _x.VecStatRdy, _x.KyPstn, _x.VecSOC, _x.VehSpdAvgDrvnV, _x.VehSpdAvgDrvn, _x.VecTMActSpdV, _x.VecTMActSpd, _x.VCUVehDrvMod, _x.LowBatVol, _x.BatSOC, _x.HhBmIO, _x.WindscenWipSt, _x.LwBmIO, _x.HzrdLgtSwAtv, _x.HzrdLtIO, _x.RtTrnLmpAtv, _x.LftTrnLmpAtv, _x.WipSwStat, _x.StpLpSt, _x.is_left_blinking, _x.is_right_blinking, _x.DrSbltAtc, _x.DrSbltAtcV, _x.TDAjrSwAtv, _x.PsDoorOpenSwAct, _x.PDAjrSwAtv, _x.DrDoorOpenSwAct, _x.DDAjrSwAct, _x.PsWdwOpenDgr, _x.DrWdwOpenDgr, _x.BCMRunMod, _x.BCMRunModV, _x.EPBSysWrnIndReq_1, _x.EPBSysWrnIndReqV_1, _x.EPBSysBrkLtsReq_1, _x.EPBSysStatIndReq_1, _x.ElecPrkBrkSwStatV_1, _x.ElecPrkBrkStat_1, _x.ElecPrkBrkSwStat_1, _x.ADASWndSnWpCtrl, _x.ADASHzdLtCtrl, _x.ADASSdTrnLmpRHCtrl, _x.ADASSdTrnLmpLHCtrl, _x.ADASLowBmCtrl, _x.ADASHighBmCtrl, _x.ADASLkCtrl, _x.CarWindCtrl, _x.ADASRemtPrkModRqst, _x.BCMADASCtrlRqst, _x.BCMADASCtrlRqstV, _x.TMActTorq, _x.TMActSpd, _x.VSELatAccV, _x.VSELatAcc, _x.VSELongAccV, _x.VSELongAcc, _x.VehOdo, _x.VehOdoV, _x.BrakPedalPos, _x.AccActPos, _x.VecActGearStsV, _x.VecActGearSts, _x.StrWhAngV, _x.StrWhAng, _x.EPSProId, _x.PwrStrIo, _x.SterModV, _x.SterMod, _x.EPS_LKARespTorq, _x.SterFltMod, _x.DrStrTorqV, _x.DrStrTorqVal, _x.SteerWheelRotSpd, _x.SteerWheelAngle, _x.ElecPrkBrkStat, _x.WhlGrndVlctyLftDrvnV, _x.WhlGrndVlctyLftDrvn, _x.WhlGrndVlctyRtDrvnV, _x.WhlGrndVlctyRtDrvn, _x.WhlGrndVlctyLftNnDrvnV, _x.WhlGrndVlctyLftNnDrvn, _x.WhlGrndVlctyRtNnDrvnV, _x.WhlGrndVlctyRtNnDrvn, _x.LftDrvnWhlDirec, _x.WhlGrndPlsLftDrvnV, _x.WhlGrndPlsLftDrvn, _x.RtDrvnWhlDirec, _x.WhlGrndPlsRtDrvnV, _x.WhlGrndPlsRtDrvn, _x.LftNnDrvnWhlDirec, _x.WhlGrndPlsLftNnDrvnV, _x.WhlGrndPlsLftNnDrvn, _x.RtNnDrvnWhlDirec, _x.WhlGrndPlsRtNnDrvnV, _x.WhlGrndPlsRtNnDrvn, _x.BBWSts, _x.EBSDrvMod, _x.IDURqst, _x.EBSMCBrPressure, _x.BrakPedalDisp, _x.ADAS_StrAngleRqstV, _x.ADASBrakRqstPres, _x.EPB_ADASPrkngRqst, _x.ADASStrTorqRqst, _x.ADASStrTorqTgt, _x.ADAS_StrAngle, _x.VCUTTgtAclrtnRqst, _x.VCUTTgtAclrtnRqstVal, _x.GearRqst, _x.TgtGear, _x.VCUTTgtSpRqst, _x.VCUTTgtSpRqstVal, _x.SensSt_1st, _x.DisFrm1stFrtSens, _x.SensSt_2nd, _x.DisFrm2ndFrtSens, _x.SensSt_3rd, _x.DisFrm3rdFrtSens, _x.SensSt_4th, _x.DisFrm4thFrtSens, _x.SensSt_5th, _x.DisFrm5thFrtSens, _x.SensSt_6th, _x.DisFrm6thFrtSens, _x.SensSt_7th, _x.DisFrm7thFrtSens, _x.SensSt_8th, _x.DisFrm8thFrtSens, _x.SensSt_9th, _x.DisFrm9thFrtSens, _x.SensSt_10th, _x.DisFrm10thFrtSens, _x.SensSt_11th, _x.DisFrm11thFrtSens, _x.SensSt_12th, _x.DisFrm12thFrtSens))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.module_type, _x.error_code,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.chassis_data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.chassis_data = str[start:end]
      _x = self
      start = end
      end += 296
      (_x.TMTorqRqstV, _x.TMTorqRqst, _x.HandBrkSts, _x.VecStatRdy, _x.KyPstn, _x.VecSOC, _x.VehSpdAvgDrvnV, _x.VehSpdAvgDrvn, _x.VecTMActSpdV, _x.VecTMActSpd, _x.VCUVehDrvMod, _x.LowBatVol, _x.BatSOC, _x.HhBmIO, _x.WindscenWipSt, _x.LwBmIO, _x.HzrdLgtSwAtv, _x.HzrdLtIO, _x.RtTrnLmpAtv, _x.LftTrnLmpAtv, _x.WipSwStat, _x.StpLpSt, _x.is_left_blinking, _x.is_right_blinking, _x.DrSbltAtc, _x.DrSbltAtcV, _x.TDAjrSwAtv, _x.PsDoorOpenSwAct, _x.PDAjrSwAtv, _x.DrDoorOpenSwAct, _x.DDAjrSwAct, _x.PsWdwOpenDgr, _x.DrWdwOpenDgr, _x.BCMRunMod, _x.BCMRunModV, _x.EPBSysWrnIndReq_1, _x.EPBSysWrnIndReqV_1, _x.EPBSysBrkLtsReq_1, _x.EPBSysStatIndReq_1, _x.ElecPrkBrkSwStatV_1, _x.ElecPrkBrkStat_1, _x.ElecPrkBrkSwStat_1, _x.ADASWndSnWpCtrl, _x.ADASHzdLtCtrl, _x.ADASSdTrnLmpRHCtrl, _x.ADASSdTrnLmpLHCtrl, _x.ADASLowBmCtrl, _x.ADASHighBmCtrl, _x.ADASLkCtrl, _x.CarWindCtrl, _x.ADASRemtPrkModRqst, _x.BCMADASCtrlRqst, _x.BCMADASCtrlRqstV, _x.TMActTorq, _x.TMActSpd, _x.VSELatAccV, _x.VSELatAcc, _x.VSELongAccV, _x.VSELongAcc, _x.VehOdo, _x.VehOdoV, _x.BrakPedalPos, _x.AccActPos, _x.VecActGearStsV, _x.VecActGearSts, _x.StrWhAngV, _x.StrWhAng, _x.EPSProId, _x.PwrStrIo, _x.SterModV, _x.SterMod, _x.EPS_LKARespTorq, _x.SterFltMod, _x.DrStrTorqV, _x.DrStrTorqVal, _x.SteerWheelRotSpd, _x.SteerWheelAngle, _x.ElecPrkBrkStat, _x.WhlGrndVlctyLftDrvnV, _x.WhlGrndVlctyLftDrvn, _x.WhlGrndVlctyRtDrvnV, _x.WhlGrndVlctyRtDrvn, _x.WhlGrndVlctyLftNnDrvnV, _x.WhlGrndVlctyLftNnDrvn, _x.WhlGrndVlctyRtNnDrvnV, _x.WhlGrndVlctyRtNnDrvn, _x.LftDrvnWhlDirec, _x.WhlGrndPlsLftDrvnV, _x.WhlGrndPlsLftDrvn, _x.RtDrvnWhlDirec, _x.WhlGrndPlsRtDrvnV, _x.WhlGrndPlsRtDrvn, _x.LftNnDrvnWhlDirec, _x.WhlGrndPlsLftNnDrvnV, _x.WhlGrndPlsLftNnDrvn, _x.RtNnDrvnWhlDirec, _x.WhlGrndPlsRtNnDrvnV, _x.WhlGrndPlsRtNnDrvn, _x.BBWSts, _x.EBSDrvMod, _x.IDURqst, _x.EBSMCBrPressure, _x.BrakPedalDisp, _x.ADAS_StrAngleRqstV, _x.ADASBrakRqstPres, _x.EPB_ADASPrkngRqst, _x.ADASStrTorqRqst, _x.ADASStrTorqTgt, _x.ADAS_StrAngle, _x.VCUTTgtAclrtnRqst, _x.VCUTTgtAclrtnRqstVal, _x.GearRqst, _x.TgtGear, _x.VCUTTgtSpRqst, _x.VCUTTgtSpRqstVal, _x.SensSt_1st, _x.DisFrm1stFrtSens, _x.SensSt_2nd, _x.DisFrm2ndFrtSens, _x.SensSt_3rd, _x.DisFrm3rdFrtSens, _x.SensSt_4th, _x.DisFrm4thFrtSens, _x.SensSt_5th, _x.DisFrm5thFrtSens, _x.SensSt_6th, _x.DisFrm6thFrtSens, _x.SensSt_7th, _x.DisFrm7thFrtSens, _x.SensSt_8th, _x.DisFrm8thFrtSens, _x.SensSt_9th, _x.DisFrm9thFrtSens, _x.SensSt_10th, _x.DisFrm10thFrtSens, _x.SensSt_11th, _x.DisFrm11thFrtSens, _x.SensSt_12th, _x.DisFrm12thFrtSens,) = _get_struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH().unpack(str[start:end])
      self.is_left_blinking = bool(self.is_left_blinking)
      self.is_right_blinking = bool(self.is_right_blinking)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH = None
def _get_struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH():
    global _struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH
    if _struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH is None:
        _struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH = struct.Struct("<Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH")
    return _struct_Bd5BdBHBd19B2d20BdiBdB2d6Bd4Bd2BdHd2BdBdBdBd2BH2BH2BH2BH6BH2B2HBd3BdBHBHBHBHBHBHBHBHBHBHBHBH
