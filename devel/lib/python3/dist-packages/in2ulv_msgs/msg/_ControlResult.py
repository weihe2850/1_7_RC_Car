# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from in2ulv_msgs/ControlResult.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ControlResult(genpy.Message):
  _md5sum = "d0ea0e1d317647aa9e9251fc4a618a52"
  _type = "in2ulv_msgs/ControlResult"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header

#方向盘打角   -50 ———— +50   左正右负   -720~720
float32 steer   

#油门       0 ———— +100  
# float32 throttle

# 刹车 0-100.0
float32 brake
bool if_brake

# 控速
float32 speed_control
bool if_speed

# 控加速度
float32 acceleration_control
bool if_acceleration

# 左车灯
bool is_left_lighting

# 右车灯
bool is_right_lighting

# 挂钩锁紧
bool is_hook_close

# 挂钩位置
float32 hook_position

# 档位
uint8 gear_info

# pmx - debug
float32 speed_limit
float32 speed_out
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','steer','brake','if_brake','speed_control','if_speed','acceleration_control','if_acceleration','is_left_lighting','is_right_lighting','is_hook_close','hook_position','gear_info','speed_limit','speed_out']
  _slot_types = ['std_msgs/Header','float32','float32','bool','float32','bool','float32','bool','bool','bool','bool','float32','uint8','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,steer,brake,if_brake,speed_control,if_speed,acceleration_control,if_acceleration,is_left_lighting,is_right_lighting,is_hook_close,hook_position,gear_info,speed_limit,speed_out

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlResult, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.steer is None:
        self.steer = 0.
      if self.brake is None:
        self.brake = 0.
      if self.if_brake is None:
        self.if_brake = False
      if self.speed_control is None:
        self.speed_control = 0.
      if self.if_speed is None:
        self.if_speed = False
      if self.acceleration_control is None:
        self.acceleration_control = 0.
      if self.if_acceleration is None:
        self.if_acceleration = False
      if self.is_left_lighting is None:
        self.is_left_lighting = False
      if self.is_right_lighting is None:
        self.is_right_lighting = False
      if self.is_hook_close is None:
        self.is_hook_close = False
      if self.hook_position is None:
        self.hook_position = 0.
      if self.gear_info is None:
        self.gear_info = 0
      if self.speed_limit is None:
        self.speed_limit = 0.
      if self.speed_out is None:
        self.speed_out = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.steer = 0.
      self.brake = 0.
      self.if_brake = False
      self.speed_control = 0.
      self.if_speed = False
      self.acceleration_control = 0.
      self.if_acceleration = False
      self.is_left_lighting = False
      self.is_right_lighting = False
      self.is_hook_close = False
      self.hook_position = 0.
      self.gear_info = 0
      self.speed_limit = 0.
      self.speed_out = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fBfBf4BfB2f().pack(_x.steer, _x.brake, _x.if_brake, _x.speed_control, _x.if_speed, _x.acceleration_control, _x.if_acceleration, _x.is_left_lighting, _x.is_right_lighting, _x.is_hook_close, _x.hook_position, _x.gear_info, _x.speed_limit, _x.speed_out))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.steer, _x.brake, _x.if_brake, _x.speed_control, _x.if_speed, _x.acceleration_control, _x.if_acceleration, _x.is_left_lighting, _x.is_right_lighting, _x.is_hook_close, _x.hook_position, _x.gear_info, _x.speed_limit, _x.speed_out,) = _get_struct_2fBfBf4BfB2f().unpack(str[start:end])
      self.if_brake = bool(self.if_brake)
      self.if_speed = bool(self.if_speed)
      self.if_acceleration = bool(self.if_acceleration)
      self.is_left_lighting = bool(self.is_left_lighting)
      self.is_right_lighting = bool(self.is_right_lighting)
      self.is_hook_close = bool(self.is_hook_close)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2fBfBf4BfB2f().pack(_x.steer, _x.brake, _x.if_brake, _x.speed_control, _x.if_speed, _x.acceleration_control, _x.if_acceleration, _x.is_left_lighting, _x.is_right_lighting, _x.is_hook_close, _x.hook_position, _x.gear_info, _x.speed_limit, _x.speed_out))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 35
      (_x.steer, _x.brake, _x.if_brake, _x.speed_control, _x.if_speed, _x.acceleration_control, _x.if_acceleration, _x.is_left_lighting, _x.is_right_lighting, _x.is_hook_close, _x.hook_position, _x.gear_info, _x.speed_limit, _x.speed_out,) = _get_struct_2fBfBf4BfB2f().unpack(str[start:end])
      self.if_brake = bool(self.if_brake)
      self.if_speed = bool(self.if_speed)
      self.if_acceleration = bool(self.if_acceleration)
      self.is_left_lighting = bool(self.is_left_lighting)
      self.is_right_lighting = bool(self.is_right_lighting)
      self.is_hook_close = bool(self.is_hook_close)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2fBfBf4BfB2f = None
def _get_struct_2fBfBf4BfB2f():
    global _struct_2fBfBf4BfB2f
    if _struct_2fBfBf4BfB2f is None:
        _struct_2fBfBf4BfB2f = struct.Struct("<2fBfBf4BfB2f")
    return _struct_2fBfBf4BfB2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
