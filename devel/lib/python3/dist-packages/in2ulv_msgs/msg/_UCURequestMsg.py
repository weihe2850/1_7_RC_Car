# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from in2ulv_msgs/UCURequestMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class UCURequestMsg(genpy.Message):
  _md5sum = "d0e6d4647b85f9842b9c69090dff73da"
  _type = "in2ulv_msgs/UCURequestMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# UCU_Requestment_message_4 (0x53E)

# 帧头，包含时间戳信息
std_msgs/Header header
# 模块类型
uint8 module_type

# error_code
uint32 error_code

# UCU数据有效性
bool ucu_validity
string route_encoder

# 版本号
uint8 Version
# 地区信息：省份、城市、区县、街道、校区
uint8 Province
uint8 City
uint8 District
uint8 Street
uint8 Community
# 功能请求
uint8 FeatureRequest
# 车头朝向
uint8 CarHeading
# 类型
uint8 XXType
# 地图编号
uint16 MapNumber
# 站点编号
uint8 StationNumber
# 远程控制命令
uint8 RemoteCtrlCommand

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','module_type','error_code','ucu_validity','route_encoder','Version','Province','City','District','Street','Community','FeatureRequest','CarHeading','XXType','MapNumber','StationNumber','RemoteCtrlCommand']
  _slot_types = ['std_msgs/Header','uint8','uint32','bool','string','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint16','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,module_type,error_code,ucu_validity,route_encoder,Version,Province,City,District,Street,Community,FeatureRequest,CarHeading,XXType,MapNumber,StationNumber,RemoteCtrlCommand

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UCURequestMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.module_type is None:
        self.module_type = 0
      if self.error_code is None:
        self.error_code = 0
      if self.ucu_validity is None:
        self.ucu_validity = False
      if self.route_encoder is None:
        self.route_encoder = ''
      if self.Version is None:
        self.Version = 0
      if self.Province is None:
        self.Province = 0
      if self.City is None:
        self.City = 0
      if self.District is None:
        self.District = 0
      if self.Street is None:
        self.Street = 0
      if self.Community is None:
        self.Community = 0
      if self.FeatureRequest is None:
        self.FeatureRequest = 0
      if self.CarHeading is None:
        self.CarHeading = 0
      if self.XXType is None:
        self.XXType = 0
      if self.MapNumber is None:
        self.MapNumber = 0
      if self.StationNumber is None:
        self.StationNumber = 0
      if self.RemoteCtrlCommand is None:
        self.RemoteCtrlCommand = 0
    else:
      self.header = std_msgs.msg.Header()
      self.module_type = 0
      self.error_code = 0
      self.ucu_validity = False
      self.route_encoder = ''
      self.Version = 0
      self.Province = 0
      self.City = 0
      self.District = 0
      self.Street = 0
      self.Community = 0
      self.FeatureRequest = 0
      self.CarHeading = 0
      self.XXType = 0
      self.MapNumber = 0
      self.StationNumber = 0
      self.RemoteCtrlCommand = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BIB().pack(_x.module_type, _x.error_code, _x.ucu_validity))
      _x = self.route_encoder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9BH2B().pack(_x.Version, _x.Province, _x.City, _x.District, _x.Street, _x.Community, _x.FeatureRequest, _x.CarHeading, _x.XXType, _x.MapNumber, _x.StationNumber, _x.RemoteCtrlCommand))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.module_type, _x.error_code, _x.ucu_validity,) = _get_struct_BIB().unpack(str[start:end])
      self.ucu_validity = bool(self.ucu_validity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.route_encoder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.route_encoder = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.Version, _x.Province, _x.City, _x.District, _x.Street, _x.Community, _x.FeatureRequest, _x.CarHeading, _x.XXType, _x.MapNumber, _x.StationNumber, _x.RemoteCtrlCommand,) = _get_struct_9BH2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BIB().pack(_x.module_type, _x.error_code, _x.ucu_validity))
      _x = self.route_encoder
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_9BH2B().pack(_x.Version, _x.Province, _x.City, _x.District, _x.Street, _x.Community, _x.FeatureRequest, _x.CarHeading, _x.XXType, _x.MapNumber, _x.StationNumber, _x.RemoteCtrlCommand))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.module_type, _x.error_code, _x.ucu_validity,) = _get_struct_BIB().unpack(str[start:end])
      self.ucu_validity = bool(self.ucu_validity)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.route_encoder = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.route_encoder = str[start:end]
      _x = self
      start = end
      end += 13
      (_x.Version, _x.Province, _x.City, _x.District, _x.Street, _x.Community, _x.FeatureRequest, _x.CarHeading, _x.XXType, _x.MapNumber, _x.StationNumber, _x.RemoteCtrlCommand,) = _get_struct_9BH2B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_9BH2B = None
def _get_struct_9BH2B():
    global _struct_9BH2B
    if _struct_9BH2B is None:
        _struct_9BH2B = struct.Struct("<9BH2B")
    return _struct_9BH2B
_struct_BIB = None
def _get_struct_BIB():
    global _struct_BIB
    if _struct_BIB is None:
        _struct_BIB = struct.Struct("<BIB")
    return _struct_BIB
