# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from in2ulv_msgs/ChassisCtrlMsg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ChassisCtrlMsg(genpy.Message):
  _md5sum = "6b699ba917a62ef652278429228a8b35"
  _type = "in2ulv_msgs/ChassisCtrlMsg"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# 帧头，包含时间戳信息
std_msgs/Header header

# 模块类型
uint8 module_type

# error_code
uint32 error_code

# 模块信息
string ctrl_command

# IDU_General_Status_1 (0x131)->[ACAN]<-{循环计数+校验}
uint8 VclDrvModRqstV    # 驱动模式请求有效性：默认0有效(false有效)
uint8 VclDrvModRqst     # 驱动模式请求
uint8 PakBrkRqstV       # 驻车请求有效性：默认0有效(false有效)
uint8 PakBrkRqst        # IDU驻车请求
uint8 VclAclRqstV       # 加速度请求有效性：默认0有效(false有效)
uint8 BrkPressureTgtV   # 制动压力目标值有效性：默认0有效(false有效)
uint8 VclVelRqstV       # 速度请求有效性：默认0有效(false有效)
float64 VclAclRqst      # 加速度请求
float64 BrkPressureTgt  # 制动压力目标值
float64 VclVelRqst      # 速度请求
uint8 IDUFltIndOn       # IDU故障指示:默认False(不指示)
uint8 PowOnRqst         # 上电请求：默认False(不请求有效性)
uint8 VclShiftRqst      # 档位请求

# IDU_General_Status_2 (0x121)->[CCAN]<-{循环计数+校验}
uint8 StrAglRqstV       # 期望转向角度有效性
float64 StrAglRqst      # 期望转向角度
uint8 TgtStrAglVlcV     # 期望转向角速度有效性(预留)
float64 TgtStrAglVlc    # 期望转向角速度(预留)
uint8 EPSCtrlModRqstV   # EPS控制模式请求有效性
uint8 EPSCtrlModRqst    # EPS控制模式请求

# IDU_General_Status_4 (0x312)->[ACAN]<-{循环计数+校验}
uint8 LdskCtrl          # 扬声器控制
uint8 WndSnWpCtrl       # 雨刮控制
uint8 StpLpCtrl         # 刹车灯控制
uint8 HzdLtCtrl         # 双闪灯控制
uint8 ClerLmpCtrl       # 示廓灯控制
uint8 FogLmpCtrl        # 后雾灯控制
uint8 SdTrnLmpRHCtrl    # 右转向灯控制
uint8 SdTrnLmpLHCtrl    # 左转向灯控制
uint8 LowBmCtrl         # 近光灯控制
uint8 HighBmCtrl        # 远光灯控制
uint8 LkCtrl            # 锁控功能
uint8 CarWindCtrl       # 车窗功能控制(预留)
uint8 BCMCtrlModRqstV   # BCM控制模式请求有效性
uint8 BCMCtrlModRqst    # BCM控制模式请求

# VT_Requestment_Messge_2 (0x316)->[BCAN] {??循环发送}
uint8 RemtPowOnRqst     # 远程上电请求
uint8 RemtPowOnRqstV    # 远程上电请求有效性：默认0有效(false有效)
uint8 RemtPowDwnRqst    # 远程下电请求
uint8 RemtPowDwnRqstV   # 远程下电请求有效性：默认0有效(false有效)
# 车辆泊车启动请求/关闭
bool CANB_ParkingStartRequest
bool CANB_ParkingCloseRequest

# 车辆移动控制
    # ADAS_General_Status_1 (0x1D1)
uint8 ADAS_StrAngleRqstV    # ADAS期望转向角度请求有效值
float64 ADASBrakRqstPres     # ADAS制动请求压力      float->uint
uint8 EPB_ADASPrkngRqst     # EPB ADAS驻车请求
uint8 ADASStrTorqRqst       # ADAS转向扭矩请求
float64 ADASStrTorqTgt       # ADAS转向扭矩目标值    float->uint
float64 ADAS_StrAngle        # ADAS期望转向角度      float->uint
    # ADAS_General_Status_2 (0x1D2)
uint8 VCUTTgtAclrtnRqst         # VCU目标加速度请求
float64 VCUTTgtAclrtnRqstVal    # VCU目标加速度请求值
uint8 GearRqst                  # 档位请求
uint8 TgtGear                   # 档位
uint8 VCUTTgtSpRqst             # VCU目标速度请求
float64 VCUTTgtSpRqstVal        # VCU目标速度请求值

# 车辆外设控制
    # ADAS_General_Status_11 (0x329)
uint8 ADASWndSnWpCtrl       # ADAS雨刮控制
uint8 ADASHzdLtCtrl         # ADAS双闪控制
uint8 ADASSdTrnLmpRHCtrl    # ADAS右转向控制
uint8 ADASSdTrnLmpLHCtrl    # ADAS左转向控制
uint8 ADASLowBmCtrl         # ADAS近光灯控制
uint8 ADASHighBmCtrl        # ADAS远光灯控制
uint8 ADASLkCtrl            # ADAS锁控功能
# uint8 CarWindCtrl           # ADAS车窗控制

# 车辆ADAS请求
    # ADAS_General_Status_11 (0x329)
uint8 ADASRemtPrkModRqst    # ADAS电源模式请求
uint8 BCMADASCtrlRqst       # ADAS控制请求
uint8 BCMADASCtrlRqstV      # ADAS控制请求有效性
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','module_type','error_code','ctrl_command','VclDrvModRqstV','VclDrvModRqst','PakBrkRqstV','PakBrkRqst','VclAclRqstV','BrkPressureTgtV','VclVelRqstV','VclAclRqst','BrkPressureTgt','VclVelRqst','IDUFltIndOn','PowOnRqst','VclShiftRqst','StrAglRqstV','StrAglRqst','TgtStrAglVlcV','TgtStrAglVlc','EPSCtrlModRqstV','EPSCtrlModRqst','LdskCtrl','WndSnWpCtrl','StpLpCtrl','HzdLtCtrl','ClerLmpCtrl','FogLmpCtrl','SdTrnLmpRHCtrl','SdTrnLmpLHCtrl','LowBmCtrl','HighBmCtrl','LkCtrl','CarWindCtrl','BCMCtrlModRqstV','BCMCtrlModRqst','RemtPowOnRqst','RemtPowOnRqstV','RemtPowDwnRqst','RemtPowDwnRqstV','CANB_ParkingStartRequest','CANB_ParkingCloseRequest','ADAS_StrAngleRqstV','ADASBrakRqstPres','EPB_ADASPrkngRqst','ADASStrTorqRqst','ADASStrTorqTgt','ADAS_StrAngle','VCUTTgtAclrtnRqst','VCUTTgtAclrtnRqstVal','GearRqst','TgtGear','VCUTTgtSpRqst','VCUTTgtSpRqstVal','ADASWndSnWpCtrl','ADASHzdLtCtrl','ADASSdTrnLmpRHCtrl','ADASSdTrnLmpLHCtrl','ADASLowBmCtrl','ADASHighBmCtrl','ADASLkCtrl','ADASRemtPrkModRqst','BCMADASCtrlRqst','BCMADASCtrlRqstV']
  _slot_types = ['std_msgs/Header','uint8','uint32','string','uint8','uint8','uint8','uint8','uint8','uint8','uint8','float64','float64','float64','uint8','uint8','uint8','uint8','float64','uint8','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','bool','bool','uint8','float64','uint8','uint8','float64','float64','uint8','float64','uint8','uint8','uint8','float64','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,module_type,error_code,ctrl_command,VclDrvModRqstV,VclDrvModRqst,PakBrkRqstV,PakBrkRqst,VclAclRqstV,BrkPressureTgtV,VclVelRqstV,VclAclRqst,BrkPressureTgt,VclVelRqst,IDUFltIndOn,PowOnRqst,VclShiftRqst,StrAglRqstV,StrAglRqst,TgtStrAglVlcV,TgtStrAglVlc,EPSCtrlModRqstV,EPSCtrlModRqst,LdskCtrl,WndSnWpCtrl,StpLpCtrl,HzdLtCtrl,ClerLmpCtrl,FogLmpCtrl,SdTrnLmpRHCtrl,SdTrnLmpLHCtrl,LowBmCtrl,HighBmCtrl,LkCtrl,CarWindCtrl,BCMCtrlModRqstV,BCMCtrlModRqst,RemtPowOnRqst,RemtPowOnRqstV,RemtPowDwnRqst,RemtPowDwnRqstV,CANB_ParkingStartRequest,CANB_ParkingCloseRequest,ADAS_StrAngleRqstV,ADASBrakRqstPres,EPB_ADASPrkngRqst,ADASStrTorqRqst,ADASStrTorqTgt,ADAS_StrAngle,VCUTTgtAclrtnRqst,VCUTTgtAclrtnRqstVal,GearRqst,TgtGear,VCUTTgtSpRqst,VCUTTgtSpRqstVal,ADASWndSnWpCtrl,ADASHzdLtCtrl,ADASSdTrnLmpRHCtrl,ADASSdTrnLmpLHCtrl,ADASLowBmCtrl,ADASHighBmCtrl,ADASLkCtrl,ADASRemtPrkModRqst,BCMADASCtrlRqst,BCMADASCtrlRqstV

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ChassisCtrlMsg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.module_type is None:
        self.module_type = 0
      if self.error_code is None:
        self.error_code = 0
      if self.ctrl_command is None:
        self.ctrl_command = ''
      if self.VclDrvModRqstV is None:
        self.VclDrvModRqstV = 0
      if self.VclDrvModRqst is None:
        self.VclDrvModRqst = 0
      if self.PakBrkRqstV is None:
        self.PakBrkRqstV = 0
      if self.PakBrkRqst is None:
        self.PakBrkRqst = 0
      if self.VclAclRqstV is None:
        self.VclAclRqstV = 0
      if self.BrkPressureTgtV is None:
        self.BrkPressureTgtV = 0
      if self.VclVelRqstV is None:
        self.VclVelRqstV = 0
      if self.VclAclRqst is None:
        self.VclAclRqst = 0.
      if self.BrkPressureTgt is None:
        self.BrkPressureTgt = 0.
      if self.VclVelRqst is None:
        self.VclVelRqst = 0.
      if self.IDUFltIndOn is None:
        self.IDUFltIndOn = 0
      if self.PowOnRqst is None:
        self.PowOnRqst = 0
      if self.VclShiftRqst is None:
        self.VclShiftRqst = 0
      if self.StrAglRqstV is None:
        self.StrAglRqstV = 0
      if self.StrAglRqst is None:
        self.StrAglRqst = 0.
      if self.TgtStrAglVlcV is None:
        self.TgtStrAglVlcV = 0
      if self.TgtStrAglVlc is None:
        self.TgtStrAglVlc = 0.
      if self.EPSCtrlModRqstV is None:
        self.EPSCtrlModRqstV = 0
      if self.EPSCtrlModRqst is None:
        self.EPSCtrlModRqst = 0
      if self.LdskCtrl is None:
        self.LdskCtrl = 0
      if self.WndSnWpCtrl is None:
        self.WndSnWpCtrl = 0
      if self.StpLpCtrl is None:
        self.StpLpCtrl = 0
      if self.HzdLtCtrl is None:
        self.HzdLtCtrl = 0
      if self.ClerLmpCtrl is None:
        self.ClerLmpCtrl = 0
      if self.FogLmpCtrl is None:
        self.FogLmpCtrl = 0
      if self.SdTrnLmpRHCtrl is None:
        self.SdTrnLmpRHCtrl = 0
      if self.SdTrnLmpLHCtrl is None:
        self.SdTrnLmpLHCtrl = 0
      if self.LowBmCtrl is None:
        self.LowBmCtrl = 0
      if self.HighBmCtrl is None:
        self.HighBmCtrl = 0
      if self.LkCtrl is None:
        self.LkCtrl = 0
      if self.CarWindCtrl is None:
        self.CarWindCtrl = 0
      if self.BCMCtrlModRqstV is None:
        self.BCMCtrlModRqstV = 0
      if self.BCMCtrlModRqst is None:
        self.BCMCtrlModRqst = 0
      if self.RemtPowOnRqst is None:
        self.RemtPowOnRqst = 0
      if self.RemtPowOnRqstV is None:
        self.RemtPowOnRqstV = 0
      if self.RemtPowDwnRqst is None:
        self.RemtPowDwnRqst = 0
      if self.RemtPowDwnRqstV is None:
        self.RemtPowDwnRqstV = 0
      if self.CANB_ParkingStartRequest is None:
        self.CANB_ParkingStartRequest = False
      if self.CANB_ParkingCloseRequest is None:
        self.CANB_ParkingCloseRequest = False
      if self.ADAS_StrAngleRqstV is None:
        self.ADAS_StrAngleRqstV = 0
      if self.ADASBrakRqstPres is None:
        self.ADASBrakRqstPres = 0.
      if self.EPB_ADASPrkngRqst is None:
        self.EPB_ADASPrkngRqst = 0
      if self.ADASStrTorqRqst is None:
        self.ADASStrTorqRqst = 0
      if self.ADASStrTorqTgt is None:
        self.ADASStrTorqTgt = 0.
      if self.ADAS_StrAngle is None:
        self.ADAS_StrAngle = 0.
      if self.VCUTTgtAclrtnRqst is None:
        self.VCUTTgtAclrtnRqst = 0
      if self.VCUTTgtAclrtnRqstVal is None:
        self.VCUTTgtAclrtnRqstVal = 0.
      if self.GearRqst is None:
        self.GearRqst = 0
      if self.TgtGear is None:
        self.TgtGear = 0
      if self.VCUTTgtSpRqst is None:
        self.VCUTTgtSpRqst = 0
      if self.VCUTTgtSpRqstVal is None:
        self.VCUTTgtSpRqstVal = 0.
      if self.ADASWndSnWpCtrl is None:
        self.ADASWndSnWpCtrl = 0
      if self.ADASHzdLtCtrl is None:
        self.ADASHzdLtCtrl = 0
      if self.ADASSdTrnLmpRHCtrl is None:
        self.ADASSdTrnLmpRHCtrl = 0
      if self.ADASSdTrnLmpLHCtrl is None:
        self.ADASSdTrnLmpLHCtrl = 0
      if self.ADASLowBmCtrl is None:
        self.ADASLowBmCtrl = 0
      if self.ADASHighBmCtrl is None:
        self.ADASHighBmCtrl = 0
      if self.ADASLkCtrl is None:
        self.ADASLkCtrl = 0
      if self.ADASRemtPrkModRqst is None:
        self.ADASRemtPrkModRqst = 0
      if self.BCMADASCtrlRqst is None:
        self.BCMADASCtrlRqst = 0
      if self.BCMADASCtrlRqstV is None:
        self.BCMADASCtrlRqstV = 0
    else:
      self.header = std_msgs.msg.Header()
      self.module_type = 0
      self.error_code = 0
      self.ctrl_command = ''
      self.VclDrvModRqstV = 0
      self.VclDrvModRqst = 0
      self.PakBrkRqstV = 0
      self.PakBrkRqst = 0
      self.VclAclRqstV = 0
      self.BrkPressureTgtV = 0
      self.VclVelRqstV = 0
      self.VclAclRqst = 0.
      self.BrkPressureTgt = 0.
      self.VclVelRqst = 0.
      self.IDUFltIndOn = 0
      self.PowOnRqst = 0
      self.VclShiftRqst = 0
      self.StrAglRqstV = 0
      self.StrAglRqst = 0.
      self.TgtStrAglVlcV = 0
      self.TgtStrAglVlc = 0.
      self.EPSCtrlModRqstV = 0
      self.EPSCtrlModRqst = 0
      self.LdskCtrl = 0
      self.WndSnWpCtrl = 0
      self.StpLpCtrl = 0
      self.HzdLtCtrl = 0
      self.ClerLmpCtrl = 0
      self.FogLmpCtrl = 0
      self.SdTrnLmpRHCtrl = 0
      self.SdTrnLmpLHCtrl = 0
      self.LowBmCtrl = 0
      self.HighBmCtrl = 0
      self.LkCtrl = 0
      self.CarWindCtrl = 0
      self.BCMCtrlModRqstV = 0
      self.BCMCtrlModRqst = 0
      self.RemtPowOnRqst = 0
      self.RemtPowOnRqstV = 0
      self.RemtPowDwnRqst = 0
      self.RemtPowDwnRqstV = 0
      self.CANB_ParkingStartRequest = False
      self.CANB_ParkingCloseRequest = False
      self.ADAS_StrAngleRqstV = 0
      self.ADASBrakRqstPres = 0.
      self.EPB_ADASPrkngRqst = 0
      self.ADASStrTorqRqst = 0
      self.ADASStrTorqTgt = 0.
      self.ADAS_StrAngle = 0.
      self.VCUTTgtAclrtnRqst = 0
      self.VCUTTgtAclrtnRqstVal = 0.
      self.GearRqst = 0
      self.TgtGear = 0
      self.VCUTTgtSpRqst = 0
      self.VCUTTgtSpRqstVal = 0.
      self.ADASWndSnWpCtrl = 0
      self.ADASHzdLtCtrl = 0
      self.ADASSdTrnLmpRHCtrl = 0
      self.ADASSdTrnLmpLHCtrl = 0
      self.ADASLowBmCtrl = 0
      self.ADASHighBmCtrl = 0
      self.ADASLkCtrl = 0
      self.ADASRemtPrkModRqst = 0
      self.BCMADASCtrlRqst = 0
      self.BCMADASCtrlRqstV = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_type, _x.error_code))
      _x = self.ctrl_command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B3d4BdBd23Bd2B2dBd3Bd10B().pack(_x.VclDrvModRqstV, _x.VclDrvModRqst, _x.PakBrkRqstV, _x.PakBrkRqst, _x.VclAclRqstV, _x.BrkPressureTgtV, _x.VclVelRqstV, _x.VclAclRqst, _x.BrkPressureTgt, _x.VclVelRqst, _x.IDUFltIndOn, _x.PowOnRqst, _x.VclShiftRqst, _x.StrAglRqstV, _x.StrAglRqst, _x.TgtStrAglVlcV, _x.TgtStrAglVlc, _x.EPSCtrlModRqstV, _x.EPSCtrlModRqst, _x.LdskCtrl, _x.WndSnWpCtrl, _x.StpLpCtrl, _x.HzdLtCtrl, _x.ClerLmpCtrl, _x.FogLmpCtrl, _x.SdTrnLmpRHCtrl, _x.SdTrnLmpLHCtrl, _x.LowBmCtrl, _x.HighBmCtrl, _x.LkCtrl, _x.CarWindCtrl, _x.BCMCtrlModRqstV, _x.BCMCtrlModRqst, _x.RemtPowOnRqst, _x.RemtPowOnRqstV, _x.RemtPowDwnRqst, _x.RemtPowDwnRqstV, _x.CANB_ParkingStartRequest, _x.CANB_ParkingCloseRequest, _x.ADAS_StrAngleRqstV, _x.ADASBrakRqstPres, _x.EPB_ADASPrkngRqst, _x.ADASStrTorqRqst, _x.ADASStrTorqTgt, _x.ADAS_StrAngle, _x.VCUTTgtAclrtnRqst, _x.VCUTTgtAclrtnRqstVal, _x.GearRqst, _x.TgtGear, _x.VCUTTgtSpRqst, _x.VCUTTgtSpRqstVal, _x.ADASWndSnWpCtrl, _x.ADASHzdLtCtrl, _x.ADASSdTrnLmpRHCtrl, _x.ADASSdTrnLmpLHCtrl, _x.ADASLowBmCtrl, _x.ADASHighBmCtrl, _x.ADASLkCtrl, _x.ADASRemtPrkModRqst, _x.BCMADASCtrlRqst, _x.BCMADASCtrlRqstV))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.module_type, _x.error_code,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ctrl_command = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ctrl_command = str[start:end]
      _x = self
      start = end
      end += 131
      (_x.VclDrvModRqstV, _x.VclDrvModRqst, _x.PakBrkRqstV, _x.PakBrkRqst, _x.VclAclRqstV, _x.BrkPressureTgtV, _x.VclVelRqstV, _x.VclAclRqst, _x.BrkPressureTgt, _x.VclVelRqst, _x.IDUFltIndOn, _x.PowOnRqst, _x.VclShiftRqst, _x.StrAglRqstV, _x.StrAglRqst, _x.TgtStrAglVlcV, _x.TgtStrAglVlc, _x.EPSCtrlModRqstV, _x.EPSCtrlModRqst, _x.LdskCtrl, _x.WndSnWpCtrl, _x.StpLpCtrl, _x.HzdLtCtrl, _x.ClerLmpCtrl, _x.FogLmpCtrl, _x.SdTrnLmpRHCtrl, _x.SdTrnLmpLHCtrl, _x.LowBmCtrl, _x.HighBmCtrl, _x.LkCtrl, _x.CarWindCtrl, _x.BCMCtrlModRqstV, _x.BCMCtrlModRqst, _x.RemtPowOnRqst, _x.RemtPowOnRqstV, _x.RemtPowDwnRqst, _x.RemtPowDwnRqstV, _x.CANB_ParkingStartRequest, _x.CANB_ParkingCloseRequest, _x.ADAS_StrAngleRqstV, _x.ADASBrakRqstPres, _x.EPB_ADASPrkngRqst, _x.ADASStrTorqRqst, _x.ADASStrTorqTgt, _x.ADAS_StrAngle, _x.VCUTTgtAclrtnRqst, _x.VCUTTgtAclrtnRqstVal, _x.GearRqst, _x.TgtGear, _x.VCUTTgtSpRqst, _x.VCUTTgtSpRqstVal, _x.ADASWndSnWpCtrl, _x.ADASHzdLtCtrl, _x.ADASSdTrnLmpRHCtrl, _x.ADASSdTrnLmpLHCtrl, _x.ADASLowBmCtrl, _x.ADASHighBmCtrl, _x.ADASLkCtrl, _x.ADASRemtPrkModRqst, _x.BCMADASCtrlRqst, _x.BCMADASCtrlRqstV,) = _get_struct_7B3d4BdBd23Bd2B2dBd3Bd10B().unpack(str[start:end])
      self.CANB_ParkingStartRequest = bool(self.CANB_ParkingStartRequest)
      self.CANB_ParkingCloseRequest = bool(self.CANB_ParkingCloseRequest)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.module_type, _x.error_code))
      _x = self.ctrl_command
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7B3d4BdBd23Bd2B2dBd3Bd10B().pack(_x.VclDrvModRqstV, _x.VclDrvModRqst, _x.PakBrkRqstV, _x.PakBrkRqst, _x.VclAclRqstV, _x.BrkPressureTgtV, _x.VclVelRqstV, _x.VclAclRqst, _x.BrkPressureTgt, _x.VclVelRqst, _x.IDUFltIndOn, _x.PowOnRqst, _x.VclShiftRqst, _x.StrAglRqstV, _x.StrAglRqst, _x.TgtStrAglVlcV, _x.TgtStrAglVlc, _x.EPSCtrlModRqstV, _x.EPSCtrlModRqst, _x.LdskCtrl, _x.WndSnWpCtrl, _x.StpLpCtrl, _x.HzdLtCtrl, _x.ClerLmpCtrl, _x.FogLmpCtrl, _x.SdTrnLmpRHCtrl, _x.SdTrnLmpLHCtrl, _x.LowBmCtrl, _x.HighBmCtrl, _x.LkCtrl, _x.CarWindCtrl, _x.BCMCtrlModRqstV, _x.BCMCtrlModRqst, _x.RemtPowOnRqst, _x.RemtPowOnRqstV, _x.RemtPowDwnRqst, _x.RemtPowDwnRqstV, _x.CANB_ParkingStartRequest, _x.CANB_ParkingCloseRequest, _x.ADAS_StrAngleRqstV, _x.ADASBrakRqstPres, _x.EPB_ADASPrkngRqst, _x.ADASStrTorqRqst, _x.ADASStrTorqTgt, _x.ADAS_StrAngle, _x.VCUTTgtAclrtnRqst, _x.VCUTTgtAclrtnRqstVal, _x.GearRqst, _x.TgtGear, _x.VCUTTgtSpRqst, _x.VCUTTgtSpRqstVal, _x.ADASWndSnWpCtrl, _x.ADASHzdLtCtrl, _x.ADASSdTrnLmpRHCtrl, _x.ADASSdTrnLmpLHCtrl, _x.ADASLowBmCtrl, _x.ADASHighBmCtrl, _x.ADASLkCtrl, _x.ADASRemtPrkModRqst, _x.BCMADASCtrlRqst, _x.BCMADASCtrlRqstV))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.module_type, _x.error_code,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ctrl_command = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ctrl_command = str[start:end]
      _x = self
      start = end
      end += 131
      (_x.VclDrvModRqstV, _x.VclDrvModRqst, _x.PakBrkRqstV, _x.PakBrkRqst, _x.VclAclRqstV, _x.BrkPressureTgtV, _x.VclVelRqstV, _x.VclAclRqst, _x.BrkPressureTgt, _x.VclVelRqst, _x.IDUFltIndOn, _x.PowOnRqst, _x.VclShiftRqst, _x.StrAglRqstV, _x.StrAglRqst, _x.TgtStrAglVlcV, _x.TgtStrAglVlc, _x.EPSCtrlModRqstV, _x.EPSCtrlModRqst, _x.LdskCtrl, _x.WndSnWpCtrl, _x.StpLpCtrl, _x.HzdLtCtrl, _x.ClerLmpCtrl, _x.FogLmpCtrl, _x.SdTrnLmpRHCtrl, _x.SdTrnLmpLHCtrl, _x.LowBmCtrl, _x.HighBmCtrl, _x.LkCtrl, _x.CarWindCtrl, _x.BCMCtrlModRqstV, _x.BCMCtrlModRqst, _x.RemtPowOnRqst, _x.RemtPowOnRqstV, _x.RemtPowDwnRqst, _x.RemtPowDwnRqstV, _x.CANB_ParkingStartRequest, _x.CANB_ParkingCloseRequest, _x.ADAS_StrAngleRqstV, _x.ADASBrakRqstPres, _x.EPB_ADASPrkngRqst, _x.ADASStrTorqRqst, _x.ADASStrTorqTgt, _x.ADAS_StrAngle, _x.VCUTTgtAclrtnRqst, _x.VCUTTgtAclrtnRqstVal, _x.GearRqst, _x.TgtGear, _x.VCUTTgtSpRqst, _x.VCUTTgtSpRqstVal, _x.ADASWndSnWpCtrl, _x.ADASHzdLtCtrl, _x.ADASSdTrnLmpRHCtrl, _x.ADASSdTrnLmpLHCtrl, _x.ADASLowBmCtrl, _x.ADASHighBmCtrl, _x.ADASLkCtrl, _x.ADASRemtPrkModRqst, _x.BCMADASCtrlRqst, _x.BCMADASCtrlRqstV,) = _get_struct_7B3d4BdBd23Bd2B2dBd3Bd10B().unpack(str[start:end])
      self.CANB_ParkingStartRequest = bool(self.CANB_ParkingStartRequest)
      self.CANB_ParkingCloseRequest = bool(self.CANB_ParkingCloseRequest)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7B3d4BdBd23Bd2B2dBd3Bd10B = None
def _get_struct_7B3d4BdBd23Bd2B2dBd3Bd10B():
    global _struct_7B3d4BdBd23Bd2B2dBd3Bd10B
    if _struct_7B3d4BdBd23Bd2B2dBd3Bd10B is None:
        _struct_7B3d4BdBd23Bd2B2dBd3Bd10B = struct.Struct("<7B3d4BdBd23Bd2B2dBd3Bd10B")
    return _struct_7B3d4BdBd23Bd2B2dBd3Bd10B
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
