// Generated by gencpp from file in2ulv_msgs/ChassisInfoToHMI.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_CHASSISINFOTOHMI_H
#define IN2ULV_MSGS_MESSAGE_CHASSISINFOTOHMI_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct ChassisInfoToHMI_
{
  typedef ChassisInfoToHMI_<ContainerAllocator> Type;

  ChassisInfoToHMI_()
    : header()
    , vin()
    , current_stop()
    , route_stop()
    , route_line(0)
    , control_mode(0)
    , veh_status(0)
    , gps_veh()
    , gps_stop()
    , trip_distance(0.0)
    , trip_eta(0.0)
    , trip_left_mileage(0.0)
    , SysPowMode(0)
    , HzrdLtIO(0)
    , WindscenWipSt(0)
    , Highbeem(0)
    , Lowbeem(0)
    , Windows(0)
    , Doorlock(0)
    , DoorSwitch(0)
    , EmergencyButton(0)
    , speed(0.0)
    , angle(0.0)
    , soc(0.0)
    , event(0)  {
      gps_veh.assign(0.0);

      gps_stop.assign(0.0);
  }
  ChassisInfoToHMI_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , vin(_alloc)
    , current_stop(_alloc)
    , route_stop(_alloc)
    , route_line(0)
    , control_mode(0)
    , veh_status(0)
    , gps_veh()
    , gps_stop()
    , trip_distance(0.0)
    , trip_eta(0.0)
    , trip_left_mileage(0.0)
    , SysPowMode(0)
    , HzrdLtIO(0)
    , WindscenWipSt(0)
    , Highbeem(0)
    , Lowbeem(0)
    , Windows(0)
    , Doorlock(0)
    , DoorSwitch(0)
    , EmergencyButton(0)
    , speed(0.0)
    , angle(0.0)
    , soc(0.0)
    , event(0)  {
  (void)_alloc;
      gps_veh.assign(0.0);

      gps_stop.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _vin_type;
  _vin_type vin;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _current_stop_type;
  _current_stop_type current_stop;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _route_stop_type;
  _route_stop_type route_stop;

   typedef uint64_t _route_line_type;
  _route_line_type route_line;

   typedef uint8_t _control_mode_type;
  _control_mode_type control_mode;

   typedef uint16_t _veh_status_type;
  _veh_status_type veh_status;

   typedef boost::array<double, 2>  _gps_veh_type;
  _gps_veh_type gps_veh;

   typedef boost::array<double, 2>  _gps_stop_type;
  _gps_stop_type gps_stop;

   typedef double _trip_distance_type;
  _trip_distance_type trip_distance;

   typedef double _trip_eta_type;
  _trip_eta_type trip_eta;

   typedef double _trip_left_mileage_type;
  _trip_left_mileage_type trip_left_mileage;

   typedef uint8_t _SysPowMode_type;
  _SysPowMode_type SysPowMode;

   typedef uint8_t _HzrdLtIO_type;
  _HzrdLtIO_type HzrdLtIO;

   typedef uint8_t _WindscenWipSt_type;
  _WindscenWipSt_type WindscenWipSt;

   typedef uint8_t _Highbeem_type;
  _Highbeem_type Highbeem;

   typedef uint8_t _Lowbeem_type;
  _Lowbeem_type Lowbeem;

   typedef uint8_t _Windows_type;
  _Windows_type Windows;

   typedef uint8_t _Doorlock_type;
  _Doorlock_type Doorlock;

   typedef uint8_t _DoorSwitch_type;
  _DoorSwitch_type DoorSwitch;

   typedef uint8_t _EmergencyButton_type;
  _EmergencyButton_type EmergencyButton;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _angle_type;
  _angle_type angle;

   typedef double _soc_type;
  _soc_type soc;

   typedef uint16_t _event_type;
  _event_type event;





  typedef boost::shared_ptr< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisInfoToHMI_

typedef ::in2ulv_msgs::ChassisInfoToHMI_<std::allocator<void> > ChassisInfoToHMI;

typedef boost::shared_ptr< ::in2ulv_msgs::ChassisInfoToHMI > ChassisInfoToHMIPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::ChassisInfoToHMI const> ChassisInfoToHMIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.vin == rhs.vin &&
    lhs.current_stop == rhs.current_stop &&
    lhs.route_stop == rhs.route_stop &&
    lhs.route_line == rhs.route_line &&
    lhs.control_mode == rhs.control_mode &&
    lhs.veh_status == rhs.veh_status &&
    lhs.gps_veh == rhs.gps_veh &&
    lhs.gps_stop == rhs.gps_stop &&
    lhs.trip_distance == rhs.trip_distance &&
    lhs.trip_eta == rhs.trip_eta &&
    lhs.trip_left_mileage == rhs.trip_left_mileage &&
    lhs.SysPowMode == rhs.SysPowMode &&
    lhs.HzrdLtIO == rhs.HzrdLtIO &&
    lhs.WindscenWipSt == rhs.WindscenWipSt &&
    lhs.Highbeem == rhs.Highbeem &&
    lhs.Lowbeem == rhs.Lowbeem &&
    lhs.Windows == rhs.Windows &&
    lhs.Doorlock == rhs.Doorlock &&
    lhs.DoorSwitch == rhs.DoorSwitch &&
    lhs.EmergencyButton == rhs.EmergencyButton &&
    lhs.speed == rhs.speed &&
    lhs.angle == rhs.angle &&
    lhs.soc == rhs.soc &&
    lhs.event == rhs.event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a60f94b6e0bf5a28659ca3510b2db089";
  }

  static const char* value(const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa60f94b6e0bf5a28ULL;
  static const uint64_t static_value2 = 0x659ca3510b2db089ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/ChassisInfoToHMI";
  }

  static const char* value(const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"\n"
"string vin # 字符串类型, 16 ~ 32个字符， 读取配置文件获取，列如: LK6ADAE21MB100250\n"
"string current_stop # 字符串类型, 16 ~ 32个字符, 列如: d0a0d333931203a,\n"
"string route_stop # 字符串类型,16 ~ 32个字符, 列如: d0a0d333931203a\n"
"\n"
"uint64 route_line # 路线\n"
"\n"
"uint8 control_mode # 车辆控制模式: 0为自动模式， 1为手动模式\n"
"\n"
"uint16 veh_status  # 0: 无服务请求, 1: 未准备完毕, 2: 准备完毕, 3: 正常行驶, 4: 到达目的地, 5: 服务失败(未到达目的地), 6: 车辆已经暂停, 7: 避障停车\n"
"\n"
"float64[2] gps_veh # 车辆位置经纬度，2个dobule类型的数组, 第一个是车辆位置的纬度， 第二个是车辆位置的经度\n"
"float64[2] gps_stop # 车辆目标站点经纬度，2个dobule类型的数组, 第一个是车辆位置的纬度， 第二个是车辆位置的经度\n"
"\n"
"float64 trip_distance     # 行程总里程, 距离站点总里程, 单位: m\n"
"float64 trip_eta          # 行程剩余时间, 到达站点预计剩余时间, 单位: ms \n"
"float64 trip_left_mileage # 行程剩余里程, 到达站点剩余里程, 单位: m\n"
"\n"
"uint8 SysPowMode  # 整车电源模式, ACAN的0x565, 0x0: OFF, 0x1: ACC, 0x2: ON\n"
"uint8 HzrdLtIO    # 双闪状态, 0: 关闭, 1: 开启\n"
"uint8 WindscenWipSt  # 雨刮状态, 0: 关闭, 1: 开启 \n"
"uint8 Highbeem       # 远关灯状态, 0: 关闭, 1: 开启\n"
"uint8 Lowbeem        # 近光灯状态, 0: 关闭, 1: 开启\n"
"uint8 Windows        # 车窗状态, 0: 升起, 1: 落下\n"
"uint8 Doorlock       # 门锁状态, 0: 锁车, 1: 解锁\n"
"uint8 DoorSwitch     # 门锁开关, 0: 关闭, 1: 未关闭\n"
"uint8 EmergencyButton# 按钮状态: 按下为1， 不按下为0\n"
"\n"
"float64 speed	      # 车辆当前速度, IDU从0x36A获取到的车速, 单位m/s\n"
"float64 angle          # 车辆转向角度, IDU从0x1E5获取到的转角值, 单位度\n"
"float64 soc            # IDU从0x36A获取到的SOC电池值, 单位%\n"
"uint16 event         # 故障事件上报, 具体故障事件定义和含义由算法给出\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.vin);
      stream.next(m.current_stop);
      stream.next(m.route_stop);
      stream.next(m.route_line);
      stream.next(m.control_mode);
      stream.next(m.veh_status);
      stream.next(m.gps_veh);
      stream.next(m.gps_stop);
      stream.next(m.trip_distance);
      stream.next(m.trip_eta);
      stream.next(m.trip_left_mileage);
      stream.next(m.SysPowMode);
      stream.next(m.HzrdLtIO);
      stream.next(m.WindscenWipSt);
      stream.next(m.Highbeem);
      stream.next(m.Lowbeem);
      stream.next(m.Windows);
      stream.next(m.Doorlock);
      stream.next(m.DoorSwitch);
      stream.next(m.EmergencyButton);
      stream.next(m.speed);
      stream.next(m.angle);
      stream.next(m.soc);
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisInfoToHMI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::ChassisInfoToHMI_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "vin: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.vin);
    s << indent << "current_stop: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.current_stop);
    s << indent << "route_stop: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.route_stop);
    s << indent << "route_line: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.route_line);
    s << indent << "control_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.control_mode);
    s << indent << "veh_status: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.veh_status);
    s << indent << "gps_veh[]" << std::endl;
    for (size_t i = 0; i < v.gps_veh.size(); ++i)
    {
      s << indent << "  gps_veh[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gps_veh[i]);
    }
    s << indent << "gps_stop[]" << std::endl;
    for (size_t i = 0; i < v.gps_stop.size(); ++i)
    {
      s << indent << "  gps_stop[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.gps_stop[i]);
    }
    s << indent << "trip_distance: ";
    Printer<double>::stream(s, indent + "  ", v.trip_distance);
    s << indent << "trip_eta: ";
    Printer<double>::stream(s, indent + "  ", v.trip_eta);
    s << indent << "trip_left_mileage: ";
    Printer<double>::stream(s, indent + "  ", v.trip_left_mileage);
    s << indent << "SysPowMode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SysPowMode);
    s << indent << "HzrdLtIO: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HzrdLtIO);
    s << indent << "WindscenWipSt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WindscenWipSt);
    s << indent << "Highbeem: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Highbeem);
    s << indent << "Lowbeem: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Lowbeem);
    s << indent << "Windows: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Windows);
    s << indent << "Doorlock: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Doorlock);
    s << indent << "DoorSwitch: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DoorSwitch);
    s << indent << "EmergencyButton: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EmergencyButton);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "soc: ";
    Printer<double>::stream(s, indent + "  ", v.soc);
    s << indent << "event: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_CHASSISINFOTOHMI_H
