// Generated by gencpp from file in2ulv_msgs/ChassisCtrlMsg.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_CHASSISCTRLMSG_H
#define IN2ULV_MSGS_MESSAGE_CHASSISCTRLMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct ChassisCtrlMsg_
{
  typedef ChassisCtrlMsg_<ContainerAllocator> Type;

  ChassisCtrlMsg_()
    : header()
    , module_type(0)
    , error_code(0)
    , ctrl_command()
    , VclDrvModRqstV(0)
    , VclDrvModRqst(0)
    , PakBrkRqstV(0)
    , PakBrkRqst(0)
    , VclAclRqstV(0)
    , BrkPressureTgtV(0)
    , VclVelRqstV(0)
    , VclAclRqst(0.0)
    , BrkPressureTgt(0.0)
    , VclVelRqst(0.0)
    , IDUFltIndOn(0)
    , PowOnRqst(0)
    , VclShiftRqst(0)
    , StrAglRqstV(0)
    , StrAglRqst(0.0)
    , TgtStrAglVlcV(0)
    , TgtStrAglVlc(0.0)
    , EPSCtrlModRqstV(0)
    , EPSCtrlModRqst(0)
    , LdskCtrl(0)
    , WndSnWpCtrl(0)
    , StpLpCtrl(0)
    , HzdLtCtrl(0)
    , ClerLmpCtrl(0)
    , FogLmpCtrl(0)
    , SdTrnLmpRHCtrl(0)
    , SdTrnLmpLHCtrl(0)
    , LowBmCtrl(0)
    , HighBmCtrl(0)
    , LkCtrl(0)
    , CarWindCtrl(0)
    , BCMCtrlModRqstV(0)
    , BCMCtrlModRqst(0)
    , RemtPowOnRqst(0)
    , RemtPowOnRqstV(0)
    , RemtPowDwnRqst(0)
    , RemtPowDwnRqstV(0)
    , CANB_ParkingStartRequest(false)
    , CANB_ParkingCloseRequest(false)
    , ADAS_StrAngleRqstV(0)
    , ADASBrakRqstPres(0.0)
    , EPB_ADASPrkngRqst(0)
    , ADASStrTorqRqst(0)
    , ADASStrTorqTgt(0.0)
    , ADAS_StrAngle(0.0)
    , VCUTTgtAclrtnRqst(0)
    , VCUTTgtAclrtnRqstVal(0.0)
    , GearRqst(0)
    , TgtGear(0)
    , VCUTTgtSpRqst(0)
    , VCUTTgtSpRqstVal(0.0)
    , ADASWndSnWpCtrl(0)
    , ADASHzdLtCtrl(0)
    , ADASSdTrnLmpRHCtrl(0)
    , ADASSdTrnLmpLHCtrl(0)
    , ADASLowBmCtrl(0)
    , ADASHighBmCtrl(0)
    , ADASLkCtrl(0)
    , ADASRemtPrkModRqst(0)
    , BCMADASCtrlRqst(0)
    , BCMADASCtrlRqstV(0)  {
    }
  ChassisCtrlMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , module_type(0)
    , error_code(0)
    , ctrl_command(_alloc)
    , VclDrvModRqstV(0)
    , VclDrvModRqst(0)
    , PakBrkRqstV(0)
    , PakBrkRqst(0)
    , VclAclRqstV(0)
    , BrkPressureTgtV(0)
    , VclVelRqstV(0)
    , VclAclRqst(0.0)
    , BrkPressureTgt(0.0)
    , VclVelRqst(0.0)
    , IDUFltIndOn(0)
    , PowOnRqst(0)
    , VclShiftRqst(0)
    , StrAglRqstV(0)
    , StrAglRqst(0.0)
    , TgtStrAglVlcV(0)
    , TgtStrAglVlc(0.0)
    , EPSCtrlModRqstV(0)
    , EPSCtrlModRqst(0)
    , LdskCtrl(0)
    , WndSnWpCtrl(0)
    , StpLpCtrl(0)
    , HzdLtCtrl(0)
    , ClerLmpCtrl(0)
    , FogLmpCtrl(0)
    , SdTrnLmpRHCtrl(0)
    , SdTrnLmpLHCtrl(0)
    , LowBmCtrl(0)
    , HighBmCtrl(0)
    , LkCtrl(0)
    , CarWindCtrl(0)
    , BCMCtrlModRqstV(0)
    , BCMCtrlModRqst(0)
    , RemtPowOnRqst(0)
    , RemtPowOnRqstV(0)
    , RemtPowDwnRqst(0)
    , RemtPowDwnRqstV(0)
    , CANB_ParkingStartRequest(false)
    , CANB_ParkingCloseRequest(false)
    , ADAS_StrAngleRqstV(0)
    , ADASBrakRqstPres(0.0)
    , EPB_ADASPrkngRqst(0)
    , ADASStrTorqRqst(0)
    , ADASStrTorqTgt(0.0)
    , ADAS_StrAngle(0.0)
    , VCUTTgtAclrtnRqst(0)
    , VCUTTgtAclrtnRqstVal(0.0)
    , GearRqst(0)
    , TgtGear(0)
    , VCUTTgtSpRqst(0)
    , VCUTTgtSpRqstVal(0.0)
    , ADASWndSnWpCtrl(0)
    , ADASHzdLtCtrl(0)
    , ADASSdTrnLmpRHCtrl(0)
    , ADASSdTrnLmpLHCtrl(0)
    , ADASLowBmCtrl(0)
    , ADASHighBmCtrl(0)
    , ADASLkCtrl(0)
    , ADASRemtPrkModRqst(0)
    , BCMADASCtrlRqst(0)
    , BCMADASCtrlRqstV(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _module_type_type;
  _module_type_type module_type;

   typedef uint32_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ctrl_command_type;
  _ctrl_command_type ctrl_command;

   typedef uint8_t _VclDrvModRqstV_type;
  _VclDrvModRqstV_type VclDrvModRqstV;

   typedef uint8_t _VclDrvModRqst_type;
  _VclDrvModRqst_type VclDrvModRqst;

   typedef uint8_t _PakBrkRqstV_type;
  _PakBrkRqstV_type PakBrkRqstV;

   typedef uint8_t _PakBrkRqst_type;
  _PakBrkRqst_type PakBrkRqst;

   typedef uint8_t _VclAclRqstV_type;
  _VclAclRqstV_type VclAclRqstV;

   typedef uint8_t _BrkPressureTgtV_type;
  _BrkPressureTgtV_type BrkPressureTgtV;

   typedef uint8_t _VclVelRqstV_type;
  _VclVelRqstV_type VclVelRqstV;

   typedef double _VclAclRqst_type;
  _VclAclRqst_type VclAclRqst;

   typedef double _BrkPressureTgt_type;
  _BrkPressureTgt_type BrkPressureTgt;

   typedef double _VclVelRqst_type;
  _VclVelRqst_type VclVelRqst;

   typedef uint8_t _IDUFltIndOn_type;
  _IDUFltIndOn_type IDUFltIndOn;

   typedef uint8_t _PowOnRqst_type;
  _PowOnRqst_type PowOnRqst;

   typedef uint8_t _VclShiftRqst_type;
  _VclShiftRqst_type VclShiftRqst;

   typedef uint8_t _StrAglRqstV_type;
  _StrAglRqstV_type StrAglRqstV;

   typedef double _StrAglRqst_type;
  _StrAglRqst_type StrAglRqst;

   typedef uint8_t _TgtStrAglVlcV_type;
  _TgtStrAglVlcV_type TgtStrAglVlcV;

   typedef double _TgtStrAglVlc_type;
  _TgtStrAglVlc_type TgtStrAglVlc;

   typedef uint8_t _EPSCtrlModRqstV_type;
  _EPSCtrlModRqstV_type EPSCtrlModRqstV;

   typedef uint8_t _EPSCtrlModRqst_type;
  _EPSCtrlModRqst_type EPSCtrlModRqst;

   typedef uint8_t _LdskCtrl_type;
  _LdskCtrl_type LdskCtrl;

   typedef uint8_t _WndSnWpCtrl_type;
  _WndSnWpCtrl_type WndSnWpCtrl;

   typedef uint8_t _StpLpCtrl_type;
  _StpLpCtrl_type StpLpCtrl;

   typedef uint8_t _HzdLtCtrl_type;
  _HzdLtCtrl_type HzdLtCtrl;

   typedef uint8_t _ClerLmpCtrl_type;
  _ClerLmpCtrl_type ClerLmpCtrl;

   typedef uint8_t _FogLmpCtrl_type;
  _FogLmpCtrl_type FogLmpCtrl;

   typedef uint8_t _SdTrnLmpRHCtrl_type;
  _SdTrnLmpRHCtrl_type SdTrnLmpRHCtrl;

   typedef uint8_t _SdTrnLmpLHCtrl_type;
  _SdTrnLmpLHCtrl_type SdTrnLmpLHCtrl;

   typedef uint8_t _LowBmCtrl_type;
  _LowBmCtrl_type LowBmCtrl;

   typedef uint8_t _HighBmCtrl_type;
  _HighBmCtrl_type HighBmCtrl;

   typedef uint8_t _LkCtrl_type;
  _LkCtrl_type LkCtrl;

   typedef uint8_t _CarWindCtrl_type;
  _CarWindCtrl_type CarWindCtrl;

   typedef uint8_t _BCMCtrlModRqstV_type;
  _BCMCtrlModRqstV_type BCMCtrlModRqstV;

   typedef uint8_t _BCMCtrlModRqst_type;
  _BCMCtrlModRqst_type BCMCtrlModRqst;

   typedef uint8_t _RemtPowOnRqst_type;
  _RemtPowOnRqst_type RemtPowOnRqst;

   typedef uint8_t _RemtPowOnRqstV_type;
  _RemtPowOnRqstV_type RemtPowOnRqstV;

   typedef uint8_t _RemtPowDwnRqst_type;
  _RemtPowDwnRqst_type RemtPowDwnRqst;

   typedef uint8_t _RemtPowDwnRqstV_type;
  _RemtPowDwnRqstV_type RemtPowDwnRqstV;

   typedef uint8_t _CANB_ParkingStartRequest_type;
  _CANB_ParkingStartRequest_type CANB_ParkingStartRequest;

   typedef uint8_t _CANB_ParkingCloseRequest_type;
  _CANB_ParkingCloseRequest_type CANB_ParkingCloseRequest;

   typedef uint8_t _ADAS_StrAngleRqstV_type;
  _ADAS_StrAngleRqstV_type ADAS_StrAngleRqstV;

   typedef double _ADASBrakRqstPres_type;
  _ADASBrakRqstPres_type ADASBrakRqstPres;

   typedef uint8_t _EPB_ADASPrkngRqst_type;
  _EPB_ADASPrkngRqst_type EPB_ADASPrkngRqst;

   typedef uint8_t _ADASStrTorqRqst_type;
  _ADASStrTorqRqst_type ADASStrTorqRqst;

   typedef double _ADASStrTorqTgt_type;
  _ADASStrTorqTgt_type ADASStrTorqTgt;

   typedef double _ADAS_StrAngle_type;
  _ADAS_StrAngle_type ADAS_StrAngle;

   typedef uint8_t _VCUTTgtAclrtnRqst_type;
  _VCUTTgtAclrtnRqst_type VCUTTgtAclrtnRqst;

   typedef double _VCUTTgtAclrtnRqstVal_type;
  _VCUTTgtAclrtnRqstVal_type VCUTTgtAclrtnRqstVal;

   typedef uint8_t _GearRqst_type;
  _GearRqst_type GearRqst;

   typedef uint8_t _TgtGear_type;
  _TgtGear_type TgtGear;

   typedef uint8_t _VCUTTgtSpRqst_type;
  _VCUTTgtSpRqst_type VCUTTgtSpRqst;

   typedef double _VCUTTgtSpRqstVal_type;
  _VCUTTgtSpRqstVal_type VCUTTgtSpRqstVal;

   typedef uint8_t _ADASWndSnWpCtrl_type;
  _ADASWndSnWpCtrl_type ADASWndSnWpCtrl;

   typedef uint8_t _ADASHzdLtCtrl_type;
  _ADASHzdLtCtrl_type ADASHzdLtCtrl;

   typedef uint8_t _ADASSdTrnLmpRHCtrl_type;
  _ADASSdTrnLmpRHCtrl_type ADASSdTrnLmpRHCtrl;

   typedef uint8_t _ADASSdTrnLmpLHCtrl_type;
  _ADASSdTrnLmpLHCtrl_type ADASSdTrnLmpLHCtrl;

   typedef uint8_t _ADASLowBmCtrl_type;
  _ADASLowBmCtrl_type ADASLowBmCtrl;

   typedef uint8_t _ADASHighBmCtrl_type;
  _ADASHighBmCtrl_type ADASHighBmCtrl;

   typedef uint8_t _ADASLkCtrl_type;
  _ADASLkCtrl_type ADASLkCtrl;

   typedef uint8_t _ADASRemtPrkModRqst_type;
  _ADASRemtPrkModRqst_type ADASRemtPrkModRqst;

   typedef uint8_t _BCMADASCtrlRqst_type;
  _BCMADASCtrlRqst_type BCMADASCtrlRqst;

   typedef uint8_t _BCMADASCtrlRqstV_type;
  _BCMADASCtrlRqstV_type BCMADASCtrlRqstV;





  typedef boost::shared_ptr< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisCtrlMsg_

typedef ::in2ulv_msgs::ChassisCtrlMsg_<std::allocator<void> > ChassisCtrlMsg;

typedef boost::shared_ptr< ::in2ulv_msgs::ChassisCtrlMsg > ChassisCtrlMsgPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::ChassisCtrlMsg const> ChassisCtrlMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.module_type == rhs.module_type &&
    lhs.error_code == rhs.error_code &&
    lhs.ctrl_command == rhs.ctrl_command &&
    lhs.VclDrvModRqstV == rhs.VclDrvModRqstV &&
    lhs.VclDrvModRqst == rhs.VclDrvModRqst &&
    lhs.PakBrkRqstV == rhs.PakBrkRqstV &&
    lhs.PakBrkRqst == rhs.PakBrkRqst &&
    lhs.VclAclRqstV == rhs.VclAclRqstV &&
    lhs.BrkPressureTgtV == rhs.BrkPressureTgtV &&
    lhs.VclVelRqstV == rhs.VclVelRqstV &&
    lhs.VclAclRqst == rhs.VclAclRqst &&
    lhs.BrkPressureTgt == rhs.BrkPressureTgt &&
    lhs.VclVelRqst == rhs.VclVelRqst &&
    lhs.IDUFltIndOn == rhs.IDUFltIndOn &&
    lhs.PowOnRqst == rhs.PowOnRqst &&
    lhs.VclShiftRqst == rhs.VclShiftRqst &&
    lhs.StrAglRqstV == rhs.StrAglRqstV &&
    lhs.StrAglRqst == rhs.StrAglRqst &&
    lhs.TgtStrAglVlcV == rhs.TgtStrAglVlcV &&
    lhs.TgtStrAglVlc == rhs.TgtStrAglVlc &&
    lhs.EPSCtrlModRqstV == rhs.EPSCtrlModRqstV &&
    lhs.EPSCtrlModRqst == rhs.EPSCtrlModRqst &&
    lhs.LdskCtrl == rhs.LdskCtrl &&
    lhs.WndSnWpCtrl == rhs.WndSnWpCtrl &&
    lhs.StpLpCtrl == rhs.StpLpCtrl &&
    lhs.HzdLtCtrl == rhs.HzdLtCtrl &&
    lhs.ClerLmpCtrl == rhs.ClerLmpCtrl &&
    lhs.FogLmpCtrl == rhs.FogLmpCtrl &&
    lhs.SdTrnLmpRHCtrl == rhs.SdTrnLmpRHCtrl &&
    lhs.SdTrnLmpLHCtrl == rhs.SdTrnLmpLHCtrl &&
    lhs.LowBmCtrl == rhs.LowBmCtrl &&
    lhs.HighBmCtrl == rhs.HighBmCtrl &&
    lhs.LkCtrl == rhs.LkCtrl &&
    lhs.CarWindCtrl == rhs.CarWindCtrl &&
    lhs.BCMCtrlModRqstV == rhs.BCMCtrlModRqstV &&
    lhs.BCMCtrlModRqst == rhs.BCMCtrlModRqst &&
    lhs.RemtPowOnRqst == rhs.RemtPowOnRqst &&
    lhs.RemtPowOnRqstV == rhs.RemtPowOnRqstV &&
    lhs.RemtPowDwnRqst == rhs.RemtPowDwnRqst &&
    lhs.RemtPowDwnRqstV == rhs.RemtPowDwnRqstV &&
    lhs.CANB_ParkingStartRequest == rhs.CANB_ParkingStartRequest &&
    lhs.CANB_ParkingCloseRequest == rhs.CANB_ParkingCloseRequest &&
    lhs.ADAS_StrAngleRqstV == rhs.ADAS_StrAngleRqstV &&
    lhs.ADASBrakRqstPres == rhs.ADASBrakRqstPres &&
    lhs.EPB_ADASPrkngRqst == rhs.EPB_ADASPrkngRqst &&
    lhs.ADASStrTorqRqst == rhs.ADASStrTorqRqst &&
    lhs.ADASStrTorqTgt == rhs.ADASStrTorqTgt &&
    lhs.ADAS_StrAngle == rhs.ADAS_StrAngle &&
    lhs.VCUTTgtAclrtnRqst == rhs.VCUTTgtAclrtnRqst &&
    lhs.VCUTTgtAclrtnRqstVal == rhs.VCUTTgtAclrtnRqstVal &&
    lhs.GearRqst == rhs.GearRqst &&
    lhs.TgtGear == rhs.TgtGear &&
    lhs.VCUTTgtSpRqst == rhs.VCUTTgtSpRqst &&
    lhs.VCUTTgtSpRqstVal == rhs.VCUTTgtSpRqstVal &&
    lhs.ADASWndSnWpCtrl == rhs.ADASWndSnWpCtrl &&
    lhs.ADASHzdLtCtrl == rhs.ADASHzdLtCtrl &&
    lhs.ADASSdTrnLmpRHCtrl == rhs.ADASSdTrnLmpRHCtrl &&
    lhs.ADASSdTrnLmpLHCtrl == rhs.ADASSdTrnLmpLHCtrl &&
    lhs.ADASLowBmCtrl == rhs.ADASLowBmCtrl &&
    lhs.ADASHighBmCtrl == rhs.ADASHighBmCtrl &&
    lhs.ADASLkCtrl == rhs.ADASLkCtrl &&
    lhs.ADASRemtPrkModRqst == rhs.ADASRemtPrkModRqst &&
    lhs.BCMADASCtrlRqst == rhs.BCMADASCtrlRqst &&
    lhs.BCMADASCtrlRqstV == rhs.BCMADASCtrlRqstV;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6b699ba917a62ef652278429228a8b35";
  }

  static const char* value(const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6b699ba917a62ef6ULL;
  static const uint64_t static_value2 = 0x52278429228a8b35ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/ChassisCtrlMsg";
  }

  static const char* value(const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"\n"
"# 模块类型\n"
"uint8 module_type\n"
"\n"
"# error_code\n"
"uint32 error_code\n"
"\n"
"# 模块信息\n"
"string ctrl_command\n"
"\n"
"# IDU_General_Status_1 (0x131)->[ACAN]<-{循环计数+校验}\n"
"uint8 VclDrvModRqstV    # 驱动模式请求有效性：默认0有效(false有效)\n"
"uint8 VclDrvModRqst     # 驱动模式请求\n"
"uint8 PakBrkRqstV       # 驻车请求有效性：默认0有效(false有效)\n"
"uint8 PakBrkRqst        # IDU驻车请求\n"
"uint8 VclAclRqstV       # 加速度请求有效性：默认0有效(false有效)\n"
"uint8 BrkPressureTgtV   # 制动压力目标值有效性：默认0有效(false有效)\n"
"uint8 VclVelRqstV       # 速度请求有效性：默认0有效(false有效)\n"
"float64 VclAclRqst      # 加速度请求\n"
"float64 BrkPressureTgt  # 制动压力目标值\n"
"float64 VclVelRqst      # 速度请求\n"
"uint8 IDUFltIndOn       # IDU故障指示:默认False(不指示)\n"
"uint8 PowOnRqst         # 上电请求：默认False(不请求有效性)\n"
"uint8 VclShiftRqst      # 档位请求\n"
"\n"
"# IDU_General_Status_2 (0x121)->[CCAN]<-{循环计数+校验}\n"
"uint8 StrAglRqstV       # 期望转向角度有效性\n"
"float64 StrAglRqst      # 期望转向角度\n"
"uint8 TgtStrAglVlcV     # 期望转向角速度有效性(预留)\n"
"float64 TgtStrAglVlc    # 期望转向角速度(预留)\n"
"uint8 EPSCtrlModRqstV   # EPS控制模式请求有效性\n"
"uint8 EPSCtrlModRqst    # EPS控制模式请求\n"
"\n"
"# IDU_General_Status_4 (0x312)->[ACAN]<-{循环计数+校验}\n"
"uint8 LdskCtrl          # 扬声器控制\n"
"uint8 WndSnWpCtrl       # 雨刮控制\n"
"uint8 StpLpCtrl         # 刹车灯控制\n"
"uint8 HzdLtCtrl         # 双闪灯控制\n"
"uint8 ClerLmpCtrl       # 示廓灯控制\n"
"uint8 FogLmpCtrl        # 后雾灯控制\n"
"uint8 SdTrnLmpRHCtrl    # 右转向灯控制\n"
"uint8 SdTrnLmpLHCtrl    # 左转向灯控制\n"
"uint8 LowBmCtrl         # 近光灯控制\n"
"uint8 HighBmCtrl        # 远光灯控制\n"
"uint8 LkCtrl            # 锁控功能\n"
"uint8 CarWindCtrl       # 车窗功能控制(预留)\n"
"uint8 BCMCtrlModRqstV   # BCM控制模式请求有效性\n"
"uint8 BCMCtrlModRqst    # BCM控制模式请求\n"
"\n"
"# VT_Requestment_Messge_2 (0x316)->[BCAN] {??循环发送}\n"
"uint8 RemtPowOnRqst     # 远程上电请求\n"
"uint8 RemtPowOnRqstV    # 远程上电请求有效性：默认0有效(false有效)\n"
"uint8 RemtPowDwnRqst    # 远程下电请求\n"
"uint8 RemtPowDwnRqstV   # 远程下电请求有效性：默认0有效(false有效)\n"
"# 车辆泊车启动请求/关闭\n"
"bool CANB_ParkingStartRequest\n"
"bool CANB_ParkingCloseRequest\n"
"\n"
"# 车辆移动控制\n"
"    # ADAS_General_Status_1 (0x1D1)\n"
"uint8 ADAS_StrAngleRqstV    # ADAS期望转向角度请求有效值\n"
"float64 ADASBrakRqstPres     # ADAS制动请求压力      float->uint\n"
"uint8 EPB_ADASPrkngRqst     # EPB ADAS驻车请求\n"
"uint8 ADASStrTorqRqst       # ADAS转向扭矩请求\n"
"float64 ADASStrTorqTgt       # ADAS转向扭矩目标值    float->uint\n"
"float64 ADAS_StrAngle        # ADAS期望转向角度      float->uint\n"
"    # ADAS_General_Status_2 (0x1D2)\n"
"uint8 VCUTTgtAclrtnRqst         # VCU目标加速度请求\n"
"float64 VCUTTgtAclrtnRqstVal    # VCU目标加速度请求值\n"
"uint8 GearRqst                  # 档位请求\n"
"uint8 TgtGear                   # 档位\n"
"uint8 VCUTTgtSpRqst             # VCU目标速度请求\n"
"float64 VCUTTgtSpRqstVal        # VCU目标速度请求值\n"
"\n"
"# 车辆外设控制\n"
"    # ADAS_General_Status_11 (0x329)\n"
"uint8 ADASWndSnWpCtrl       # ADAS雨刮控制\n"
"uint8 ADASHzdLtCtrl         # ADAS双闪控制\n"
"uint8 ADASSdTrnLmpRHCtrl    # ADAS右转向控制\n"
"uint8 ADASSdTrnLmpLHCtrl    # ADAS左转向控制\n"
"uint8 ADASLowBmCtrl         # ADAS近光灯控制\n"
"uint8 ADASHighBmCtrl        # ADAS远光灯控制\n"
"uint8 ADASLkCtrl            # ADAS锁控功能\n"
"# uint8 CarWindCtrl           # ADAS车窗控制\n"
"\n"
"# 车辆ADAS请求\n"
"    # ADAS_General_Status_11 (0x329)\n"
"uint8 ADASRemtPrkModRqst    # ADAS电源模式请求\n"
"uint8 BCMADASCtrlRqst       # ADAS控制请求\n"
"uint8 BCMADASCtrlRqstV      # ADAS控制请求有效性\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.module_type);
      stream.next(m.error_code);
      stream.next(m.ctrl_command);
      stream.next(m.VclDrvModRqstV);
      stream.next(m.VclDrvModRqst);
      stream.next(m.PakBrkRqstV);
      stream.next(m.PakBrkRqst);
      stream.next(m.VclAclRqstV);
      stream.next(m.BrkPressureTgtV);
      stream.next(m.VclVelRqstV);
      stream.next(m.VclAclRqst);
      stream.next(m.BrkPressureTgt);
      stream.next(m.VclVelRqst);
      stream.next(m.IDUFltIndOn);
      stream.next(m.PowOnRqst);
      stream.next(m.VclShiftRqst);
      stream.next(m.StrAglRqstV);
      stream.next(m.StrAglRqst);
      stream.next(m.TgtStrAglVlcV);
      stream.next(m.TgtStrAglVlc);
      stream.next(m.EPSCtrlModRqstV);
      stream.next(m.EPSCtrlModRqst);
      stream.next(m.LdskCtrl);
      stream.next(m.WndSnWpCtrl);
      stream.next(m.StpLpCtrl);
      stream.next(m.HzdLtCtrl);
      stream.next(m.ClerLmpCtrl);
      stream.next(m.FogLmpCtrl);
      stream.next(m.SdTrnLmpRHCtrl);
      stream.next(m.SdTrnLmpLHCtrl);
      stream.next(m.LowBmCtrl);
      stream.next(m.HighBmCtrl);
      stream.next(m.LkCtrl);
      stream.next(m.CarWindCtrl);
      stream.next(m.BCMCtrlModRqstV);
      stream.next(m.BCMCtrlModRqst);
      stream.next(m.RemtPowOnRqst);
      stream.next(m.RemtPowOnRqstV);
      stream.next(m.RemtPowDwnRqst);
      stream.next(m.RemtPowDwnRqstV);
      stream.next(m.CANB_ParkingStartRequest);
      stream.next(m.CANB_ParkingCloseRequest);
      stream.next(m.ADAS_StrAngleRqstV);
      stream.next(m.ADASBrakRqstPres);
      stream.next(m.EPB_ADASPrkngRqst);
      stream.next(m.ADASStrTorqRqst);
      stream.next(m.ADASStrTorqTgt);
      stream.next(m.ADAS_StrAngle);
      stream.next(m.VCUTTgtAclrtnRqst);
      stream.next(m.VCUTTgtAclrtnRqstVal);
      stream.next(m.GearRqst);
      stream.next(m.TgtGear);
      stream.next(m.VCUTTgtSpRqst);
      stream.next(m.VCUTTgtSpRqstVal);
      stream.next(m.ADASWndSnWpCtrl);
      stream.next(m.ADASHzdLtCtrl);
      stream.next(m.ADASSdTrnLmpRHCtrl);
      stream.next(m.ADASSdTrnLmpLHCtrl);
      stream.next(m.ADASLowBmCtrl);
      stream.next(m.ADASHighBmCtrl);
      stream.next(m.ADASLkCtrl);
      stream.next(m.ADASRemtPrkModRqst);
      stream.next(m.BCMADASCtrlRqst);
      stream.next(m.BCMADASCtrlRqstV);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisCtrlMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::ChassisCtrlMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "module_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.module_type);
    s << indent << "error_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "ctrl_command: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ctrl_command);
    s << indent << "VclDrvModRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VclDrvModRqstV);
    s << indent << "VclDrvModRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VclDrvModRqst);
    s << indent << "PakBrkRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PakBrkRqstV);
    s << indent << "PakBrkRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PakBrkRqst);
    s << indent << "VclAclRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VclAclRqstV);
    s << indent << "BrkPressureTgtV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BrkPressureTgtV);
    s << indent << "VclVelRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VclVelRqstV);
    s << indent << "VclAclRqst: ";
    Printer<double>::stream(s, indent + "  ", v.VclAclRqst);
    s << indent << "BrkPressureTgt: ";
    Printer<double>::stream(s, indent + "  ", v.BrkPressureTgt);
    s << indent << "VclVelRqst: ";
    Printer<double>::stream(s, indent + "  ", v.VclVelRqst);
    s << indent << "IDUFltIndOn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IDUFltIndOn);
    s << indent << "PowOnRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PowOnRqst);
    s << indent << "VclShiftRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VclShiftRqst);
    s << indent << "StrAglRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.StrAglRqstV);
    s << indent << "StrAglRqst: ";
    Printer<double>::stream(s, indent + "  ", v.StrAglRqst);
    s << indent << "TgtStrAglVlcV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TgtStrAglVlcV);
    s << indent << "TgtStrAglVlc: ";
    Printer<double>::stream(s, indent + "  ", v.TgtStrAglVlc);
    s << indent << "EPSCtrlModRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPSCtrlModRqstV);
    s << indent << "EPSCtrlModRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPSCtrlModRqst);
    s << indent << "LdskCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LdskCtrl);
    s << indent << "WndSnWpCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WndSnWpCtrl);
    s << indent << "StpLpCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.StpLpCtrl);
    s << indent << "HzdLtCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HzdLtCtrl);
    s << indent << "ClerLmpCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ClerLmpCtrl);
    s << indent << "FogLmpCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FogLmpCtrl);
    s << indent << "SdTrnLmpRHCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SdTrnLmpRHCtrl);
    s << indent << "SdTrnLmpLHCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SdTrnLmpLHCtrl);
    s << indent << "LowBmCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LowBmCtrl);
    s << indent << "HighBmCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HighBmCtrl);
    s << indent << "LkCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LkCtrl);
    s << indent << "CarWindCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CarWindCtrl);
    s << indent << "BCMCtrlModRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BCMCtrlModRqstV);
    s << indent << "BCMCtrlModRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BCMCtrlModRqst);
    s << indent << "RemtPowOnRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RemtPowOnRqst);
    s << indent << "RemtPowOnRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RemtPowOnRqstV);
    s << indent << "RemtPowDwnRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RemtPowDwnRqst);
    s << indent << "RemtPowDwnRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RemtPowDwnRqstV);
    s << indent << "CANB_ParkingStartRequest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CANB_ParkingStartRequest);
    s << indent << "CANB_ParkingCloseRequest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CANB_ParkingCloseRequest);
    s << indent << "ADAS_StrAngleRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADAS_StrAngleRqstV);
    s << indent << "ADASBrakRqstPres: ";
    Printer<double>::stream(s, indent + "  ", v.ADASBrakRqstPres);
    s << indent << "EPB_ADASPrkngRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPB_ADASPrkngRqst);
    s << indent << "ADASStrTorqRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASStrTorqRqst);
    s << indent << "ADASStrTorqTgt: ";
    Printer<double>::stream(s, indent + "  ", v.ADASStrTorqTgt);
    s << indent << "ADAS_StrAngle: ";
    Printer<double>::stream(s, indent + "  ", v.ADAS_StrAngle);
    s << indent << "VCUTTgtAclrtnRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VCUTTgtAclrtnRqst);
    s << indent << "VCUTTgtAclrtnRqstVal: ";
    Printer<double>::stream(s, indent + "  ", v.VCUTTgtAclrtnRqstVal);
    s << indent << "GearRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GearRqst);
    s << indent << "TgtGear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TgtGear);
    s << indent << "VCUTTgtSpRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VCUTTgtSpRqst);
    s << indent << "VCUTTgtSpRqstVal: ";
    Printer<double>::stream(s, indent + "  ", v.VCUTTgtSpRqstVal);
    s << indent << "ADASWndSnWpCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASWndSnWpCtrl);
    s << indent << "ADASHzdLtCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASHzdLtCtrl);
    s << indent << "ADASSdTrnLmpRHCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASSdTrnLmpRHCtrl);
    s << indent << "ADASSdTrnLmpLHCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASSdTrnLmpLHCtrl);
    s << indent << "ADASLowBmCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASLowBmCtrl);
    s << indent << "ADASHighBmCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASHighBmCtrl);
    s << indent << "ADASLkCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASLkCtrl);
    s << indent << "ADASRemtPrkModRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASRemtPrkModRqst);
    s << indent << "BCMADASCtrlRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BCMADASCtrlRqst);
    s << indent << "BCMADASCtrlRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BCMADASCtrlRqstV);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_CHASSISCTRLMSG_H
