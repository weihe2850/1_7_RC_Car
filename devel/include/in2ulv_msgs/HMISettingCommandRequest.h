// Generated by gencpp from file in2ulv_msgs/HMISettingCommandRequest.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_HMISETTINGCOMMANDREQUEST_H
#define IN2ULV_MSGS_MESSAGE_HMISETTINGCOMMANDREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct HMISettingCommandRequest_
{
  typedef HMISettingCommandRequest_<ContainerAllocator> Type;

  HMISettingCommandRequest_()
    : header()
    , hmi_command_list()
    , target_point_list()
    , station_id_list()  {
    }
  HMISettingCommandRequest_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , hmi_command_list(_alloc)
    , target_point_list(_alloc)
    , station_id_list(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _hmi_command_list_type;
  _hmi_command_list_type hmi_command_list;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _target_point_list_type;
  _target_point_list_type target_point_list;

   typedef std::vector<uint32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint32_t>> _station_id_list_type;
  _station_id_list_type station_id_list;





  typedef boost::shared_ptr< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HMISettingCommandRequest_

typedef ::in2ulv_msgs::HMISettingCommandRequest_<std::allocator<void> > HMISettingCommandRequest;

typedef boost::shared_ptr< ::in2ulv_msgs::HMISettingCommandRequest > HMISettingCommandRequestPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::HMISettingCommandRequest const> HMISettingCommandRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.hmi_command_list == rhs.hmi_command_list &&
    lhs.target_point_list == rhs.target_point_list &&
    lhs.station_id_list == rhs.station_id_list;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1573f09dde17ea7bab5599fb972f8cda";
  }

  static const char* value(const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1573f09dde17ea7bULL;
  static const uint64_t static_value2 = 0xab5599fb972f8cdaULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/HMISettingCommandRequest";
  }

  static const char* value(const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"\n"
"# 指令类型序列\n"
"uint8[] hmi_command_list\n"
"\n"
"# 目标点序列\n"
"# 注意长度和 hmi_command_list 中的 HEAD_FOR_GOAL 任务数量匹配\n"
"geometry_msgs/Point[] target_point_list\n"
"\n"
"# station id\n"
"# 注意和 target_point_list 长度一致\n"
"uint32[] station_id_list\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.hmi_command_list);
      stream.next(m.target_point_list);
      stream.next(m.station_id_list);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMISettingCommandRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::HMISettingCommandRequest_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "hmi_command_list[]" << std::endl;
    for (size_t i = 0; i < v.hmi_command_list.size(); ++i)
    {
      s << indent << "  hmi_command_list[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.hmi_command_list[i]);
    }
    s << indent << "target_point_list[]" << std::endl;
    for (size_t i = 0; i < v.target_point_list.size(); ++i)
    {
      s << indent << "  target_point_list[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.target_point_list[i]);
    }
    s << indent << "station_id_list[]" << std::endl;
    for (size_t i = 0; i < v.station_id_list.size(); ++i)
    {
      s << indent << "  station_id_list[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.station_id_list[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_HMISETTINGCOMMANDREQUEST_H
