// Generated by gencpp from file in2ulv_msgs/HMISettingCommandResponse.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_HMISETTINGCOMMANDRESPONSE_H
#define IN2ULV_MSGS_MESSAGE_HMISETTINGCOMMANDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct HMISettingCommandResponse_
{
  typedef HMISettingCommandResponse_<ContainerAllocator> Type;

  HMISettingCommandResponse_()
    : receive_status(false)
    , receive_info()  {
    }
  HMISettingCommandResponse_(const ContainerAllocator& _alloc)
    : receive_status(false)
    , receive_info(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _receive_status_type;
  _receive_status_type receive_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _receive_info_type;
  _receive_info_type receive_info;





  typedef boost::shared_ptr< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> const> ConstPtr;

}; // struct HMISettingCommandResponse_

typedef ::in2ulv_msgs::HMISettingCommandResponse_<std::allocator<void> > HMISettingCommandResponse;

typedef boost::shared_ptr< ::in2ulv_msgs::HMISettingCommandResponse > HMISettingCommandResponsePtr;
typedef boost::shared_ptr< ::in2ulv_msgs::HMISettingCommandResponse const> HMISettingCommandResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator2> & rhs)
{
  return lhs.receive_status == rhs.receive_status &&
    lhs.receive_info == rhs.receive_info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad03ff939334133dc0310985baf892b0";
  }

  static const char* value(const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad03ff939334133dULL;
  static const uint64_t static_value2 = 0xc0310985baf892b0ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/HMISettingCommandResponse";
  }

  static const char* value(const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 指令接收状态\n"
"bool receive_status\n"
"\n"
"# 指令接收信息\n"
"string receive_info\n"
;
  }

  static const char* value(const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.receive_status);
      stream.next(m.receive_info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HMISettingCommandResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::HMISettingCommandResponse_<ContainerAllocator>& v)
  {
    s << indent << "receive_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.receive_status);
    s << indent << "receive_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.receive_info);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_HMISETTINGCOMMANDRESPONSE_H
