// Generated by gencpp from file in2ulv_msgs/HDMapPrimitive.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_HDMAPPRIMITIVE_H
#define IN2ULV_MSGS_MESSAGE_HDMAPPRIMITIVE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct HDMapPrimitive_
{
  typedef HDMapPrimitive_<ContainerAllocator> Type;

  HDMapPrimitive_()
    : id(0)
    , primitive_type()  {
    }
  HDMapPrimitive_(const ContainerAllocator& _alloc)
    : id(0)
    , primitive_type(_alloc)  {
  (void)_alloc;
    }



   typedef int64_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _primitive_type_type;
  _primitive_type_type primitive_type;





  typedef boost::shared_ptr< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> const> ConstPtr;

}; // struct HDMapPrimitive_

typedef ::in2ulv_msgs::HDMapPrimitive_<std::allocator<void> > HDMapPrimitive;

typedef boost::shared_ptr< ::in2ulv_msgs::HDMapPrimitive > HDMapPrimitivePtr;
typedef boost::shared_ptr< ::in2ulv_msgs::HDMapPrimitive const> HDMapPrimitiveConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.primitive_type == rhs.primitive_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "71178c1a30e0d8abc901046ed42eed0a";
  }

  static const char* value(const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x71178c1a30e0d8abULL;
  static const uint64_t static_value2 = 0xc901046ed42eed0aULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/HDMapPrimitive";
  }

  static const char* value(const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Map primitive information\n"
"int64 id\n"
"\n"
"# Type of primitive, such as lane, polygon, line.\n"
"string primitive_type\n"
;
  }

  static const char* value(const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.primitive_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HDMapPrimitive_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.id);
    s << indent << "primitive_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.primitive_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_HDMAPPRIMITIVE_H
