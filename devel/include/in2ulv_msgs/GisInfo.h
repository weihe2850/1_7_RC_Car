// Generated by gencpp from file in2ulv_msgs/GisInfo.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_GISINFO_H
#define IN2ULV_MSGS_MESSAGE_GISINFO_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct GisInfo_
{
  typedef GisInfo_<ContainerAllocator> Type;

  GisInfo_()
    : header()
    , status(0)
    , indicator_status(0)
    , gear(0)
    , x()
    , y()
    , yaw()
    , speed()  {
      x.assign(0.0);

      y.assign(0.0);

      yaw.assign(0.0);

      speed.assign(0.0);
  }
  GisInfo_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , status(0)
    , indicator_status(0)
    , gear(0)
    , x()
    , y()
    , yaw()
    , speed()  {
  (void)_alloc;
      x.assign(0.0);

      y.assign(0.0);

      yaw.assign(0.0);

      speed.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _status_type;
  _status_type status;

   typedef uint8_t _indicator_status_type;
  _indicator_status_type indicator_status;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef boost::array<double, 301>  _x_type;
  _x_type x;

   typedef boost::array<double, 301>  _y_type;
  _y_type y;

   typedef boost::array<double, 301>  _yaw_type;
  _yaw_type yaw;

   typedef boost::array<double, 301>  _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::in2ulv_msgs::GisInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::GisInfo_<ContainerAllocator> const> ConstPtr;

}; // struct GisInfo_

typedef ::in2ulv_msgs::GisInfo_<std::allocator<void> > GisInfo;

typedef boost::shared_ptr< ::in2ulv_msgs::GisInfo > GisInfoPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::GisInfo const> GisInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::GisInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::GisInfo_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::GisInfo_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.status == rhs.status &&
    lhs.indicator_status == rhs.indicator_status &&
    lhs.gear == rhs.gear &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.yaw == rhs.yaw &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::GisInfo_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::GisInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::GisInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::GisInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::GisInfo_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9625dbf880cccfdb88400ff3cfa664d";
  }

  static const char* value(const ::in2ulv_msgs::GisInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9625dbf880cccfdULL;
  static const uint64_t static_value2 = 0xb88400ff3cfa664dULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/GisInfo";
  }

  static const char* value(const ::in2ulv_msgs::GisInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"#行驶模式标志,0停止，1行驶\n"
"uint8 status\n"
"#转向灯,0不闪，1右转向灯闪，2左转向灯闪\n"
"uint8 indicator_status\n"
"#档位，0空挡，1为D档，2为R档，3为P档\n"
"uint8 gear\n"
"#GIS局部路径导航点，输出原点为（1500，1000）\n"
"float64[301] x\n"
"float64[301] y\n"
"#-PI左偏到PI右偏\n"
"float64[301] yaw\n"
"#对应导航点期望速度\n"
"float64[301] speed\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::GisInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.status);
      stream.next(m.indicator_status);
      stream.next(m.gear);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GisInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::GisInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::GisInfo_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "indicator_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.indicator_status);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "y[]" << std::endl;
    for (size_t i = 0; i < v.y.size(); ++i)
    {
      s << indent << "  y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.y[i]);
    }
    s << indent << "yaw[]" << std::endl;
    for (size_t i = 0; i < v.yaw.size(); ++i)
    {
      s << indent << "  yaw[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.yaw[i]);
    }
    s << indent << "speed[]" << std::endl;
    for (size_t i = 0; i < v.speed.size(); ++i)
    {
      s << indent << "  speed[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.speed[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_GISINFO_H
