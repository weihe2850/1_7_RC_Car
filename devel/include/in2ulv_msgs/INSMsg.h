// Generated by gencpp from file in2ulv_msgs/INSMsg.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_INSMSG_H
#define IN2ULV_MSGS_MESSAGE_INSMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct INSMsg_
{
  typedef INSMsg_<ContainerAllocator> Type;

  INSMsg_()
    : header()
    , module_type(0)
    , error_code(0)
    , ins_data()
    , ACC_X(0)
    , ACC_Y(0)
    , ACC_Z(0)
    , GYRO_X(0)
    , GYRO_Y(0)
    , GYRO_Z(0)
    , INS_PitchAngle(0)
    , INS_RollAngle(0)
    , INS_HeadingAngle(0)
    , INS_LocatHeight(0)
    , INS_Time(0)
    , INS_Latitude(0)
    , INS_Longitude(0)
    , INS_NorthSpd(0)
    , INS_EastSpd(0)
    , INS_ToGroundSpd(0)
    , INS_GpsFlag_Pos(0)
    , INS_NumSV(0)
    , INS_GpsFlag_Heading(0)
    , INS_Gps_Age(0)
    , INS_Car_Status(0)
    , INS_Status(0)
    , INS_Std_Lat(0)
    , INS_Std_Lon(0)
    , INS_Std_LocatHeight(0)
    , INS_Std_Heading(0)  {
    }
  INSMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , module_type(0)
    , error_code(0)
    , ins_data(_alloc)
    , ACC_X(0)
    , ACC_Y(0)
    , ACC_Z(0)
    , GYRO_X(0)
    , GYRO_Y(0)
    , GYRO_Z(0)
    , INS_PitchAngle(0)
    , INS_RollAngle(0)
    , INS_HeadingAngle(0)
    , INS_LocatHeight(0)
    , INS_Time(0)
    , INS_Latitude(0)
    , INS_Longitude(0)
    , INS_NorthSpd(0)
    , INS_EastSpd(0)
    , INS_ToGroundSpd(0)
    , INS_GpsFlag_Pos(0)
    , INS_NumSV(0)
    , INS_GpsFlag_Heading(0)
    , INS_Gps_Age(0)
    , INS_Car_Status(0)
    , INS_Status(0)
    , INS_Std_Lat(0)
    , INS_Std_Lon(0)
    , INS_Std_LocatHeight(0)
    , INS_Std_Heading(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _module_type_type;
  _module_type_type module_type;

   typedef uint32_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _ins_data_type;
  _ins_data_type ins_data;

   typedef uint16_t _ACC_X_type;
  _ACC_X_type ACC_X;

   typedef uint16_t _ACC_Y_type;
  _ACC_Y_type ACC_Y;

   typedef uint16_t _ACC_Z_type;
  _ACC_Z_type ACC_Z;

   typedef uint16_t _GYRO_X_type;
  _GYRO_X_type GYRO_X;

   typedef uint16_t _GYRO_Y_type;
  _GYRO_Y_type GYRO_Y;

   typedef uint16_t _GYRO_Z_type;
  _GYRO_Z_type GYRO_Z;

   typedef uint16_t _INS_PitchAngle_type;
  _INS_PitchAngle_type INS_PitchAngle;

   typedef uint16_t _INS_RollAngle_type;
  _INS_RollAngle_type INS_RollAngle;

   typedef uint16_t _INS_HeadingAngle_type;
  _INS_HeadingAngle_type INS_HeadingAngle;

   typedef uint32_t _INS_LocatHeight_type;
  _INS_LocatHeight_type INS_LocatHeight;

   typedef uint32_t _INS_Time_type;
  _INS_Time_type INS_Time;

   typedef uint32_t _INS_Latitude_type;
  _INS_Latitude_type INS_Latitude;

   typedef uint32_t _INS_Longitude_type;
  _INS_Longitude_type INS_Longitude;

   typedef uint16_t _INS_NorthSpd_type;
  _INS_NorthSpd_type INS_NorthSpd;

   typedef uint16_t _INS_EastSpd_type;
  _INS_EastSpd_type INS_EastSpd;

   typedef uint16_t _INS_ToGroundSpd_type;
  _INS_ToGroundSpd_type INS_ToGroundSpd;

   typedef uint8_t _INS_GpsFlag_Pos_type;
  _INS_GpsFlag_Pos_type INS_GpsFlag_Pos;

   typedef uint8_t _INS_NumSV_type;
  _INS_NumSV_type INS_NumSV;

   typedef uint8_t _INS_GpsFlag_Heading_type;
  _INS_GpsFlag_Heading_type INS_GpsFlag_Heading;

   typedef uint8_t _INS_Gps_Age_type;
  _INS_Gps_Age_type INS_Gps_Age;

   typedef uint8_t _INS_Car_Status_type;
  _INS_Car_Status_type INS_Car_Status;

   typedef uint8_t _INS_Status_type;
  _INS_Status_type INS_Status;

   typedef uint16_t _INS_Std_Lat_type;
  _INS_Std_Lat_type INS_Std_Lat;

   typedef uint16_t _INS_Std_Lon_type;
  _INS_Std_Lon_type INS_Std_Lon;

   typedef uint16_t _INS_Std_LocatHeight_type;
  _INS_Std_LocatHeight_type INS_Std_LocatHeight;

   typedef uint16_t _INS_Std_Heading_type;
  _INS_Std_Heading_type INS_Std_Heading;





  typedef boost::shared_ptr< ::in2ulv_msgs::INSMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::INSMsg_<ContainerAllocator> const> ConstPtr;

}; // struct INSMsg_

typedef ::in2ulv_msgs::INSMsg_<std::allocator<void> > INSMsg;

typedef boost::shared_ptr< ::in2ulv_msgs::INSMsg > INSMsgPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::INSMsg const> INSMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::INSMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::INSMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::INSMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.module_type == rhs.module_type &&
    lhs.error_code == rhs.error_code &&
    lhs.ins_data == rhs.ins_data &&
    lhs.ACC_X == rhs.ACC_X &&
    lhs.ACC_Y == rhs.ACC_Y &&
    lhs.ACC_Z == rhs.ACC_Z &&
    lhs.GYRO_X == rhs.GYRO_X &&
    lhs.GYRO_Y == rhs.GYRO_Y &&
    lhs.GYRO_Z == rhs.GYRO_Z &&
    lhs.INS_PitchAngle == rhs.INS_PitchAngle &&
    lhs.INS_RollAngle == rhs.INS_RollAngle &&
    lhs.INS_HeadingAngle == rhs.INS_HeadingAngle &&
    lhs.INS_LocatHeight == rhs.INS_LocatHeight &&
    lhs.INS_Time == rhs.INS_Time &&
    lhs.INS_Latitude == rhs.INS_Latitude &&
    lhs.INS_Longitude == rhs.INS_Longitude &&
    lhs.INS_NorthSpd == rhs.INS_NorthSpd &&
    lhs.INS_EastSpd == rhs.INS_EastSpd &&
    lhs.INS_ToGroundSpd == rhs.INS_ToGroundSpd &&
    lhs.INS_GpsFlag_Pos == rhs.INS_GpsFlag_Pos &&
    lhs.INS_NumSV == rhs.INS_NumSV &&
    lhs.INS_GpsFlag_Heading == rhs.INS_GpsFlag_Heading &&
    lhs.INS_Gps_Age == rhs.INS_Gps_Age &&
    lhs.INS_Car_Status == rhs.INS_Car_Status &&
    lhs.INS_Status == rhs.INS_Status &&
    lhs.INS_Std_Lat == rhs.INS_Std_Lat &&
    lhs.INS_Std_Lon == rhs.INS_Std_Lon &&
    lhs.INS_Std_LocatHeight == rhs.INS_Std_LocatHeight &&
    lhs.INS_Std_Heading == rhs.INS_Std_Heading;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::INSMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::INSMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::INSMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::INSMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::INSMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7becfa5a7d632c7c67b72fd6b667376f";
  }

  static const char* value(const ::in2ulv_msgs::INSMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7becfa5a7d632c7cULL;
  static const uint64_t static_value2 = 0x67b72fd6b667376fULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/INSMsg";
  }

  static const char* value(const ::in2ulv_msgs::INSMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"\n"
"# 模块类型\n"
"uint8 module_type\n"
"\n"
"# error_code\n"
"uint32 error_code\n"
"\n"
"# 模块信息\n"
"string ins_data\n"
"\n"
"# INS_Acc (0X500)\n"
"uint16 ACC_X\n"
"uint16 ACC_Y\n"
"uint16 ACC_Z\n"
"\n"
"# INS_GYRO (0X501)\n"
"uint16 GYRO_X\n"
"uint16 GYRO_Y\n"
"uint16 GYRO_Z\n"
"\n"
"# INS_HeadingPitchRoll (0X502)\n"
"uint16 INS_PitchAngle\n"
"uint16 INS_RollAngle\n"
"uint16 INS_HeadingAngle\n"
"\n"
"# INS_HeightAndTime (0X503)\n"
"uint32 INS_LocatHeight\n"
"uint32 INS_Time\n"
"\n"
"# INS_LatitudeLongitude (0X504)\n"
"uint32 INS_Latitude\n"
"uint32 INS_Longitude\n"
"\n"
"# INS_Speed (0X505)\n"
"uint16 INS_NorthSpd\n"
"uint16 INS_EastSpd\n"
"uint16 INS_ToGroundSpd\n"
"\n"
"# INS_DataInfo (0X506)\n"
"uint8 INS_GpsFlag_Pos\n"
"uint8 INS_NumSV     #星数\n"
"uint8 INS_GpsFlag_Heading\n"
"uint8 INS_Gps_Age\n"
"uint8 INS_Car_Status\n"
"uint8 INS_Status\n"
"\n"
"# INS_Std (0X507)\n"
"uint16 INS_Std_Lat\n"
"uint16 INS_Std_Lon\n"
"uint16 INS_Std_LocatHeight\n"
"uint16 INS_Std_Heading\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::INSMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.module_type);
      stream.next(m.error_code);
      stream.next(m.ins_data);
      stream.next(m.ACC_X);
      stream.next(m.ACC_Y);
      stream.next(m.ACC_Z);
      stream.next(m.GYRO_X);
      stream.next(m.GYRO_Y);
      stream.next(m.GYRO_Z);
      stream.next(m.INS_PitchAngle);
      stream.next(m.INS_RollAngle);
      stream.next(m.INS_HeadingAngle);
      stream.next(m.INS_LocatHeight);
      stream.next(m.INS_Time);
      stream.next(m.INS_Latitude);
      stream.next(m.INS_Longitude);
      stream.next(m.INS_NorthSpd);
      stream.next(m.INS_EastSpd);
      stream.next(m.INS_ToGroundSpd);
      stream.next(m.INS_GpsFlag_Pos);
      stream.next(m.INS_NumSV);
      stream.next(m.INS_GpsFlag_Heading);
      stream.next(m.INS_Gps_Age);
      stream.next(m.INS_Car_Status);
      stream.next(m.INS_Status);
      stream.next(m.INS_Std_Lat);
      stream.next(m.INS_Std_Lon);
      stream.next(m.INS_Std_LocatHeight);
      stream.next(m.INS_Std_Heading);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct INSMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::INSMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::INSMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "module_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.module_type);
    s << indent << "error_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "ins_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.ins_data);
    s << indent << "ACC_X: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ACC_X);
    s << indent << "ACC_Y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ACC_Y);
    s << indent << "ACC_Z: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ACC_Z);
    s << indent << "GYRO_X: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.GYRO_X);
    s << indent << "GYRO_Y: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.GYRO_Y);
    s << indent << "GYRO_Z: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.GYRO_Z);
    s << indent << "INS_PitchAngle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_PitchAngle);
    s << indent << "INS_RollAngle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_RollAngle);
    s << indent << "INS_HeadingAngle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_HeadingAngle);
    s << indent << "INS_LocatHeight: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.INS_LocatHeight);
    s << indent << "INS_Time: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.INS_Time);
    s << indent << "INS_Latitude: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.INS_Latitude);
    s << indent << "INS_Longitude: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.INS_Longitude);
    s << indent << "INS_NorthSpd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_NorthSpd);
    s << indent << "INS_EastSpd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_EastSpd);
    s << indent << "INS_ToGroundSpd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_ToGroundSpd);
    s << indent << "INS_GpsFlag_Pos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INS_GpsFlag_Pos);
    s << indent << "INS_NumSV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INS_NumSV);
    s << indent << "INS_GpsFlag_Heading: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INS_GpsFlag_Heading);
    s << indent << "INS_Gps_Age: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INS_Gps_Age);
    s << indent << "INS_Car_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INS_Car_Status);
    s << indent << "INS_Status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.INS_Status);
    s << indent << "INS_Std_Lat: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_Std_Lat);
    s << indent << "INS_Std_Lon: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_Std_Lon);
    s << indent << "INS_Std_LocatHeight: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_Std_LocatHeight);
    s << indent << "INS_Std_Heading: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.INS_Std_Heading);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_INSMSG_H
