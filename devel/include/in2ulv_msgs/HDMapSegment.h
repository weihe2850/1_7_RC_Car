// Generated by gencpp from file in2ulv_msgs/HDMapSegment.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_HDMAPSEGMENT_H
#define IN2ULV_MSGS_MESSAGE_HDMAPSEGMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <in2ulv_msgs/HDMapPrimitive.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct HDMapSegment_
{
  typedef HDMapSegment_<ContainerAllocator> Type;

  HDMapSegment_()
    : primitives()
    , preferred_primitive_id(0)  {
    }
  HDMapSegment_(const ContainerAllocator& _alloc)
    : primitives(_alloc)
    , preferred_primitive_id(0)  {
  (void)_alloc;
    }



   typedef std::vector< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >> _primitives_type;
  _primitives_type primitives;

   typedef int64_t _preferred_primitive_id_type;
  _preferred_primitive_id_type preferred_primitive_id;





  typedef boost::shared_ptr< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> const> ConstPtr;

}; // struct HDMapSegment_

typedef ::in2ulv_msgs::HDMapSegment_<std::allocator<void> > HDMapSegment;

typedef boost::shared_ptr< ::in2ulv_msgs::HDMapSegment > HDMapSegmentPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::HDMapSegment const> HDMapSegmentConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator2> & rhs)
{
  return lhs.primitives == rhs.primitives &&
    lhs.preferred_primitive_id == rhs.preferred_primitive_id;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2c0eed8a8c4b7028940231461cac864";
  }

  static const char* value(const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2c0eed8a8c4b702ULL;
  static const uint64_t static_value2 = 0x8940231461cac864ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/HDMapSegment";
  }

  static const char* value(const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A segment of an HDMap which contains one or more MapPrimitives.\n"
"in2ulv_msgs/HDMapPrimitive[] primitives\n"
"\n"
"int64 preferred_primitive_id\n"
"\n"
"================================================================================\n"
"MSG: in2ulv_msgs/HDMapPrimitive\n"
"# Map primitive information\n"
"int64 id\n"
"\n"
"# Type of primitive, such as lane, polygon, line.\n"
"string primitive_type\n"
;
  }

  static const char* value(const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.primitives);
      stream.next(m.preferred_primitive_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HDMapSegment_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::HDMapSegment_<ContainerAllocator>& v)
  {
    s << indent << "primitives[]" << std::endl;
    for (size_t i = 0; i < v.primitives.size(); ++i)
    {
      s << indent << "  primitives[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::in2ulv_msgs::HDMapPrimitive_<ContainerAllocator> >::stream(s, indent + "    ", v.primitives[i]);
    }
    s << indent << "preferred_primitive_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.preferred_primitive_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_HDMAPSEGMENT_H
