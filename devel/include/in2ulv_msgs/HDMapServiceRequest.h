// Generated by gencpp from file in2ulv_msgs/HDMapServiceRequest.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_HDMAPSERVICEREQUEST_H
#define IN2ULV_MSGS_MESSAGE_HDMAPSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct HDMapServiceRequest_
{
  typedef HDMapServiceRequest_<ContainerAllocator> Type;

  HDMapServiceRequest_()
    : requested_primitives()
    , geom_upper_bound()
    , geom_lower_bound()  {
      geom_upper_bound.assign(0.0);

      geom_lower_bound.assign(0.0);
  }
  HDMapServiceRequest_(const ContainerAllocator& _alloc)
    : requested_primitives(_alloc)
    , geom_upper_bound()
    , geom_lower_bound()  {
  (void)_alloc;
      geom_upper_bound.assign(0.0);

      geom_lower_bound.assign(0.0);
  }



   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _requested_primitives_type;
  _requested_primitives_type requested_primitives;

   typedef boost::array<double, 3>  _geom_upper_bound_type;
  _geom_upper_bound_type geom_upper_bound;

   typedef boost::array<double, 3>  _geom_lower_bound_type;
  _geom_lower_bound_type geom_lower_bound;





  typedef boost::shared_ptr< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct HDMapServiceRequest_

typedef ::in2ulv_msgs::HDMapServiceRequest_<std::allocator<void> > HDMapServiceRequest;

typedef boost::shared_ptr< ::in2ulv_msgs::HDMapServiceRequest > HDMapServiceRequestPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::HDMapServiceRequest const> HDMapServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.requested_primitives == rhs.requested_primitives &&
    lhs.geom_upper_bound == rhs.geom_upper_bound &&
    lhs.geom_lower_bound == rhs.geom_lower_bound;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c660a0397124ea4da3a97b3b441770e7";
  }

  static const char* value(const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc660a0397124ea4dULL;
  static const uint64_t static_value2 = 0xa3a97b3b441770e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/HDMapServiceRequest";
  }

  static const char* value(const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8[] requested_primitives\n"
"\n"
"# Geometric upper bound of map data requested\n"
"float64[3] geom_upper_bound\n"
"\n"
"# Geometric lower bound of map data requested\n"
"float64[3] geom_lower_bound\n"
"\n"
;
  }

  static const char* value(const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.requested_primitives);
      stream.next(m.geom_upper_bound);
      stream.next(m.geom_lower_bound);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HDMapServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::HDMapServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "requested_primitives[]" << std::endl;
    for (size_t i = 0; i < v.requested_primitives.size(); ++i)
    {
      s << indent << "  requested_primitives[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.requested_primitives[i]);
    }
    s << indent << "geom_upper_bound[]" << std::endl;
    for (size_t i = 0; i < v.geom_upper_bound.size(); ++i)
    {
      s << indent << "  geom_upper_bound[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.geom_upper_bound[i]);
    }
    s << indent << "geom_lower_bound[]" << std::endl;
    for (size_t i = 0; i < v.geom_lower_bound.size(); ++i)
    {
      s << indent << "  geom_lower_bound[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.geom_lower_bound[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_HDMAPSERVICEREQUEST_H
