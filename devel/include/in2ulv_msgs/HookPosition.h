// Generated by gencpp from file in2ulv_msgs/HookPosition.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_HOOKPOSITION_H
#define IN2ULV_MSGS_MESSAGE_HOOKPOSITION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct HookPosition_
{
  typedef HookPosition_<ContainerAllocator> Type;

  HookPosition_()
    : header()
    , position_flag(0)
    , hook_position(0.0)
    , hook_offset(0)  {
    }
  HookPosition_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position_flag(0)
    , hook_position(0.0)
    , hook_offset(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _position_flag_type;
  _position_flag_type position_flag;

   typedef float _hook_position_type;
  _hook_position_type hook_position;

   typedef int16_t _hook_offset_type;
  _hook_offset_type hook_offset;





  typedef boost::shared_ptr< ::in2ulv_msgs::HookPosition_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::HookPosition_<ContainerAllocator> const> ConstPtr;

}; // struct HookPosition_

typedef ::in2ulv_msgs::HookPosition_<std::allocator<void> > HookPosition;

typedef boost::shared_ptr< ::in2ulv_msgs::HookPosition > HookPositionPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::HookPosition const> HookPositionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::HookPosition_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::HookPosition_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HookPosition_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position_flag == rhs.position_flag &&
    lhs.hook_position == rhs.hook_position &&
    lhs.hook_offset == rhs.hook_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::HookPosition_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HookPosition_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HookPosition_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HookPosition_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HookPosition_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d2da94a5865fbfe6adbdd32d2335a6b5";
  }

  static const char* value(const ::in2ulv_msgs::HookPosition_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd2da94a5865fbfe6ULL;
  static const uint64_t static_value2 = 0xadbdd32d2335a6b5ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/HookPosition";
  }

  static const char* value(const ::in2ulv_msgs::HookPosition_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"uint8 position_flag\n"
"\n"
"# 挂钩位置（cm）\n"
"float32 hook_position\n"
"\n"
"# 挂钩纠偏值（-300 ~ 300 mm）\n"
"int16 hook_offset\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::HookPosition_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position_flag);
      stream.next(m.hook_position);
      stream.next(m.hook_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HookPosition_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::HookPosition_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::HookPosition_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_flag);
    s << indent << "hook_position: ";
    Printer<float>::stream(s, indent + "  ", v.hook_position);
    s << indent << "hook_offset: ";
    Printer<int16_t>::stream(s, indent + "  ", v.hook_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_HOOKPOSITION_H
