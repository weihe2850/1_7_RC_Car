// Generated by gencpp from file in2ulv_msgs/ChassisMsg.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_CHASSISMSG_H
#define IN2ULV_MSGS_MESSAGE_CHASSISMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct ChassisMsg_
{
  typedef ChassisMsg_<ContainerAllocator> Type;

  ChassisMsg_()
    : header()
    , module_type(0)
    , error_code(0)
    , chassis_data()
    , TMTorqRqstV(0)
    , TMTorqRqst(0.0)
    , HandBrkSts(0)
    , VecStatRdy(0)
    , KyPstn(0)
    , VecSOC(0)
    , VehSpdAvgDrvnV(0)
    , VehSpdAvgDrvn(0.0)
    , VecTMActSpdV(0)
    , VecTMActSpd(0)
    , VCUVehDrvMod(0)
    , LowBatVol(0.0)
    , BatSOC(0)
    , HhBmIO(0)
    , WindscenWipSt(0)
    , LwBmIO(0)
    , HzrdLgtSwAtv(0)
    , HzrdLtIO(0)
    , RtTrnLmpAtv(0)
    , LftTrnLmpAtv(0)
    , WipSwStat(0)
    , StpLpSt(0)
    , is_left_blinking(false)
    , is_right_blinking(false)
    , DrSbltAtc(0)
    , DrSbltAtcV(0)
    , TDAjrSwAtv(0)
    , PsDoorOpenSwAct(0)
    , PDAjrSwAtv(0)
    , DrDoorOpenSwAct(0)
    , DDAjrSwAct(0)
    , PsWdwOpenDgr(0.0)
    , DrWdwOpenDgr(0.0)
    , BCMRunMod(0)
    , BCMRunModV(0)
    , EPBSysWrnIndReq_1(0)
    , EPBSysWrnIndReqV_1(0)
    , EPBSysBrkLtsReq_1(0)
    , EPBSysStatIndReq_1(0)
    , ElecPrkBrkSwStatV_1(0)
    , ElecPrkBrkStat_1(0)
    , ElecPrkBrkSwStat_1(0)
    , ADASWndSnWpCtrl(0)
    , ADASHzdLtCtrl(0)
    , ADASSdTrnLmpRHCtrl(0)
    , ADASSdTrnLmpLHCtrl(0)
    , ADASLowBmCtrl(0)
    , ADASHighBmCtrl(0)
    , ADASLkCtrl(0)
    , CarWindCtrl(0)
    , ADASRemtPrkModRqst(0)
    , BCMADASCtrlRqst(0)
    , BCMADASCtrlRqstV(0)
    , TMActTorq(0.0)
    , TMActSpd(0)
    , VSELatAccV(0)
    , VSELatAcc(0.0)
    , VSELongAccV(0)
    , VSELongAcc(0.0)
    , VehOdo(0.0)
    , VehOdoV(0)
    , BrakPedalPos(0)
    , AccActPos(0)
    , VecActGearStsV(0)
    , VecActGearSts(0)
    , StrWhAngV(0)
    , StrWhAng(0.0)
    , EPSProId(0)
    , PwrStrIo(0)
    , SterModV(0)
    , SterMod(0)
    , EPS_LKARespTorq(0.0)
    , SterFltMod(0)
    , DrStrTorqV(0)
    , DrStrTorqVal(0.0)
    , SteerWheelRotSpd(0)
    , SteerWheelAngle(0.0)
    , ElecPrkBrkStat(0)
    , WhlGrndVlctyLftDrvnV(0)
    , WhlGrndVlctyLftDrvn(0.0)
    , WhlGrndVlctyRtDrvnV(0)
    , WhlGrndVlctyRtDrvn(0.0)
    , WhlGrndVlctyLftNnDrvnV(0)
    , WhlGrndVlctyLftNnDrvn(0.0)
    , WhlGrndVlctyRtNnDrvnV(0)
    , WhlGrndVlctyRtNnDrvn(0.0)
    , LftDrvnWhlDirec(0)
    , WhlGrndPlsLftDrvnV(0)
    , WhlGrndPlsLftDrvn(0)
    , RtDrvnWhlDirec(0)
    , WhlGrndPlsRtDrvnV(0)
    , WhlGrndPlsRtDrvn(0)
    , LftNnDrvnWhlDirec(0)
    , WhlGrndPlsLftNnDrvnV(0)
    , WhlGrndPlsLftNnDrvn(0)
    , RtNnDrvnWhlDirec(0)
    , WhlGrndPlsRtNnDrvnV(0)
    , WhlGrndPlsRtNnDrvn(0)
    , BBWSts(0)
    , EBSDrvMod(0)
    , IDURqst(0)
    , EBSMCBrPressure(0)
    , BrakPedalDisp(0)
    , ADAS_StrAngleRqstV(0)
    , ADASBrakRqstPres(0)
    , EPB_ADASPrkngRqst(0)
    , ADASStrTorqRqst(0)
    , ADASStrTorqTgt(0)
    , ADAS_StrAngle(0)
    , VCUTTgtAclrtnRqst(0)
    , VCUTTgtAclrtnRqstVal(0.0)
    , GearRqst(0)
    , TgtGear(0)
    , VCUTTgtSpRqst(0)
    , VCUTTgtSpRqstVal(0.0)
    , SensSt_1st(0)
    , DisFrm1stFrtSens(0)
    , SensSt_2nd(0)
    , DisFrm2ndFrtSens(0)
    , SensSt_3rd(0)
    , DisFrm3rdFrtSens(0)
    , SensSt_4th(0)
    , DisFrm4thFrtSens(0)
    , SensSt_5th(0)
    , DisFrm5thFrtSens(0)
    , SensSt_6th(0)
    , DisFrm6thFrtSens(0)
    , SensSt_7th(0)
    , DisFrm7thFrtSens(0)
    , SensSt_8th(0)
    , DisFrm8thFrtSens(0)
    , SensSt_9th(0)
    , DisFrm9thFrtSens(0)
    , SensSt_10th(0)
    , DisFrm10thFrtSens(0)
    , SensSt_11th(0)
    , DisFrm11thFrtSens(0)
    , SensSt_12th(0)
    , DisFrm12thFrtSens(0)  {
    }
  ChassisMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , module_type(0)
    , error_code(0)
    , chassis_data(_alloc)
    , TMTorqRqstV(0)
    , TMTorqRqst(0.0)
    , HandBrkSts(0)
    , VecStatRdy(0)
    , KyPstn(0)
    , VecSOC(0)
    , VehSpdAvgDrvnV(0)
    , VehSpdAvgDrvn(0.0)
    , VecTMActSpdV(0)
    , VecTMActSpd(0)
    , VCUVehDrvMod(0)
    , LowBatVol(0.0)
    , BatSOC(0)
    , HhBmIO(0)
    , WindscenWipSt(0)
    , LwBmIO(0)
    , HzrdLgtSwAtv(0)
    , HzrdLtIO(0)
    , RtTrnLmpAtv(0)
    , LftTrnLmpAtv(0)
    , WipSwStat(0)
    , StpLpSt(0)
    , is_left_blinking(false)
    , is_right_blinking(false)
    , DrSbltAtc(0)
    , DrSbltAtcV(0)
    , TDAjrSwAtv(0)
    , PsDoorOpenSwAct(0)
    , PDAjrSwAtv(0)
    , DrDoorOpenSwAct(0)
    , DDAjrSwAct(0)
    , PsWdwOpenDgr(0.0)
    , DrWdwOpenDgr(0.0)
    , BCMRunMod(0)
    , BCMRunModV(0)
    , EPBSysWrnIndReq_1(0)
    , EPBSysWrnIndReqV_1(0)
    , EPBSysBrkLtsReq_1(0)
    , EPBSysStatIndReq_1(0)
    , ElecPrkBrkSwStatV_1(0)
    , ElecPrkBrkStat_1(0)
    , ElecPrkBrkSwStat_1(0)
    , ADASWndSnWpCtrl(0)
    , ADASHzdLtCtrl(0)
    , ADASSdTrnLmpRHCtrl(0)
    , ADASSdTrnLmpLHCtrl(0)
    , ADASLowBmCtrl(0)
    , ADASHighBmCtrl(0)
    , ADASLkCtrl(0)
    , CarWindCtrl(0)
    , ADASRemtPrkModRqst(0)
    , BCMADASCtrlRqst(0)
    , BCMADASCtrlRqstV(0)
    , TMActTorq(0.0)
    , TMActSpd(0)
    , VSELatAccV(0)
    , VSELatAcc(0.0)
    , VSELongAccV(0)
    , VSELongAcc(0.0)
    , VehOdo(0.0)
    , VehOdoV(0)
    , BrakPedalPos(0)
    , AccActPos(0)
    , VecActGearStsV(0)
    , VecActGearSts(0)
    , StrWhAngV(0)
    , StrWhAng(0.0)
    , EPSProId(0)
    , PwrStrIo(0)
    , SterModV(0)
    , SterMod(0)
    , EPS_LKARespTorq(0.0)
    , SterFltMod(0)
    , DrStrTorqV(0)
    , DrStrTorqVal(0.0)
    , SteerWheelRotSpd(0)
    , SteerWheelAngle(0.0)
    , ElecPrkBrkStat(0)
    , WhlGrndVlctyLftDrvnV(0)
    , WhlGrndVlctyLftDrvn(0.0)
    , WhlGrndVlctyRtDrvnV(0)
    , WhlGrndVlctyRtDrvn(0.0)
    , WhlGrndVlctyLftNnDrvnV(0)
    , WhlGrndVlctyLftNnDrvn(0.0)
    , WhlGrndVlctyRtNnDrvnV(0)
    , WhlGrndVlctyRtNnDrvn(0.0)
    , LftDrvnWhlDirec(0)
    , WhlGrndPlsLftDrvnV(0)
    , WhlGrndPlsLftDrvn(0)
    , RtDrvnWhlDirec(0)
    , WhlGrndPlsRtDrvnV(0)
    , WhlGrndPlsRtDrvn(0)
    , LftNnDrvnWhlDirec(0)
    , WhlGrndPlsLftNnDrvnV(0)
    , WhlGrndPlsLftNnDrvn(0)
    , RtNnDrvnWhlDirec(0)
    , WhlGrndPlsRtNnDrvnV(0)
    , WhlGrndPlsRtNnDrvn(0)
    , BBWSts(0)
    , EBSDrvMod(0)
    , IDURqst(0)
    , EBSMCBrPressure(0)
    , BrakPedalDisp(0)
    , ADAS_StrAngleRqstV(0)
    , ADASBrakRqstPres(0)
    , EPB_ADASPrkngRqst(0)
    , ADASStrTorqRqst(0)
    , ADASStrTorqTgt(0)
    , ADAS_StrAngle(0)
    , VCUTTgtAclrtnRqst(0)
    , VCUTTgtAclrtnRqstVal(0.0)
    , GearRqst(0)
    , TgtGear(0)
    , VCUTTgtSpRqst(0)
    , VCUTTgtSpRqstVal(0.0)
    , SensSt_1st(0)
    , DisFrm1stFrtSens(0)
    , SensSt_2nd(0)
    , DisFrm2ndFrtSens(0)
    , SensSt_3rd(0)
    , DisFrm3rdFrtSens(0)
    , SensSt_4th(0)
    , DisFrm4thFrtSens(0)
    , SensSt_5th(0)
    , DisFrm5thFrtSens(0)
    , SensSt_6th(0)
    , DisFrm6thFrtSens(0)
    , SensSt_7th(0)
    , DisFrm7thFrtSens(0)
    , SensSt_8th(0)
    , DisFrm8thFrtSens(0)
    , SensSt_9th(0)
    , DisFrm9thFrtSens(0)
    , SensSt_10th(0)
    , DisFrm10thFrtSens(0)
    , SensSt_11th(0)
    , DisFrm11thFrtSens(0)
    , SensSt_12th(0)
    , DisFrm12thFrtSens(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _module_type_type;
  _module_type_type module_type;

   typedef uint32_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _chassis_data_type;
  _chassis_data_type chassis_data;

   typedef uint8_t _TMTorqRqstV_type;
  _TMTorqRqstV_type TMTorqRqstV;

   typedef double _TMTorqRqst_type;
  _TMTorqRqst_type TMTorqRqst;

   typedef uint8_t _HandBrkSts_type;
  _HandBrkSts_type HandBrkSts;

   typedef uint8_t _VecStatRdy_type;
  _VecStatRdy_type VecStatRdy;

   typedef uint8_t _KyPstn_type;
  _KyPstn_type KyPstn;

   typedef uint8_t _VecSOC_type;
  _VecSOC_type VecSOC;

   typedef uint8_t _VehSpdAvgDrvnV_type;
  _VehSpdAvgDrvnV_type VehSpdAvgDrvnV;

   typedef double _VehSpdAvgDrvn_type;
  _VehSpdAvgDrvn_type VehSpdAvgDrvn;

   typedef uint8_t _VecTMActSpdV_type;
  _VecTMActSpdV_type VecTMActSpdV;

   typedef uint16_t _VecTMActSpd_type;
  _VecTMActSpd_type VecTMActSpd;

   typedef uint8_t _VCUVehDrvMod_type;
  _VCUVehDrvMod_type VCUVehDrvMod;

   typedef double _LowBatVol_type;
  _LowBatVol_type LowBatVol;

   typedef uint8_t _BatSOC_type;
  _BatSOC_type BatSOC;

   typedef uint8_t _HhBmIO_type;
  _HhBmIO_type HhBmIO;

   typedef uint8_t _WindscenWipSt_type;
  _WindscenWipSt_type WindscenWipSt;

   typedef uint8_t _LwBmIO_type;
  _LwBmIO_type LwBmIO;

   typedef uint8_t _HzrdLgtSwAtv_type;
  _HzrdLgtSwAtv_type HzrdLgtSwAtv;

   typedef uint8_t _HzrdLtIO_type;
  _HzrdLtIO_type HzrdLtIO;

   typedef uint8_t _RtTrnLmpAtv_type;
  _RtTrnLmpAtv_type RtTrnLmpAtv;

   typedef uint8_t _LftTrnLmpAtv_type;
  _LftTrnLmpAtv_type LftTrnLmpAtv;

   typedef uint8_t _WipSwStat_type;
  _WipSwStat_type WipSwStat;

   typedef uint8_t _StpLpSt_type;
  _StpLpSt_type StpLpSt;

   typedef uint8_t _is_left_blinking_type;
  _is_left_blinking_type is_left_blinking;

   typedef uint8_t _is_right_blinking_type;
  _is_right_blinking_type is_right_blinking;

   typedef uint8_t _DrSbltAtc_type;
  _DrSbltAtc_type DrSbltAtc;

   typedef uint8_t _DrSbltAtcV_type;
  _DrSbltAtcV_type DrSbltAtcV;

   typedef uint8_t _TDAjrSwAtv_type;
  _TDAjrSwAtv_type TDAjrSwAtv;

   typedef uint8_t _PsDoorOpenSwAct_type;
  _PsDoorOpenSwAct_type PsDoorOpenSwAct;

   typedef uint8_t _PDAjrSwAtv_type;
  _PDAjrSwAtv_type PDAjrSwAtv;

   typedef uint8_t _DrDoorOpenSwAct_type;
  _DrDoorOpenSwAct_type DrDoorOpenSwAct;

   typedef uint8_t _DDAjrSwAct_type;
  _DDAjrSwAct_type DDAjrSwAct;

   typedef double _PsWdwOpenDgr_type;
  _PsWdwOpenDgr_type PsWdwOpenDgr;

   typedef double _DrWdwOpenDgr_type;
  _DrWdwOpenDgr_type DrWdwOpenDgr;

   typedef uint8_t _BCMRunMod_type;
  _BCMRunMod_type BCMRunMod;

   typedef uint8_t _BCMRunModV_type;
  _BCMRunModV_type BCMRunModV;

   typedef uint8_t _EPBSysWrnIndReq_1_type;
  _EPBSysWrnIndReq_1_type EPBSysWrnIndReq_1;

   typedef uint8_t _EPBSysWrnIndReqV_1_type;
  _EPBSysWrnIndReqV_1_type EPBSysWrnIndReqV_1;

   typedef uint8_t _EPBSysBrkLtsReq_1_type;
  _EPBSysBrkLtsReq_1_type EPBSysBrkLtsReq_1;

   typedef uint8_t _EPBSysStatIndReq_1_type;
  _EPBSysStatIndReq_1_type EPBSysStatIndReq_1;

   typedef uint8_t _ElecPrkBrkSwStatV_1_type;
  _ElecPrkBrkSwStatV_1_type ElecPrkBrkSwStatV_1;

   typedef uint8_t _ElecPrkBrkStat_1_type;
  _ElecPrkBrkStat_1_type ElecPrkBrkStat_1;

   typedef uint8_t _ElecPrkBrkSwStat_1_type;
  _ElecPrkBrkSwStat_1_type ElecPrkBrkSwStat_1;

   typedef uint8_t _ADASWndSnWpCtrl_type;
  _ADASWndSnWpCtrl_type ADASWndSnWpCtrl;

   typedef uint8_t _ADASHzdLtCtrl_type;
  _ADASHzdLtCtrl_type ADASHzdLtCtrl;

   typedef uint8_t _ADASSdTrnLmpRHCtrl_type;
  _ADASSdTrnLmpRHCtrl_type ADASSdTrnLmpRHCtrl;

   typedef uint8_t _ADASSdTrnLmpLHCtrl_type;
  _ADASSdTrnLmpLHCtrl_type ADASSdTrnLmpLHCtrl;

   typedef uint8_t _ADASLowBmCtrl_type;
  _ADASLowBmCtrl_type ADASLowBmCtrl;

   typedef uint8_t _ADASHighBmCtrl_type;
  _ADASHighBmCtrl_type ADASHighBmCtrl;

   typedef uint8_t _ADASLkCtrl_type;
  _ADASLkCtrl_type ADASLkCtrl;

   typedef uint8_t _CarWindCtrl_type;
  _CarWindCtrl_type CarWindCtrl;

   typedef uint8_t _ADASRemtPrkModRqst_type;
  _ADASRemtPrkModRqst_type ADASRemtPrkModRqst;

   typedef uint8_t _BCMADASCtrlRqst_type;
  _BCMADASCtrlRqst_type BCMADASCtrlRqst;

   typedef uint8_t _BCMADASCtrlRqstV_type;
  _BCMADASCtrlRqstV_type BCMADASCtrlRqstV;

   typedef double _TMActTorq_type;
  _TMActTorq_type TMActTorq;

   typedef int32_t _TMActSpd_type;
  _TMActSpd_type TMActSpd;

   typedef uint8_t _VSELatAccV_type;
  _VSELatAccV_type VSELatAccV;

   typedef double _VSELatAcc_type;
  _VSELatAcc_type VSELatAcc;

   typedef uint8_t _VSELongAccV_type;
  _VSELongAccV_type VSELongAccV;

   typedef double _VSELongAcc_type;
  _VSELongAcc_type VSELongAcc;

   typedef double _VehOdo_type;
  _VehOdo_type VehOdo;

   typedef uint8_t _VehOdoV_type;
  _VehOdoV_type VehOdoV;

   typedef uint8_t _BrakPedalPos_type;
  _BrakPedalPos_type BrakPedalPos;

   typedef uint8_t _AccActPos_type;
  _AccActPos_type AccActPos;

   typedef uint8_t _VecActGearStsV_type;
  _VecActGearStsV_type VecActGearStsV;

   typedef uint8_t _VecActGearSts_type;
  _VecActGearSts_type VecActGearSts;

   typedef uint8_t _StrWhAngV_type;
  _StrWhAngV_type StrWhAngV;

   typedef double _StrWhAng_type;
  _StrWhAng_type StrWhAng;

   typedef uint8_t _EPSProId_type;
  _EPSProId_type EPSProId;

   typedef uint8_t _PwrStrIo_type;
  _PwrStrIo_type PwrStrIo;

   typedef uint8_t _SterModV_type;
  _SterModV_type SterModV;

   typedef uint8_t _SterMod_type;
  _SterMod_type SterMod;

   typedef double _EPS_LKARespTorq_type;
  _EPS_LKARespTorq_type EPS_LKARespTorq;

   typedef uint8_t _SterFltMod_type;
  _SterFltMod_type SterFltMod;

   typedef uint8_t _DrStrTorqV_type;
  _DrStrTorqV_type DrStrTorqV;

   typedef double _DrStrTorqVal_type;
  _DrStrTorqVal_type DrStrTorqVal;

   typedef uint16_t _SteerWheelRotSpd_type;
  _SteerWheelRotSpd_type SteerWheelRotSpd;

   typedef double _SteerWheelAngle_type;
  _SteerWheelAngle_type SteerWheelAngle;

   typedef uint8_t _ElecPrkBrkStat_type;
  _ElecPrkBrkStat_type ElecPrkBrkStat;

   typedef uint8_t _WhlGrndVlctyLftDrvnV_type;
  _WhlGrndVlctyLftDrvnV_type WhlGrndVlctyLftDrvnV;

   typedef double _WhlGrndVlctyLftDrvn_type;
  _WhlGrndVlctyLftDrvn_type WhlGrndVlctyLftDrvn;

   typedef uint8_t _WhlGrndVlctyRtDrvnV_type;
  _WhlGrndVlctyRtDrvnV_type WhlGrndVlctyRtDrvnV;

   typedef double _WhlGrndVlctyRtDrvn_type;
  _WhlGrndVlctyRtDrvn_type WhlGrndVlctyRtDrvn;

   typedef uint8_t _WhlGrndVlctyLftNnDrvnV_type;
  _WhlGrndVlctyLftNnDrvnV_type WhlGrndVlctyLftNnDrvnV;

   typedef double _WhlGrndVlctyLftNnDrvn_type;
  _WhlGrndVlctyLftNnDrvn_type WhlGrndVlctyLftNnDrvn;

   typedef uint8_t _WhlGrndVlctyRtNnDrvnV_type;
  _WhlGrndVlctyRtNnDrvnV_type WhlGrndVlctyRtNnDrvnV;

   typedef double _WhlGrndVlctyRtNnDrvn_type;
  _WhlGrndVlctyRtNnDrvn_type WhlGrndVlctyRtNnDrvn;

   typedef uint8_t _LftDrvnWhlDirec_type;
  _LftDrvnWhlDirec_type LftDrvnWhlDirec;

   typedef uint8_t _WhlGrndPlsLftDrvnV_type;
  _WhlGrndPlsLftDrvnV_type WhlGrndPlsLftDrvnV;

   typedef uint16_t _WhlGrndPlsLftDrvn_type;
  _WhlGrndPlsLftDrvn_type WhlGrndPlsLftDrvn;

   typedef uint8_t _RtDrvnWhlDirec_type;
  _RtDrvnWhlDirec_type RtDrvnWhlDirec;

   typedef uint8_t _WhlGrndPlsRtDrvnV_type;
  _WhlGrndPlsRtDrvnV_type WhlGrndPlsRtDrvnV;

   typedef uint16_t _WhlGrndPlsRtDrvn_type;
  _WhlGrndPlsRtDrvn_type WhlGrndPlsRtDrvn;

   typedef uint8_t _LftNnDrvnWhlDirec_type;
  _LftNnDrvnWhlDirec_type LftNnDrvnWhlDirec;

   typedef uint8_t _WhlGrndPlsLftNnDrvnV_type;
  _WhlGrndPlsLftNnDrvnV_type WhlGrndPlsLftNnDrvnV;

   typedef uint16_t _WhlGrndPlsLftNnDrvn_type;
  _WhlGrndPlsLftNnDrvn_type WhlGrndPlsLftNnDrvn;

   typedef uint8_t _RtNnDrvnWhlDirec_type;
  _RtNnDrvnWhlDirec_type RtNnDrvnWhlDirec;

   typedef uint8_t _WhlGrndPlsRtNnDrvnV_type;
  _WhlGrndPlsRtNnDrvnV_type WhlGrndPlsRtNnDrvnV;

   typedef uint16_t _WhlGrndPlsRtNnDrvn_type;
  _WhlGrndPlsRtNnDrvn_type WhlGrndPlsRtNnDrvn;

   typedef uint8_t _BBWSts_type;
  _BBWSts_type BBWSts;

   typedef uint8_t _EBSDrvMod_type;
  _EBSDrvMod_type EBSDrvMod;

   typedef uint8_t _IDURqst_type;
  _IDURqst_type IDURqst;

   typedef uint8_t _EBSMCBrPressure_type;
  _EBSMCBrPressure_type EBSMCBrPressure;

   typedef uint8_t _BrakPedalDisp_type;
  _BrakPedalDisp_type BrakPedalDisp;

   typedef uint8_t _ADAS_StrAngleRqstV_type;
  _ADAS_StrAngleRqstV_type ADAS_StrAngleRqstV;

   typedef uint16_t _ADASBrakRqstPres_type;
  _ADASBrakRqstPres_type ADASBrakRqstPres;

   typedef uint8_t _EPB_ADASPrkngRqst_type;
  _EPB_ADASPrkngRqst_type EPB_ADASPrkngRqst;

   typedef uint8_t _ADASStrTorqRqst_type;
  _ADASStrTorqRqst_type ADASStrTorqRqst;

   typedef uint16_t _ADASStrTorqTgt_type;
  _ADASStrTorqTgt_type ADASStrTorqTgt;

   typedef uint16_t _ADAS_StrAngle_type;
  _ADAS_StrAngle_type ADAS_StrAngle;

   typedef uint8_t _VCUTTgtAclrtnRqst_type;
  _VCUTTgtAclrtnRqst_type VCUTTgtAclrtnRqst;

   typedef double _VCUTTgtAclrtnRqstVal_type;
  _VCUTTgtAclrtnRqstVal_type VCUTTgtAclrtnRqstVal;

   typedef uint8_t _GearRqst_type;
  _GearRqst_type GearRqst;

   typedef uint8_t _TgtGear_type;
  _TgtGear_type TgtGear;

   typedef uint8_t _VCUTTgtSpRqst_type;
  _VCUTTgtSpRqst_type VCUTTgtSpRqst;

   typedef double _VCUTTgtSpRqstVal_type;
  _VCUTTgtSpRqstVal_type VCUTTgtSpRqstVal;

   typedef uint8_t _SensSt_1st_type;
  _SensSt_1st_type SensSt_1st;

   typedef uint16_t _DisFrm1stFrtSens_type;
  _DisFrm1stFrtSens_type DisFrm1stFrtSens;

   typedef uint8_t _SensSt_2nd_type;
  _SensSt_2nd_type SensSt_2nd;

   typedef uint16_t _DisFrm2ndFrtSens_type;
  _DisFrm2ndFrtSens_type DisFrm2ndFrtSens;

   typedef uint8_t _SensSt_3rd_type;
  _SensSt_3rd_type SensSt_3rd;

   typedef uint16_t _DisFrm3rdFrtSens_type;
  _DisFrm3rdFrtSens_type DisFrm3rdFrtSens;

   typedef uint8_t _SensSt_4th_type;
  _SensSt_4th_type SensSt_4th;

   typedef uint16_t _DisFrm4thFrtSens_type;
  _DisFrm4thFrtSens_type DisFrm4thFrtSens;

   typedef uint8_t _SensSt_5th_type;
  _SensSt_5th_type SensSt_5th;

   typedef uint16_t _DisFrm5thFrtSens_type;
  _DisFrm5thFrtSens_type DisFrm5thFrtSens;

   typedef uint8_t _SensSt_6th_type;
  _SensSt_6th_type SensSt_6th;

   typedef uint16_t _DisFrm6thFrtSens_type;
  _DisFrm6thFrtSens_type DisFrm6thFrtSens;

   typedef uint8_t _SensSt_7th_type;
  _SensSt_7th_type SensSt_7th;

   typedef uint16_t _DisFrm7thFrtSens_type;
  _DisFrm7thFrtSens_type DisFrm7thFrtSens;

   typedef uint8_t _SensSt_8th_type;
  _SensSt_8th_type SensSt_8th;

   typedef uint16_t _DisFrm8thFrtSens_type;
  _DisFrm8thFrtSens_type DisFrm8thFrtSens;

   typedef uint8_t _SensSt_9th_type;
  _SensSt_9th_type SensSt_9th;

   typedef uint16_t _DisFrm9thFrtSens_type;
  _DisFrm9thFrtSens_type DisFrm9thFrtSens;

   typedef uint8_t _SensSt_10th_type;
  _SensSt_10th_type SensSt_10th;

   typedef uint16_t _DisFrm10thFrtSens_type;
  _DisFrm10thFrtSens_type DisFrm10thFrtSens;

   typedef uint8_t _SensSt_11th_type;
  _SensSt_11th_type SensSt_11th;

   typedef uint16_t _DisFrm11thFrtSens_type;
  _DisFrm11thFrtSens_type DisFrm11thFrtSens;

   typedef uint8_t _SensSt_12th_type;
  _SensSt_12th_type SensSt_12th;

   typedef uint16_t _DisFrm12thFrtSens_type;
  _DisFrm12thFrtSens_type DisFrm12thFrtSens;





  typedef boost::shared_ptr< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> const> ConstPtr;

}; // struct ChassisMsg_

typedef ::in2ulv_msgs::ChassisMsg_<std::allocator<void> > ChassisMsg;

typedef boost::shared_ptr< ::in2ulv_msgs::ChassisMsg > ChassisMsgPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::ChassisMsg const> ChassisMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.module_type == rhs.module_type &&
    lhs.error_code == rhs.error_code &&
    lhs.chassis_data == rhs.chassis_data &&
    lhs.TMTorqRqstV == rhs.TMTorqRqstV &&
    lhs.TMTorqRqst == rhs.TMTorqRqst &&
    lhs.HandBrkSts == rhs.HandBrkSts &&
    lhs.VecStatRdy == rhs.VecStatRdy &&
    lhs.KyPstn == rhs.KyPstn &&
    lhs.VecSOC == rhs.VecSOC &&
    lhs.VehSpdAvgDrvnV == rhs.VehSpdAvgDrvnV &&
    lhs.VehSpdAvgDrvn == rhs.VehSpdAvgDrvn &&
    lhs.VecTMActSpdV == rhs.VecTMActSpdV &&
    lhs.VecTMActSpd == rhs.VecTMActSpd &&
    lhs.VCUVehDrvMod == rhs.VCUVehDrvMod &&
    lhs.LowBatVol == rhs.LowBatVol &&
    lhs.BatSOC == rhs.BatSOC &&
    lhs.HhBmIO == rhs.HhBmIO &&
    lhs.WindscenWipSt == rhs.WindscenWipSt &&
    lhs.LwBmIO == rhs.LwBmIO &&
    lhs.HzrdLgtSwAtv == rhs.HzrdLgtSwAtv &&
    lhs.HzrdLtIO == rhs.HzrdLtIO &&
    lhs.RtTrnLmpAtv == rhs.RtTrnLmpAtv &&
    lhs.LftTrnLmpAtv == rhs.LftTrnLmpAtv &&
    lhs.WipSwStat == rhs.WipSwStat &&
    lhs.StpLpSt == rhs.StpLpSt &&
    lhs.is_left_blinking == rhs.is_left_blinking &&
    lhs.is_right_blinking == rhs.is_right_blinking &&
    lhs.DrSbltAtc == rhs.DrSbltAtc &&
    lhs.DrSbltAtcV == rhs.DrSbltAtcV &&
    lhs.TDAjrSwAtv == rhs.TDAjrSwAtv &&
    lhs.PsDoorOpenSwAct == rhs.PsDoorOpenSwAct &&
    lhs.PDAjrSwAtv == rhs.PDAjrSwAtv &&
    lhs.DrDoorOpenSwAct == rhs.DrDoorOpenSwAct &&
    lhs.DDAjrSwAct == rhs.DDAjrSwAct &&
    lhs.PsWdwOpenDgr == rhs.PsWdwOpenDgr &&
    lhs.DrWdwOpenDgr == rhs.DrWdwOpenDgr &&
    lhs.BCMRunMod == rhs.BCMRunMod &&
    lhs.BCMRunModV == rhs.BCMRunModV &&
    lhs.EPBSysWrnIndReq_1 == rhs.EPBSysWrnIndReq_1 &&
    lhs.EPBSysWrnIndReqV_1 == rhs.EPBSysWrnIndReqV_1 &&
    lhs.EPBSysBrkLtsReq_1 == rhs.EPBSysBrkLtsReq_1 &&
    lhs.EPBSysStatIndReq_1 == rhs.EPBSysStatIndReq_1 &&
    lhs.ElecPrkBrkSwStatV_1 == rhs.ElecPrkBrkSwStatV_1 &&
    lhs.ElecPrkBrkStat_1 == rhs.ElecPrkBrkStat_1 &&
    lhs.ElecPrkBrkSwStat_1 == rhs.ElecPrkBrkSwStat_1 &&
    lhs.ADASWndSnWpCtrl == rhs.ADASWndSnWpCtrl &&
    lhs.ADASHzdLtCtrl == rhs.ADASHzdLtCtrl &&
    lhs.ADASSdTrnLmpRHCtrl == rhs.ADASSdTrnLmpRHCtrl &&
    lhs.ADASSdTrnLmpLHCtrl == rhs.ADASSdTrnLmpLHCtrl &&
    lhs.ADASLowBmCtrl == rhs.ADASLowBmCtrl &&
    lhs.ADASHighBmCtrl == rhs.ADASHighBmCtrl &&
    lhs.ADASLkCtrl == rhs.ADASLkCtrl &&
    lhs.CarWindCtrl == rhs.CarWindCtrl &&
    lhs.ADASRemtPrkModRqst == rhs.ADASRemtPrkModRqst &&
    lhs.BCMADASCtrlRqst == rhs.BCMADASCtrlRqst &&
    lhs.BCMADASCtrlRqstV == rhs.BCMADASCtrlRqstV &&
    lhs.TMActTorq == rhs.TMActTorq &&
    lhs.TMActSpd == rhs.TMActSpd &&
    lhs.VSELatAccV == rhs.VSELatAccV &&
    lhs.VSELatAcc == rhs.VSELatAcc &&
    lhs.VSELongAccV == rhs.VSELongAccV &&
    lhs.VSELongAcc == rhs.VSELongAcc &&
    lhs.VehOdo == rhs.VehOdo &&
    lhs.VehOdoV == rhs.VehOdoV &&
    lhs.BrakPedalPos == rhs.BrakPedalPos &&
    lhs.AccActPos == rhs.AccActPos &&
    lhs.VecActGearStsV == rhs.VecActGearStsV &&
    lhs.VecActGearSts == rhs.VecActGearSts &&
    lhs.StrWhAngV == rhs.StrWhAngV &&
    lhs.StrWhAng == rhs.StrWhAng &&
    lhs.EPSProId == rhs.EPSProId &&
    lhs.PwrStrIo == rhs.PwrStrIo &&
    lhs.SterModV == rhs.SterModV &&
    lhs.SterMod == rhs.SterMod &&
    lhs.EPS_LKARespTorq == rhs.EPS_LKARespTorq &&
    lhs.SterFltMod == rhs.SterFltMod &&
    lhs.DrStrTorqV == rhs.DrStrTorqV &&
    lhs.DrStrTorqVal == rhs.DrStrTorqVal &&
    lhs.SteerWheelRotSpd == rhs.SteerWheelRotSpd &&
    lhs.SteerWheelAngle == rhs.SteerWheelAngle &&
    lhs.ElecPrkBrkStat == rhs.ElecPrkBrkStat &&
    lhs.WhlGrndVlctyLftDrvnV == rhs.WhlGrndVlctyLftDrvnV &&
    lhs.WhlGrndVlctyLftDrvn == rhs.WhlGrndVlctyLftDrvn &&
    lhs.WhlGrndVlctyRtDrvnV == rhs.WhlGrndVlctyRtDrvnV &&
    lhs.WhlGrndVlctyRtDrvn == rhs.WhlGrndVlctyRtDrvn &&
    lhs.WhlGrndVlctyLftNnDrvnV == rhs.WhlGrndVlctyLftNnDrvnV &&
    lhs.WhlGrndVlctyLftNnDrvn == rhs.WhlGrndVlctyLftNnDrvn &&
    lhs.WhlGrndVlctyRtNnDrvnV == rhs.WhlGrndVlctyRtNnDrvnV &&
    lhs.WhlGrndVlctyRtNnDrvn == rhs.WhlGrndVlctyRtNnDrvn &&
    lhs.LftDrvnWhlDirec == rhs.LftDrvnWhlDirec &&
    lhs.WhlGrndPlsLftDrvnV == rhs.WhlGrndPlsLftDrvnV &&
    lhs.WhlGrndPlsLftDrvn == rhs.WhlGrndPlsLftDrvn &&
    lhs.RtDrvnWhlDirec == rhs.RtDrvnWhlDirec &&
    lhs.WhlGrndPlsRtDrvnV == rhs.WhlGrndPlsRtDrvnV &&
    lhs.WhlGrndPlsRtDrvn == rhs.WhlGrndPlsRtDrvn &&
    lhs.LftNnDrvnWhlDirec == rhs.LftNnDrvnWhlDirec &&
    lhs.WhlGrndPlsLftNnDrvnV == rhs.WhlGrndPlsLftNnDrvnV &&
    lhs.WhlGrndPlsLftNnDrvn == rhs.WhlGrndPlsLftNnDrvn &&
    lhs.RtNnDrvnWhlDirec == rhs.RtNnDrvnWhlDirec &&
    lhs.WhlGrndPlsRtNnDrvnV == rhs.WhlGrndPlsRtNnDrvnV &&
    lhs.WhlGrndPlsRtNnDrvn == rhs.WhlGrndPlsRtNnDrvn &&
    lhs.BBWSts == rhs.BBWSts &&
    lhs.EBSDrvMod == rhs.EBSDrvMod &&
    lhs.IDURqst == rhs.IDURqst &&
    lhs.EBSMCBrPressure == rhs.EBSMCBrPressure &&
    lhs.BrakPedalDisp == rhs.BrakPedalDisp &&
    lhs.ADAS_StrAngleRqstV == rhs.ADAS_StrAngleRqstV &&
    lhs.ADASBrakRqstPres == rhs.ADASBrakRqstPres &&
    lhs.EPB_ADASPrkngRqst == rhs.EPB_ADASPrkngRqst &&
    lhs.ADASStrTorqRqst == rhs.ADASStrTorqRqst &&
    lhs.ADASStrTorqTgt == rhs.ADASStrTorqTgt &&
    lhs.ADAS_StrAngle == rhs.ADAS_StrAngle &&
    lhs.VCUTTgtAclrtnRqst == rhs.VCUTTgtAclrtnRqst &&
    lhs.VCUTTgtAclrtnRqstVal == rhs.VCUTTgtAclrtnRqstVal &&
    lhs.GearRqst == rhs.GearRqst &&
    lhs.TgtGear == rhs.TgtGear &&
    lhs.VCUTTgtSpRqst == rhs.VCUTTgtSpRqst &&
    lhs.VCUTTgtSpRqstVal == rhs.VCUTTgtSpRqstVal &&
    lhs.SensSt_1st == rhs.SensSt_1st &&
    lhs.DisFrm1stFrtSens == rhs.DisFrm1stFrtSens &&
    lhs.SensSt_2nd == rhs.SensSt_2nd &&
    lhs.DisFrm2ndFrtSens == rhs.DisFrm2ndFrtSens &&
    lhs.SensSt_3rd == rhs.SensSt_3rd &&
    lhs.DisFrm3rdFrtSens == rhs.DisFrm3rdFrtSens &&
    lhs.SensSt_4th == rhs.SensSt_4th &&
    lhs.DisFrm4thFrtSens == rhs.DisFrm4thFrtSens &&
    lhs.SensSt_5th == rhs.SensSt_5th &&
    lhs.DisFrm5thFrtSens == rhs.DisFrm5thFrtSens &&
    lhs.SensSt_6th == rhs.SensSt_6th &&
    lhs.DisFrm6thFrtSens == rhs.DisFrm6thFrtSens &&
    lhs.SensSt_7th == rhs.SensSt_7th &&
    lhs.DisFrm7thFrtSens == rhs.DisFrm7thFrtSens &&
    lhs.SensSt_8th == rhs.SensSt_8th &&
    lhs.DisFrm8thFrtSens == rhs.DisFrm8thFrtSens &&
    lhs.SensSt_9th == rhs.SensSt_9th &&
    lhs.DisFrm9thFrtSens == rhs.DisFrm9thFrtSens &&
    lhs.SensSt_10th == rhs.SensSt_10th &&
    lhs.DisFrm10thFrtSens == rhs.DisFrm10thFrtSens &&
    lhs.SensSt_11th == rhs.SensSt_11th &&
    lhs.DisFrm11thFrtSens == rhs.DisFrm11thFrtSens &&
    lhs.SensSt_12th == rhs.SensSt_12th &&
    lhs.DisFrm12thFrtSens == rhs.DisFrm12thFrtSens;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4afd528f4d1ffe906c0a12d9e60847f2";
  }

  static const char* value(const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4afd528f4d1ffe90ULL;
  static const uint64_t static_value2 = 0x6c0a12d9e60847f2ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/ChassisMsg";
  }

  static const char* value(const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"\n"
"# 模块类型\n"
"uint8 module_type\n"
"\n"
"# error_code\n"
"uint32 error_code\n"
"\n"
"# 模块信息\n"
"string chassis_data\n"
"\n"
"# VCU_Torque_Request (0x165)\n"
"uint8 TMTorqRqstV       # 电机扭矩请求有效性\n"
"float64 TMTorqRqst      # 电机扭矩请求\n"
"# uint8 VCUCtrlRqst1RollCnt# 循环计数\n"
"# uint8 VCUCtrlRqst1Cksm  # 校验和\n"
"\n"
"# VCU_General_Status_1 (04C5)\n"
"uint8 HandBrkSts        # 手刹开关状态\n"
"uint8 VecStatRdy        # 整车运行准备就绪\n"
"uint8 KyPstn            # 钥匙状态\n"
"\n"
"# VCU_General_Status_2 (0x36A)\n"
"uint8 VecSOC            # SOC值\n"
"uint8 VehSpdAvgDrvnV    # 车速有效性\n"
"float64 VehSpdAvgDrvn   # 车速\n"
"uint8 VecTMActSpdV      # 电机当前转速有效性\n"
"uint16 VecTMActSpd     # 电机当前转速\n"
"# uint8 VCUGenStRollCn    # 循环计数\n"
"uint8 VCUVehDrvMod      # VCU驱动模式\n"
"# uint8 VCUGenStCksm      # 校验和\n"
"\n"
"# VCU_General_Status_3 0x4C7\n"
"float64 LowBatVol       # 低压蓄电池电压\n"
"\n"
"# BMS_General_Status_2 (0x297)\n"
"uint8 BatSOC    # 电池电量\n"
"\n"
"# Exterior_Lighting_HS (0x140)\n"
"uint8 HhBmIO        # 远光灯指示\n"
"uint8 WindscenWipSt # 雨刮状态\n"
"uint8 LwBmIO        # 近光灯指示\n"
"uint8 HzrdLgtSwAtv  # 危险警报开关状态\n"
"uint8 HzrdLtIO      # 危险警报灯指示\n"
"uint8 RtTrnLmpAtv   # 右转向灯指示\n"
"uint8 LftTrnLmpAtv  # 左转向灯指示\n"
"uint8 WipSwStat     # 雨刮控制开关状态\n"
"uint8 StpLpSt       # 行车制动灯状态\n"
"\n"
"# Bool Is Turn Light Blinking Status\n"
"bool is_left_blinking\n"
"bool is_right_blinking\n"
"\n"
"# Airbag_Impact_Data (0x0E1)\n"
"uint8 DrSbltAtc     # 驾驶员安全带状态\n"
"uint8 DrSbltAtcV    # 安全带状态有效性\n"
"\n"
"# LS_Device_Information (0x12A)\n"
"uint8 TDAjrSwAtv        # 尾门门碰开关状态\n"
"uint8 PsDoorOpenSwAct   # 右前门锁开关状态\n"
"uint8 PDAjrSwAtv        # 右前门门碰开关状态\n"
"uint8 DrDoorOpenSwAct   # 驾驶员侧门锁开关状态\n"
"uint8 DDAjrSwAct        # 驾驶员侧门碰开关状态\n"
"float64 PsWdwOpenDgr    # 副驾驶车窗开度\n"
"float64 DrWdwOpenDgr    # 驾驶员车窗开度\n"
"uint8 BCMRunMod         # BCM运行模式\n"
"uint8 BCMRunModV        # BCM运行模式有效性\n"
"\n"
"# Electric_Park_Brake_Status_1 (0x17E)\n"
"uint8 EPBSysWrnIndReq_1     # EPB系统报警显示要求\n"
"uint8 EPBSysWrnIndReqV_1    # EPB系统报警显示要求有效性\n"
"uint8 EPBSysBrkLtsReq_1     # PB制动灯点亮要求\n"
"uint8 EPBSysStatIndReq_1    # EPB系统状态指示灯需求\n"
"# uint8 EPBAlvRlCnt_1         # 电子驻车循环计数\n"
"uint8 ElecPrkBrkSwStatV_1   # 驻车按键状态有效性\n"
"uint8 ElecPrkBrkStat_1      # EPB系统工作状态\n"
"uint8 ElecPrkBrkSwStat_1    # 驻车按键状态\n"
"# uint8 EPBStaCksm_1          # 校验和\n"
"\n"
"\n"
"# ADAS_General_Status_11 (0x329)\n"
"uint8 ADASWndSnWpCtrl       # ADAS雨刮控制\n"
"uint8 ADASHzdLtCtrl         # ADAS双闪控制\n"
"uint8 ADASSdTrnLmpRHCtrl    # ADAS右转向控制\n"
"uint8 ADASSdTrnLmpLHCtrl    # ADAS左转向控制\n"
"uint8 ADASLowBmCtrl         # ADAS近光灯控制\n"
"uint8 ADASHighBmCtrl        # ADAS远光灯控制\n"
"uint8 ADASLkCtrl            # ADAS锁控功能\n"
"uint8 CarWindCtrl           # ADAS车窗控制\n"
"uint8 ADASRemtPrkModRqst    # ADAS电源模式请求\n"
"uint8 BCMADASCtrlRqst       # ADAS控制请求\n"
"uint8 BCMADASCtrlRqstV      # ADAS控制请求有效性\n"
"\n"
"# MCU_General_Status_1 (0x16C)\n"
"float64 TMActTorq   # 电机当前扭矩\n"
"int32 TMActSpd      # 电机当前转速\n"
"\n"
"# # VCU_General_Status_2 (0x36A)\n"
"# uint8 VehSpdAvgDrvnV    # 车速有效性\n"
"# float64 VehSpdAvgDrvn   # 车速\n"
"\n"
"# PPEI_Chassis_General_Status_1 (0x1E9)\n"
"uint8 VSELatAccV    # 横向加速度有效性\n"
"float64 VSELatAcc   # 车辆横向加速度 \n"
"\n"
"# Vehicle_Stability_Information (0x128)\n"
"uint8 VSELongAccV   # 纵向加速度有效性\n"
"float64 VSELongAcc  # 车辆纵向加速度\n"
"\n"
"# Vehicle_Odometer (0x120)\n"
"float64 VehOdo  # 车辆行驶里程\n"
"uint8 VehOdoV   # 车辆里程有效性\n"
"\n"
"# VCU_Vehicle_Command_State (0x155)\n"
"uint8 BrakPedalPos  # 制动踏板位置\n"
"uint8 AccActPos     # 加速踏板位置\n"
"uint8 VecActGearStsV    # 整车当前档位状态有效性\n"
"uint8 VecActGearSts     # 整车当前档位状态\n"
"\n"
"# PPEI_Steering_Wheel_Angle (0x1E5)\n"
"uint8 StrWhAngV     # 方向盘角度有效性\n"
"float64 StrWhAng    # 方向盘角度\n"
"uint8 EPSProId      # EPS产品标识符\n"
"uint8 PwrStrIo      # EPS故障指示\n"
"# uint8 StWhlAngAliveRollCnt  # 循环计数\n"
"# uint8 StrWhAngExPrtVal      # 校验和\n"
"\n"
"# PPEI_Steering_Wheel_Angle_Information (0x1E6)\n"
"uint8 SterModV          # 转向模式有效性\n"
"uint8 SterMod           # 转向模式\n"
"float64 EPS_LKARespTorq # EPS LKA的响应扭矩\n"
"uint8 SterFltMod        # 转向故障码(预留)\n"
"uint8 DrStrTorqV        # 驾驶员转向扭矩有效性\n"
"float64 DrStrTorqVal    # 驾驶员转向扭矩\n"
"# uint8 StWhlAngInfmtnRollCnt # 循环计数\n"
"# uint8 StWhlAngInfmtnCksm    # 校验和\n"
"\n"
"# Steering_Sensor_1 (0x14A)\n"
"uint16 SteerWheelRotSpd     # 方向盘角速度\n"
"float64 SteerWheelAngle     # 方向盘转角\n"
"\n"
"# Electic_Park_Brake_Status (0x230)\n"
"uint8 ElecPrkBrkStat    # EBP系统工作状态\n"
"\n"
"# Electric_Wheel_Grnd_Velocity (0x348)\n"
"uint8 WhlGrndVlctyLftDrvnV  # 左驱动轮对地速度有效性\n"
"float64 WhlGrndVlctyLftDrvn # 左驱动轮对地速度\n"
"uint8 WhlGrndVlctyRtDrvnV   # 右驱动轮对地速度有效性\n"
"float64 WhlGrndVlctyRtDrvn  # 右驱动轮对地速度\n"
"\n"
"# NonDriven_Wheel_Grnd_Velocity (0x34A)\n"
"uint8 WhlGrndVlctyLftNnDrvnV    # 左从动轮对地速度有效性\n"
"float64 WhlGrndVlctyLftNnDrvn   # 左从动轮对地速度\n"
"uint8 WhlGrndVlctyRtNnDrvnV     # 右从动轮对地速度有效性\n"
"float64 WhlGrndVlctyRtNnDrvn    # 右从动轮对地速度\n"
"\n"
"# PPEI_Driven_Whl_Rotational_Stat (0x0C1)\n"
"uint8 LftDrvnWhlDirec       # 左驱动轮方向\n"
"uint8 WhlGrndPlsLftDrvnV    # 左驱动轮对地脉冲有效性\n"
"uint16 WhlGrndPlsLftDrvn    # 左驱动轮对地脉冲\n"
"uint8 RtDrvnWhlDirec        # 右驱动轮方向\n"
"uint8 WhlGrndPlsRtDrvnV     # 右驱动轮对地脉冲有效性\n"
"uint16 WhlGrndPlsRtDrvn     # 右驱动轮对地脉冲\n"
"\n"
"# PPEI_NonDriven_Whl_Rotational_Stat (0x0C5)\n"
"uint8 LftNnDrvnWhlDirec     # 左从动轮方向\n"
"uint8 WhlGrndPlsLftNnDrvnV  # 左从动轮对地脉冲有效性\n"
"uint16 WhlGrndPlsLftNnDrvn  # 左从动轮对地脉冲\n"
"uint8 RtNnDrvnWhlDirec      # 右从动轮方向\n"
"uint8 WhlGrndPlsRtNnDrvnV   # 右从动轮对地脉冲有效性\n"
"uint16 WhlGrndPlsRtNnDrvn   # 右从动轮对地脉冲\n"
"\n"
"# EBS_General_Status_1 (0x132)\n"
"uint8 BBWSts            # 线控制动功能状态\n"
"uint8 EBSDrvMod         # EBS运行模式\n"
"uint8 IDURqst           # IDU线控制动请求状态\n"
"uint8 EBSMCBrPressure   # EBS主缸制动压力\n"
"uint8 BrakPedalDisp     # 制动踏板位移量\n"
"# uint8 EBSGenSts1RollCnt # 循环计数\n"
"# uint8 EBSGenSts1Cksm    # 校验和\n"
"\n"
"# ADAS_General_Status_1 (0x1D1)\n"
"uint8 ADAS_StrAngleRqstV    # ADAS期望转向角度请求有效值\n"
"uint16 ADASBrakRqstPres     # ADAS制动请求压力\n"
"uint8 EPB_ADASPrkngRqst     # EPB ADAS驻车请求\n"
"uint8 ADASStrTorqRqst       # ADAS转向扭矩请求\n"
"uint16 ADASStrTorqTgt       # ADAS转向扭矩目标值\n"
"uint16 ADAS_StrAngle        # ADAS期望转向角度\n"
"\n"
"# ADAS_General_Status_2 (0x1D2)\n"
"uint8 VCUTTgtAclrtnRqst         # VCU目标加速度请求\n"
"float64 VCUTTgtAclrtnRqstVal    # VCU目标加速度请求值\n"
"uint8 GearRqst                  # 档位请求\n"
"uint8 TgtGear                   # 档位\n"
"uint8 VCUTTgtSpRqst             # VCU目标速度请求\n"
"float64 VCUTTgtSpRqstVal        # VCU目标速度请求值\n"
"\n"
"# URC_Genertal_Status_1 (0x211)\n"
"uint8 SensSt_1st        # 1号探头状态\n"
"uint16 DisFrm1stFrtSens # 1号探头距离\n"
"uint8 SensSt_2nd\n"
"uint16 DisFrm2ndFrtSens\n"
"uint8 SensSt_3rd\n"
"uint16 DisFrm3rdFrtSens\n"
"uint8 SensSt_4th\n"
"uint16 DisFrm4thFrtSens\n"
"\n"
"# URC_Genertal_Status_2 (0x212)\n"
"uint8 SensSt_5th\n"
"uint16 DisFrm5thFrtSens\n"
"uint8 SensSt_6th\n"
"uint16 DisFrm6thFrtSens\n"
"uint8 SensSt_7th\n"
"uint16 DisFrm7thFrtSens\n"
"uint8 SensSt_8th\n"
"uint16 DisFrm8thFrtSens\n"
"\n"
"# URC_Genertal_Status_3 (0x213)\n"
"uint8 SensSt_9th\n"
"uint16 DisFrm9thFrtSens\n"
"uint8 SensSt_10th\n"
"uint16 DisFrm10thFrtSens\n"
"uint8 SensSt_11th\n"
"uint16 DisFrm11thFrtSens\n"
"uint8 SensSt_12th\n"
"uint16 DisFrm12thFrtSens\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.module_type);
      stream.next(m.error_code);
      stream.next(m.chassis_data);
      stream.next(m.TMTorqRqstV);
      stream.next(m.TMTorqRqst);
      stream.next(m.HandBrkSts);
      stream.next(m.VecStatRdy);
      stream.next(m.KyPstn);
      stream.next(m.VecSOC);
      stream.next(m.VehSpdAvgDrvnV);
      stream.next(m.VehSpdAvgDrvn);
      stream.next(m.VecTMActSpdV);
      stream.next(m.VecTMActSpd);
      stream.next(m.VCUVehDrvMod);
      stream.next(m.LowBatVol);
      stream.next(m.BatSOC);
      stream.next(m.HhBmIO);
      stream.next(m.WindscenWipSt);
      stream.next(m.LwBmIO);
      stream.next(m.HzrdLgtSwAtv);
      stream.next(m.HzrdLtIO);
      stream.next(m.RtTrnLmpAtv);
      stream.next(m.LftTrnLmpAtv);
      stream.next(m.WipSwStat);
      stream.next(m.StpLpSt);
      stream.next(m.is_left_blinking);
      stream.next(m.is_right_blinking);
      stream.next(m.DrSbltAtc);
      stream.next(m.DrSbltAtcV);
      stream.next(m.TDAjrSwAtv);
      stream.next(m.PsDoorOpenSwAct);
      stream.next(m.PDAjrSwAtv);
      stream.next(m.DrDoorOpenSwAct);
      stream.next(m.DDAjrSwAct);
      stream.next(m.PsWdwOpenDgr);
      stream.next(m.DrWdwOpenDgr);
      stream.next(m.BCMRunMod);
      stream.next(m.BCMRunModV);
      stream.next(m.EPBSysWrnIndReq_1);
      stream.next(m.EPBSysWrnIndReqV_1);
      stream.next(m.EPBSysBrkLtsReq_1);
      stream.next(m.EPBSysStatIndReq_1);
      stream.next(m.ElecPrkBrkSwStatV_1);
      stream.next(m.ElecPrkBrkStat_1);
      stream.next(m.ElecPrkBrkSwStat_1);
      stream.next(m.ADASWndSnWpCtrl);
      stream.next(m.ADASHzdLtCtrl);
      stream.next(m.ADASSdTrnLmpRHCtrl);
      stream.next(m.ADASSdTrnLmpLHCtrl);
      stream.next(m.ADASLowBmCtrl);
      stream.next(m.ADASHighBmCtrl);
      stream.next(m.ADASLkCtrl);
      stream.next(m.CarWindCtrl);
      stream.next(m.ADASRemtPrkModRqst);
      stream.next(m.BCMADASCtrlRqst);
      stream.next(m.BCMADASCtrlRqstV);
      stream.next(m.TMActTorq);
      stream.next(m.TMActSpd);
      stream.next(m.VSELatAccV);
      stream.next(m.VSELatAcc);
      stream.next(m.VSELongAccV);
      stream.next(m.VSELongAcc);
      stream.next(m.VehOdo);
      stream.next(m.VehOdoV);
      stream.next(m.BrakPedalPos);
      stream.next(m.AccActPos);
      stream.next(m.VecActGearStsV);
      stream.next(m.VecActGearSts);
      stream.next(m.StrWhAngV);
      stream.next(m.StrWhAng);
      stream.next(m.EPSProId);
      stream.next(m.PwrStrIo);
      stream.next(m.SterModV);
      stream.next(m.SterMod);
      stream.next(m.EPS_LKARespTorq);
      stream.next(m.SterFltMod);
      stream.next(m.DrStrTorqV);
      stream.next(m.DrStrTorqVal);
      stream.next(m.SteerWheelRotSpd);
      stream.next(m.SteerWheelAngle);
      stream.next(m.ElecPrkBrkStat);
      stream.next(m.WhlGrndVlctyLftDrvnV);
      stream.next(m.WhlGrndVlctyLftDrvn);
      stream.next(m.WhlGrndVlctyRtDrvnV);
      stream.next(m.WhlGrndVlctyRtDrvn);
      stream.next(m.WhlGrndVlctyLftNnDrvnV);
      stream.next(m.WhlGrndVlctyLftNnDrvn);
      stream.next(m.WhlGrndVlctyRtNnDrvnV);
      stream.next(m.WhlGrndVlctyRtNnDrvn);
      stream.next(m.LftDrvnWhlDirec);
      stream.next(m.WhlGrndPlsLftDrvnV);
      stream.next(m.WhlGrndPlsLftDrvn);
      stream.next(m.RtDrvnWhlDirec);
      stream.next(m.WhlGrndPlsRtDrvnV);
      stream.next(m.WhlGrndPlsRtDrvn);
      stream.next(m.LftNnDrvnWhlDirec);
      stream.next(m.WhlGrndPlsLftNnDrvnV);
      stream.next(m.WhlGrndPlsLftNnDrvn);
      stream.next(m.RtNnDrvnWhlDirec);
      stream.next(m.WhlGrndPlsRtNnDrvnV);
      stream.next(m.WhlGrndPlsRtNnDrvn);
      stream.next(m.BBWSts);
      stream.next(m.EBSDrvMod);
      stream.next(m.IDURqst);
      stream.next(m.EBSMCBrPressure);
      stream.next(m.BrakPedalDisp);
      stream.next(m.ADAS_StrAngleRqstV);
      stream.next(m.ADASBrakRqstPres);
      stream.next(m.EPB_ADASPrkngRqst);
      stream.next(m.ADASStrTorqRqst);
      stream.next(m.ADASStrTorqTgt);
      stream.next(m.ADAS_StrAngle);
      stream.next(m.VCUTTgtAclrtnRqst);
      stream.next(m.VCUTTgtAclrtnRqstVal);
      stream.next(m.GearRqst);
      stream.next(m.TgtGear);
      stream.next(m.VCUTTgtSpRqst);
      stream.next(m.VCUTTgtSpRqstVal);
      stream.next(m.SensSt_1st);
      stream.next(m.DisFrm1stFrtSens);
      stream.next(m.SensSt_2nd);
      stream.next(m.DisFrm2ndFrtSens);
      stream.next(m.SensSt_3rd);
      stream.next(m.DisFrm3rdFrtSens);
      stream.next(m.SensSt_4th);
      stream.next(m.DisFrm4thFrtSens);
      stream.next(m.SensSt_5th);
      stream.next(m.DisFrm5thFrtSens);
      stream.next(m.SensSt_6th);
      stream.next(m.DisFrm6thFrtSens);
      stream.next(m.SensSt_7th);
      stream.next(m.DisFrm7thFrtSens);
      stream.next(m.SensSt_8th);
      stream.next(m.DisFrm8thFrtSens);
      stream.next(m.SensSt_9th);
      stream.next(m.DisFrm9thFrtSens);
      stream.next(m.SensSt_10th);
      stream.next(m.DisFrm10thFrtSens);
      stream.next(m.SensSt_11th);
      stream.next(m.DisFrm11thFrtSens);
      stream.next(m.SensSt_12th);
      stream.next(m.DisFrm12thFrtSens);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChassisMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::ChassisMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::ChassisMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "module_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.module_type);
    s << indent << "error_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "chassis_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.chassis_data);
    s << indent << "TMTorqRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TMTorqRqstV);
    s << indent << "TMTorqRqst: ";
    Printer<double>::stream(s, indent + "  ", v.TMTorqRqst);
    s << indent << "HandBrkSts: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HandBrkSts);
    s << indent << "VecStatRdy: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VecStatRdy);
    s << indent << "KyPstn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.KyPstn);
    s << indent << "VecSOC: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VecSOC);
    s << indent << "VehSpdAvgDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehSpdAvgDrvnV);
    s << indent << "VehSpdAvgDrvn: ";
    Printer<double>::stream(s, indent + "  ", v.VehSpdAvgDrvn);
    s << indent << "VecTMActSpdV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VecTMActSpdV);
    s << indent << "VecTMActSpd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.VecTMActSpd);
    s << indent << "VCUVehDrvMod: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VCUVehDrvMod);
    s << indent << "LowBatVol: ";
    Printer<double>::stream(s, indent + "  ", v.LowBatVol);
    s << indent << "BatSOC: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BatSOC);
    s << indent << "HhBmIO: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HhBmIO);
    s << indent << "WindscenWipSt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WindscenWipSt);
    s << indent << "LwBmIO: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LwBmIO);
    s << indent << "HzrdLgtSwAtv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HzrdLgtSwAtv);
    s << indent << "HzrdLtIO: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.HzrdLtIO);
    s << indent << "RtTrnLmpAtv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RtTrnLmpAtv);
    s << indent << "LftTrnLmpAtv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LftTrnLmpAtv);
    s << indent << "WipSwStat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WipSwStat);
    s << indent << "StpLpSt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.StpLpSt);
    s << indent << "is_left_blinking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_left_blinking);
    s << indent << "is_right_blinking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_right_blinking);
    s << indent << "DrSbltAtc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DrSbltAtc);
    s << indent << "DrSbltAtcV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DrSbltAtcV);
    s << indent << "TDAjrSwAtv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TDAjrSwAtv);
    s << indent << "PsDoorOpenSwAct: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PsDoorOpenSwAct);
    s << indent << "PDAjrSwAtv: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PDAjrSwAtv);
    s << indent << "DrDoorOpenSwAct: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DrDoorOpenSwAct);
    s << indent << "DDAjrSwAct: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DDAjrSwAct);
    s << indent << "PsWdwOpenDgr: ";
    Printer<double>::stream(s, indent + "  ", v.PsWdwOpenDgr);
    s << indent << "DrWdwOpenDgr: ";
    Printer<double>::stream(s, indent + "  ", v.DrWdwOpenDgr);
    s << indent << "BCMRunMod: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BCMRunMod);
    s << indent << "BCMRunModV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BCMRunModV);
    s << indent << "EPBSysWrnIndReq_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPBSysWrnIndReq_1);
    s << indent << "EPBSysWrnIndReqV_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPBSysWrnIndReqV_1);
    s << indent << "EPBSysBrkLtsReq_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPBSysBrkLtsReq_1);
    s << indent << "EPBSysStatIndReq_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPBSysStatIndReq_1);
    s << indent << "ElecPrkBrkSwStatV_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ElecPrkBrkSwStatV_1);
    s << indent << "ElecPrkBrkStat_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ElecPrkBrkStat_1);
    s << indent << "ElecPrkBrkSwStat_1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ElecPrkBrkSwStat_1);
    s << indent << "ADASWndSnWpCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASWndSnWpCtrl);
    s << indent << "ADASHzdLtCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASHzdLtCtrl);
    s << indent << "ADASSdTrnLmpRHCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASSdTrnLmpRHCtrl);
    s << indent << "ADASSdTrnLmpLHCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASSdTrnLmpLHCtrl);
    s << indent << "ADASLowBmCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASLowBmCtrl);
    s << indent << "ADASHighBmCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASHighBmCtrl);
    s << indent << "ADASLkCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASLkCtrl);
    s << indent << "CarWindCtrl: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CarWindCtrl);
    s << indent << "ADASRemtPrkModRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASRemtPrkModRqst);
    s << indent << "BCMADASCtrlRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BCMADASCtrlRqst);
    s << indent << "BCMADASCtrlRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BCMADASCtrlRqstV);
    s << indent << "TMActTorq: ";
    Printer<double>::stream(s, indent + "  ", v.TMActTorq);
    s << indent << "TMActSpd: ";
    Printer<int32_t>::stream(s, indent + "  ", v.TMActSpd);
    s << indent << "VSELatAccV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VSELatAccV);
    s << indent << "VSELatAcc: ";
    Printer<double>::stream(s, indent + "  ", v.VSELatAcc);
    s << indent << "VSELongAccV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VSELongAccV);
    s << indent << "VSELongAcc: ";
    Printer<double>::stream(s, indent + "  ", v.VSELongAcc);
    s << indent << "VehOdo: ";
    Printer<double>::stream(s, indent + "  ", v.VehOdo);
    s << indent << "VehOdoV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VehOdoV);
    s << indent << "BrakPedalPos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BrakPedalPos);
    s << indent << "AccActPos: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.AccActPos);
    s << indent << "VecActGearStsV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VecActGearStsV);
    s << indent << "VecActGearSts: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VecActGearSts);
    s << indent << "StrWhAngV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.StrWhAngV);
    s << indent << "StrWhAng: ";
    Printer<double>::stream(s, indent + "  ", v.StrWhAng);
    s << indent << "EPSProId: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPSProId);
    s << indent << "PwrStrIo: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.PwrStrIo);
    s << indent << "SterModV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SterModV);
    s << indent << "SterMod: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SterMod);
    s << indent << "EPS_LKARespTorq: ";
    Printer<double>::stream(s, indent + "  ", v.EPS_LKARespTorq);
    s << indent << "SterFltMod: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SterFltMod);
    s << indent << "DrStrTorqV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.DrStrTorqV);
    s << indent << "DrStrTorqVal: ";
    Printer<double>::stream(s, indent + "  ", v.DrStrTorqVal);
    s << indent << "SteerWheelRotSpd: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.SteerWheelRotSpd);
    s << indent << "SteerWheelAngle: ";
    Printer<double>::stream(s, indent + "  ", v.SteerWheelAngle);
    s << indent << "ElecPrkBrkStat: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ElecPrkBrkStat);
    s << indent << "WhlGrndVlctyLftDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WhlGrndVlctyLftDrvnV);
    s << indent << "WhlGrndVlctyLftDrvn: ";
    Printer<double>::stream(s, indent + "  ", v.WhlGrndVlctyLftDrvn);
    s << indent << "WhlGrndVlctyRtDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WhlGrndVlctyRtDrvnV);
    s << indent << "WhlGrndVlctyRtDrvn: ";
    Printer<double>::stream(s, indent + "  ", v.WhlGrndVlctyRtDrvn);
    s << indent << "WhlGrndVlctyLftNnDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WhlGrndVlctyLftNnDrvnV);
    s << indent << "WhlGrndVlctyLftNnDrvn: ";
    Printer<double>::stream(s, indent + "  ", v.WhlGrndVlctyLftNnDrvn);
    s << indent << "WhlGrndVlctyRtNnDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WhlGrndVlctyRtNnDrvnV);
    s << indent << "WhlGrndVlctyRtNnDrvn: ";
    Printer<double>::stream(s, indent + "  ", v.WhlGrndVlctyRtNnDrvn);
    s << indent << "LftDrvnWhlDirec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LftDrvnWhlDirec);
    s << indent << "WhlGrndPlsLftDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WhlGrndPlsLftDrvnV);
    s << indent << "WhlGrndPlsLftDrvn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WhlGrndPlsLftDrvn);
    s << indent << "RtDrvnWhlDirec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RtDrvnWhlDirec);
    s << indent << "WhlGrndPlsRtDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WhlGrndPlsRtDrvnV);
    s << indent << "WhlGrndPlsRtDrvn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WhlGrndPlsRtDrvn);
    s << indent << "LftNnDrvnWhlDirec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.LftNnDrvnWhlDirec);
    s << indent << "WhlGrndPlsLftNnDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WhlGrndPlsLftNnDrvnV);
    s << indent << "WhlGrndPlsLftNnDrvn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WhlGrndPlsLftNnDrvn);
    s << indent << "RtNnDrvnWhlDirec: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RtNnDrvnWhlDirec);
    s << indent << "WhlGrndPlsRtNnDrvnV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.WhlGrndPlsRtNnDrvnV);
    s << indent << "WhlGrndPlsRtNnDrvn: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.WhlGrndPlsRtNnDrvn);
    s << indent << "BBWSts: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BBWSts);
    s << indent << "EBSDrvMod: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EBSDrvMod);
    s << indent << "IDURqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.IDURqst);
    s << indent << "EBSMCBrPressure: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EBSMCBrPressure);
    s << indent << "BrakPedalDisp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.BrakPedalDisp);
    s << indent << "ADAS_StrAngleRqstV: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADAS_StrAngleRqstV);
    s << indent << "ADASBrakRqstPres: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ADASBrakRqstPres);
    s << indent << "EPB_ADASPrkngRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.EPB_ADASPrkngRqst);
    s << indent << "ADASStrTorqRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ADASStrTorqRqst);
    s << indent << "ADASStrTorqTgt: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ADASStrTorqTgt);
    s << indent << "ADAS_StrAngle: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ADAS_StrAngle);
    s << indent << "VCUTTgtAclrtnRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VCUTTgtAclrtnRqst);
    s << indent << "VCUTTgtAclrtnRqstVal: ";
    Printer<double>::stream(s, indent + "  ", v.VCUTTgtAclrtnRqstVal);
    s << indent << "GearRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.GearRqst);
    s << indent << "TgtGear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.TgtGear);
    s << indent << "VCUTTgtSpRqst: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.VCUTTgtSpRqst);
    s << indent << "VCUTTgtSpRqstVal: ";
    Printer<double>::stream(s, indent + "  ", v.VCUTTgtSpRqstVal);
    s << indent << "SensSt_1st: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_1st);
    s << indent << "DisFrm1stFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm1stFrtSens);
    s << indent << "SensSt_2nd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_2nd);
    s << indent << "DisFrm2ndFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm2ndFrtSens);
    s << indent << "SensSt_3rd: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_3rd);
    s << indent << "DisFrm3rdFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm3rdFrtSens);
    s << indent << "SensSt_4th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_4th);
    s << indent << "DisFrm4thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm4thFrtSens);
    s << indent << "SensSt_5th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_5th);
    s << indent << "DisFrm5thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm5thFrtSens);
    s << indent << "SensSt_6th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_6th);
    s << indent << "DisFrm6thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm6thFrtSens);
    s << indent << "SensSt_7th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_7th);
    s << indent << "DisFrm7thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm7thFrtSens);
    s << indent << "SensSt_8th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_8th);
    s << indent << "DisFrm8thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm8thFrtSens);
    s << indent << "SensSt_9th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_9th);
    s << indent << "DisFrm9thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm9thFrtSens);
    s << indent << "SensSt_10th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_10th);
    s << indent << "DisFrm10thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm10thFrtSens);
    s << indent << "SensSt_11th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_11th);
    s << indent << "DisFrm11thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm11thFrtSens);
    s << indent << "SensSt_12th: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.SensSt_12th);
    s << indent << "DisFrm12thFrtSens: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.DisFrm12thFrtSens);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_CHASSISMSG_H
