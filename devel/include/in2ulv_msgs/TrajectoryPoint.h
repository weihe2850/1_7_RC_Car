// Generated by gencpp from file in2ulv_msgs/TrajectoryPoint.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_TRAJECTORYPOINT_H
#define IN2ULV_MSGS_MESSAGE_TRAJECTORYPOINT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct TrajectoryPoint_
{
  typedef TrajectoryPoint_<ContainerAllocator> Type;

  TrajectoryPoint_()
    : indicator_status(0)
    , gear(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , v(0.0)
    , a(0.0)  {
    }
  TrajectoryPoint_(const ContainerAllocator& _alloc)
    : indicator_status(0)
    , gear(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)
    , v(0.0)
    , a(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _indicator_status_type;
  _indicator_status_type indicator_status;

   typedef uint8_t _gear_type;
  _gear_type gear;

   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _theta_type;
  _theta_type theta;

   typedef double _v_type;
  _v_type v;

   typedef double _a_type;
  _a_type a;





  typedef boost::shared_ptr< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> const> ConstPtr;

}; // struct TrajectoryPoint_

typedef ::in2ulv_msgs::TrajectoryPoint_<std::allocator<void> > TrajectoryPoint;

typedef boost::shared_ptr< ::in2ulv_msgs::TrajectoryPoint > TrajectoryPointPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::TrajectoryPoint const> TrajectoryPointConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return lhs.indicator_status == rhs.indicator_status &&
    lhs.gear == rhs.gear &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta &&
    lhs.v == rhs.v &&
    lhs.a == rhs.a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "125c7464e0d7fbb6cea049f6bc1ce29d";
  }

  static const char* value(const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x125c7464e0d7fbb6ULL;
  static const uint64_t static_value2 = 0xcea049f6bc1ce29dULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/TrajectoryPoint";
  }

  static const char* value(const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 转向灯, 0不闪，1右转向灯闪，2左转向灯闪, 3双闪\n"
"uint8 indicator_status\n"
"\n"
"# 档位，0空挡，1为D档，2为R档，3为P档\n"
"uint8 gear\n"
"\n"
"# 车体坐标系导航位姿\n"
"float64 x\n"
"float64 y\n"
"float64 theta\n"
"float64 v\n"
"float64 a\n"
;
  }

  static const char* value(const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.indicator_status);
      stream.next(m.gear);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
      stream.next(m.v);
      stream.next(m.a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrajectoryPoint_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::TrajectoryPoint_<ContainerAllocator>& v)
  {
    s << indent << "indicator_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.indicator_status);
    s << indent << "gear: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gear);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<double>::stream(s, indent + "  ", v.theta);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "a: ";
    Printer<double>::stream(s, indent + "  ", v.a);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_TRAJECTORYPOINT_H
