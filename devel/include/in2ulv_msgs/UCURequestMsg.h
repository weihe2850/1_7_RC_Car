// Generated by gencpp from file in2ulv_msgs/UCURequestMsg.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_UCUREQUESTMSG_H
#define IN2ULV_MSGS_MESSAGE_UCUREQUESTMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct UCURequestMsg_
{
  typedef UCURequestMsg_<ContainerAllocator> Type;

  UCURequestMsg_()
    : header()
    , module_type(0)
    , error_code(0)
    , ucu_validity(false)
    , route_encoder()
    , Version(0)
    , Province(0)
    , City(0)
    , District(0)
    , Street(0)
    , Community(0)
    , FeatureRequest(0)
    , CarHeading(0)
    , XXType(0)
    , MapNumber(0)
    , StationNumber(0)
    , RemoteCtrlCommand(0)  {
    }
  UCURequestMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , module_type(0)
    , error_code(0)
    , ucu_validity(false)
    , route_encoder(_alloc)
    , Version(0)
    , Province(0)
    , City(0)
    , District(0)
    , Street(0)
    , Community(0)
    , FeatureRequest(0)
    , CarHeading(0)
    , XXType(0)
    , MapNumber(0)
    , StationNumber(0)
    , RemoteCtrlCommand(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _module_type_type;
  _module_type_type module_type;

   typedef uint32_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _ucu_validity_type;
  _ucu_validity_type ucu_validity;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _route_encoder_type;
  _route_encoder_type route_encoder;

   typedef uint8_t _Version_type;
  _Version_type Version;

   typedef uint8_t _Province_type;
  _Province_type Province;

   typedef uint8_t _City_type;
  _City_type City;

   typedef uint8_t _District_type;
  _District_type District;

   typedef uint8_t _Street_type;
  _Street_type Street;

   typedef uint8_t _Community_type;
  _Community_type Community;

   typedef uint8_t _FeatureRequest_type;
  _FeatureRequest_type FeatureRequest;

   typedef uint8_t _CarHeading_type;
  _CarHeading_type CarHeading;

   typedef uint8_t _XXType_type;
  _XXType_type XXType;

   typedef uint16_t _MapNumber_type;
  _MapNumber_type MapNumber;

   typedef uint8_t _StationNumber_type;
  _StationNumber_type StationNumber;

   typedef uint8_t _RemoteCtrlCommand_type;
  _RemoteCtrlCommand_type RemoteCtrlCommand;





  typedef boost::shared_ptr< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> const> ConstPtr;

}; // struct UCURequestMsg_

typedef ::in2ulv_msgs::UCURequestMsg_<std::allocator<void> > UCURequestMsg;

typedef boost::shared_ptr< ::in2ulv_msgs::UCURequestMsg > UCURequestMsgPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::UCURequestMsg const> UCURequestMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.module_type == rhs.module_type &&
    lhs.error_code == rhs.error_code &&
    lhs.ucu_validity == rhs.ucu_validity &&
    lhs.route_encoder == rhs.route_encoder &&
    lhs.Version == rhs.Version &&
    lhs.Province == rhs.Province &&
    lhs.City == rhs.City &&
    lhs.District == rhs.District &&
    lhs.Street == rhs.Street &&
    lhs.Community == rhs.Community &&
    lhs.FeatureRequest == rhs.FeatureRequest &&
    lhs.CarHeading == rhs.CarHeading &&
    lhs.XXType == rhs.XXType &&
    lhs.MapNumber == rhs.MapNumber &&
    lhs.StationNumber == rhs.StationNumber &&
    lhs.RemoteCtrlCommand == rhs.RemoteCtrlCommand;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d0e6d4647b85f9842b9c69090dff73da";
  }

  static const char* value(const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd0e6d4647b85f984ULL;
  static const uint64_t static_value2 = 0x2b9c69090dff73daULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/UCURequestMsg";
  }

  static const char* value(const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# UCU_Requestment_message_4 (0x53E)\n"
"\n"
"# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"# 模块类型\n"
"uint8 module_type\n"
"\n"
"# error_code\n"
"uint32 error_code\n"
"\n"
"# UCU数据有效性\n"
"bool ucu_validity\n"
"string route_encoder\n"
"\n"
"# 版本号\n"
"uint8 Version\n"
"# 地区信息：省份、城市、区县、街道、校区\n"
"uint8 Province\n"
"uint8 City\n"
"uint8 District\n"
"uint8 Street\n"
"uint8 Community\n"
"# 功能请求\n"
"uint8 FeatureRequest\n"
"# 车头朝向\n"
"uint8 CarHeading\n"
"# 类型\n"
"uint8 XXType\n"
"# 地图编号\n"
"uint16 MapNumber\n"
"# 站点编号\n"
"uint8 StationNumber\n"
"# 远程控制命令\n"
"uint8 RemoteCtrlCommand\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.module_type);
      stream.next(m.error_code);
      stream.next(m.ucu_validity);
      stream.next(m.route_encoder);
      stream.next(m.Version);
      stream.next(m.Province);
      stream.next(m.City);
      stream.next(m.District);
      stream.next(m.Street);
      stream.next(m.Community);
      stream.next(m.FeatureRequest);
      stream.next(m.CarHeading);
      stream.next(m.XXType);
      stream.next(m.MapNumber);
      stream.next(m.StationNumber);
      stream.next(m.RemoteCtrlCommand);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UCURequestMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::UCURequestMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "module_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.module_type);
    s << indent << "error_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "ucu_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ucu_validity);
    s << indent << "route_encoder: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.route_encoder);
    s << indent << "Version: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Version);
    s << indent << "Province: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Province);
    s << indent << "City: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.City);
    s << indent << "District: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.District);
    s << indent << "Street: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Street);
    s << indent << "Community: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.Community);
    s << indent << "FeatureRequest: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.FeatureRequest);
    s << indent << "CarHeading: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.CarHeading);
    s << indent << "XXType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.XXType);
    s << indent << "MapNumber: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.MapNumber);
    s << indent << "StationNumber: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.StationNumber);
    s << indent << "RemoteCtrlCommand: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.RemoteCtrlCommand);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_UCUREQUESTMSG_H
