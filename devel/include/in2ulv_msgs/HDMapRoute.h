// Generated by gencpp from file in2ulv_msgs/HDMapRoute.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_HDMAPROUTE_H
#define IN2ULV_MSGS_MESSAGE_HDMAPROUTE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <in2ulv_msgs/HDMapSegment.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct HDMapRoute_
{
  typedef HDMapRoute_<ContainerAllocator> Type;

  HDMapRoute_()
    : header()
    , start_pose()
    , goal_pose()
    , segments()  {
    }
  HDMapRoute_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , start_pose(_alloc)
    , goal_pose(_alloc)
    , segments(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _start_pose_type;
  _start_pose_type start_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _goal_pose_type;
  _goal_pose_type goal_pose;

   typedef std::vector< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >> _segments_type;
  _segments_type segments;





  typedef boost::shared_ptr< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> const> ConstPtr;

}; // struct HDMapRoute_

typedef ::in2ulv_msgs::HDMapRoute_<std::allocator<void> > HDMapRoute;

typedef boost::shared_ptr< ::in2ulv_msgs::HDMapRoute > HDMapRoutePtr;
typedef boost::shared_ptr< ::in2ulv_msgs::HDMapRoute const> HDMapRouteConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.start_pose == rhs.start_pose &&
    lhs.goal_pose == rhs.goal_pose &&
    lhs.segments == rhs.segments;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >
{
  static const char* value()
  {
    return "88e8c74cae4a65bf3fa1a537ffb8d3b6";
  }

  static const char* value(const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x88e8c74cae4a65bfULL;
  static const uint64_t static_value2 = 0x3fa1a537ffb8d3b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/HDMapRoute";
  }

  static const char* value(const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A route within a high-definition map defined by the start and goal points and map primitives describing the route between the two.\n"
"\n"
"# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"\n"
"# The start_pose must exist within the bounds of the primitives in the first segment defined in the route_segments array.\n"
"geometry_msgs/Pose start_pose\n"
"\n"
"# The goal_pose must exist within the bounds of the primitives in the last segment defined in the route_semgents array.\n"
"geometry_msgs/Pose goal_pose\n"
"\n"
"HDMapSegment[] segments\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: in2ulv_msgs/HDMapSegment\n"
"# A segment of an HDMap which contains one or more MapPrimitives.\n"
"in2ulv_msgs/HDMapPrimitive[] primitives\n"
"\n"
"int64 preferred_primitive_id\n"
"\n"
"================================================================================\n"
"MSG: in2ulv_msgs/HDMapPrimitive\n"
"# Map primitive information\n"
"int64 id\n"
"\n"
"# Type of primitive, such as lane, polygon, line.\n"
"string primitive_type\n"
;
  }

  static const char* value(const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.start_pose);
      stream.next(m.goal_pose);
      stream.next(m.segments);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HDMapRoute_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::HDMapRoute_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::HDMapRoute_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "start_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.start_pose);
    s << indent << "goal_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_pose);
    s << indent << "segments[]" << std::endl;
    for (size_t i = 0; i < v.segments.size(); ++i)
    {
      s << indent << "  segments[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::in2ulv_msgs::HDMapSegment_<ContainerAllocator> >::stream(s, indent + "    ", v.segments[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_HDMAPROUTE_H
