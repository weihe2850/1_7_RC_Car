// Generated by gencpp from file in2ulv_msgs/LatticeDebug.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_LATTICEDEBUG_H
#define IN2ULV_MSGS_MESSAGE_LATTICEDEBUG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct LatticeDebug_
{
  typedef LatticeDebug_<ContainerAllocator> Type;

  LatticeDebug_()
    : header()
    , trajectory_point_x(0.0)
    , trajectory_point_y(0.0)
    , trajectory_point_theta(0.0)
    , trajectory_point_kappa(0.0)
    , trajectory_point_v(0.0)
    , trajectory_point_a(0.0)
    , matched_point_s(0.0)
    , matched_point_x(0.0)
    , matched_point_y(0.0)
    , matched_point_theta(0.0)
    , matched_point_kappa(0.0)
    , matched_point_kappa_prime(0.0)
    , s(0.0)
    , s_dot(0.0)
    , s_ddot(0.0)
    , d(0.0)
    , d_prime(0.0)
    , d_pprime(0.0)
    , stop_point_distance(0.0)  {
    }
  LatticeDebug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trajectory_point_x(0.0)
    , trajectory_point_y(0.0)
    , trajectory_point_theta(0.0)
    , trajectory_point_kappa(0.0)
    , trajectory_point_v(0.0)
    , trajectory_point_a(0.0)
    , matched_point_s(0.0)
    , matched_point_x(0.0)
    , matched_point_y(0.0)
    , matched_point_theta(0.0)
    , matched_point_kappa(0.0)
    , matched_point_kappa_prime(0.0)
    , s(0.0)
    , s_dot(0.0)
    , s_ddot(0.0)
    , d(0.0)
    , d_prime(0.0)
    , d_pprime(0.0)
    , stop_point_distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _trajectory_point_x_type;
  _trajectory_point_x_type trajectory_point_x;

   typedef double _trajectory_point_y_type;
  _trajectory_point_y_type trajectory_point_y;

   typedef double _trajectory_point_theta_type;
  _trajectory_point_theta_type trajectory_point_theta;

   typedef double _trajectory_point_kappa_type;
  _trajectory_point_kappa_type trajectory_point_kappa;

   typedef double _trajectory_point_v_type;
  _trajectory_point_v_type trajectory_point_v;

   typedef double _trajectory_point_a_type;
  _trajectory_point_a_type trajectory_point_a;

   typedef double _matched_point_s_type;
  _matched_point_s_type matched_point_s;

   typedef double _matched_point_x_type;
  _matched_point_x_type matched_point_x;

   typedef double _matched_point_y_type;
  _matched_point_y_type matched_point_y;

   typedef double _matched_point_theta_type;
  _matched_point_theta_type matched_point_theta;

   typedef double _matched_point_kappa_type;
  _matched_point_kappa_type matched_point_kappa;

   typedef double _matched_point_kappa_prime_type;
  _matched_point_kappa_prime_type matched_point_kappa_prime;

   typedef double _s_type;
  _s_type s;

   typedef double _s_dot_type;
  _s_dot_type s_dot;

   typedef double _s_ddot_type;
  _s_ddot_type s_ddot;

   typedef double _d_type;
  _d_type d;

   typedef double _d_prime_type;
  _d_prime_type d_prime;

   typedef double _d_pprime_type;
  _d_pprime_type d_pprime;

   typedef double _stop_point_distance_type;
  _stop_point_distance_type stop_point_distance;





  typedef boost::shared_ptr< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> const> ConstPtr;

}; // struct LatticeDebug_

typedef ::in2ulv_msgs::LatticeDebug_<std::allocator<void> > LatticeDebug;

typedef boost::shared_ptr< ::in2ulv_msgs::LatticeDebug > LatticeDebugPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::LatticeDebug const> LatticeDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.trajectory_point_x == rhs.trajectory_point_x &&
    lhs.trajectory_point_y == rhs.trajectory_point_y &&
    lhs.trajectory_point_theta == rhs.trajectory_point_theta &&
    lhs.trajectory_point_kappa == rhs.trajectory_point_kappa &&
    lhs.trajectory_point_v == rhs.trajectory_point_v &&
    lhs.trajectory_point_a == rhs.trajectory_point_a &&
    lhs.matched_point_s == rhs.matched_point_s &&
    lhs.matched_point_x == rhs.matched_point_x &&
    lhs.matched_point_y == rhs.matched_point_y &&
    lhs.matched_point_theta == rhs.matched_point_theta &&
    lhs.matched_point_kappa == rhs.matched_point_kappa &&
    lhs.matched_point_kappa_prime == rhs.matched_point_kappa_prime &&
    lhs.s == rhs.s &&
    lhs.s_dot == rhs.s_dot &&
    lhs.s_ddot == rhs.s_ddot &&
    lhs.d == rhs.d &&
    lhs.d_prime == rhs.d_prime &&
    lhs.d_pprime == rhs.d_pprime &&
    lhs.stop_point_distance == rhs.stop_point_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3feccd66a4ab06d8162cf5e6ebd8f19f";
  }

  static const char* value(const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3feccd66a4ab06d8ULL;
  static const uint64_t static_value2 = 0x162cf5e6ebd8f19fULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/LatticeDebug";
  }

  static const char* value(const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"float64 trajectory_point_x\n"
"float64 trajectory_point_y\n"
"float64 trajectory_point_theta\n"
"float64 trajectory_point_kappa\n"
"float64 trajectory_point_v\n"
"float64 trajectory_point_a\n"
"\n"
"float64 matched_point_s\n"
"float64 matched_point_x\n"
"float64 matched_point_y\n"
"float64 matched_point_theta\n"
"float64 matched_point_kappa\n"
"float64 matched_point_kappa_prime\n"
"\n"
"float64 s\n"
"float64 s_dot\n"
"float64 s_ddot\n"
"float64 d\n"
"float64 d_prime\n"
"float64 d_pprime\n"
"\n"
"float64 stop_point_distance\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trajectory_point_x);
      stream.next(m.trajectory_point_y);
      stream.next(m.trajectory_point_theta);
      stream.next(m.trajectory_point_kappa);
      stream.next(m.trajectory_point_v);
      stream.next(m.trajectory_point_a);
      stream.next(m.matched_point_s);
      stream.next(m.matched_point_x);
      stream.next(m.matched_point_y);
      stream.next(m.matched_point_theta);
      stream.next(m.matched_point_kappa);
      stream.next(m.matched_point_kappa_prime);
      stream.next(m.s);
      stream.next(m.s_dot);
      stream.next(m.s_ddot);
      stream.next(m.d);
      stream.next(m.d_prime);
      stream.next(m.d_pprime);
      stream.next(m.stop_point_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LatticeDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::LatticeDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::LatticeDebug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trajectory_point_x: ";
    Printer<double>::stream(s, indent + "  ", v.trajectory_point_x);
    s << indent << "trajectory_point_y: ";
    Printer<double>::stream(s, indent + "  ", v.trajectory_point_y);
    s << indent << "trajectory_point_theta: ";
    Printer<double>::stream(s, indent + "  ", v.trajectory_point_theta);
    s << indent << "trajectory_point_kappa: ";
    Printer<double>::stream(s, indent + "  ", v.trajectory_point_kappa);
    s << indent << "trajectory_point_v: ";
    Printer<double>::stream(s, indent + "  ", v.trajectory_point_v);
    s << indent << "trajectory_point_a: ";
    Printer<double>::stream(s, indent + "  ", v.trajectory_point_a);
    s << indent << "matched_point_s: ";
    Printer<double>::stream(s, indent + "  ", v.matched_point_s);
    s << indent << "matched_point_x: ";
    Printer<double>::stream(s, indent + "  ", v.matched_point_x);
    s << indent << "matched_point_y: ";
    Printer<double>::stream(s, indent + "  ", v.matched_point_y);
    s << indent << "matched_point_theta: ";
    Printer<double>::stream(s, indent + "  ", v.matched_point_theta);
    s << indent << "matched_point_kappa: ";
    Printer<double>::stream(s, indent + "  ", v.matched_point_kappa);
    s << indent << "matched_point_kappa_prime: ";
    Printer<double>::stream(s, indent + "  ", v.matched_point_kappa_prime);
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "s_dot: ";
    Printer<double>::stream(s, indent + "  ", v.s_dot);
    s << indent << "s_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.s_ddot);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "d_prime: ";
    Printer<double>::stream(s, indent + "  ", v.d_prime);
    s << indent << "d_pprime: ";
    Printer<double>::stream(s, indent + "  ", v.d_pprime);
    s << indent << "stop_point_distance: ";
    Printer<double>::stream(s, indent + "  ", v.stop_point_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_LATTICEDEBUG_H
