// Generated by gencpp from file in2ulv_msgs/IOButtonMsg.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_IOBUTTONMSG_H
#define IN2ULV_MSGS_MESSAGE_IOBUTTONMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct IOButtonMsg_
{
  typedef IOButtonMsg_<ContainerAllocator> Type;

  IOButtonMsg_()
    : header()
    , module_type(0)
    , error_code(0)
    , io_validity(false)
    , button_stop(0)
    , button_a(0)
    , button_b(0)
    , button_c(0)  {
    }
  IOButtonMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , module_type(0)
    , error_code(0)
    , io_validity(false)
    , button_stop(0)
    , button_a(0)
    , button_b(0)
    , button_c(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _module_type_type;
  _module_type_type module_type;

   typedef uint32_t _error_code_type;
  _error_code_type error_code;

   typedef uint8_t _io_validity_type;
  _io_validity_type io_validity;

   typedef uint8_t _button_stop_type;
  _button_stop_type button_stop;

   typedef uint8_t _button_a_type;
  _button_a_type button_a;

   typedef uint8_t _button_b_type;
  _button_b_type button_b;

   typedef uint8_t _button_c_type;
  _button_c_type button_c;





  typedef boost::shared_ptr< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> const> ConstPtr;

}; // struct IOButtonMsg_

typedef ::in2ulv_msgs::IOButtonMsg_<std::allocator<void> > IOButtonMsg;

typedef boost::shared_ptr< ::in2ulv_msgs::IOButtonMsg > IOButtonMsgPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::IOButtonMsg const> IOButtonMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.module_type == rhs.module_type &&
    lhs.error_code == rhs.error_code &&
    lhs.io_validity == rhs.io_validity &&
    lhs.button_stop == rhs.button_stop &&
    lhs.button_a == rhs.button_a &&
    lhs.button_b == rhs.button_b &&
    lhs.button_c == rhs.button_c;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "157d5ffbca87ffa114dc6db487e4338a";
  }

  static const char* value(const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x157d5ffbca87ffa1ULL;
  static const uint64_t static_value2 = 0x14dc6db487e4338aULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/IOButtonMsg";
  }

  static const char* value(const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"\n"
"# 模块类型\n"
"uint8 module_type\n"
"\n"
"# error_code\n"
"uint32 error_code\n"
"\n"
"# 总线IO模块数据有效性：IO模块默认关闭，需要程序启动连接否则数据无效(0)\n"
"bool io_validity\n"
"\n"
"# 按钮: var > 0 表示激活 var = 0 表示未激活\n"
"uint8 button_stop\n"
"uint8 button_a\n"
"uint8 button_b\n"
"uint8 button_c\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.module_type);
      stream.next(m.error_code);
      stream.next(m.io_validity);
      stream.next(m.button_stop);
      stream.next(m.button_a);
      stream.next(m.button_b);
      stream.next(m.button_c);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IOButtonMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::IOButtonMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "module_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.module_type);
    s << indent << "error_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "io_validity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.io_validity);
    s << indent << "button_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_stop);
    s << indent << "button_a: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_a);
    s << indent << "button_b: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_b);
    s << indent << "button_c: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.button_c);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_IOBUTTONMSG_H
