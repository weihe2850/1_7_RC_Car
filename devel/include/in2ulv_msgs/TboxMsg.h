// Generated by gencpp from file in2ulv_msgs/TboxMsg.msg
// DO NOT EDIT!


#ifndef IN2ULV_MSGS_MESSAGE_TBOXMSG_H
#define IN2ULV_MSGS_MESSAGE_TBOXMSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace in2ulv_msgs
{
template <class ContainerAllocator>
struct TboxMsg_
{
  typedef TboxMsg_<ContainerAllocator> Type;

  TboxMsg_()
    : header()
    , module_type(0)
    , error_code(0)
    , tbox_data()  {
    }
  TboxMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , module_type(0)
    , error_code(0)
    , tbox_data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _module_type_type;
  _module_type_type module_type;

   typedef uint32_t _error_code_type;
  _error_code_type error_code;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _tbox_data_type;
  _tbox_data_type tbox_data;





  typedef boost::shared_ptr< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> const> ConstPtr;

}; // struct TboxMsg_

typedef ::in2ulv_msgs::TboxMsg_<std::allocator<void> > TboxMsg;

typedef boost::shared_ptr< ::in2ulv_msgs::TboxMsg > TboxMsgPtr;
typedef boost::shared_ptr< ::in2ulv_msgs::TboxMsg const> TboxMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::in2ulv_msgs::TboxMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::in2ulv_msgs::TboxMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::TboxMsg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.module_type == rhs.module_type &&
    lhs.error_code == rhs.error_code &&
    lhs.tbox_data == rhs.tbox_data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::in2ulv_msgs::TboxMsg_<ContainerAllocator1> & lhs, const ::in2ulv_msgs::TboxMsg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace in2ulv_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a436feac23c2c2b44f15582f6ec61f34";
  }

  static const char* value(const ::in2ulv_msgs::TboxMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa436feac23c2c2b4ULL;
  static const uint64_t static_value2 = 0x4f15582f6ec61f34ULL;
};

template<class ContainerAllocator>
struct DataType< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "in2ulv_msgs/TboxMsg";
  }

  static const char* value(const ::in2ulv_msgs::TboxMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 帧头，包含时间戳信息\n"
"std_msgs/Header header\n"
"\n"
"# 模块类型\n"
"uint8 module_type\n"
"\n"
"# error_code\n"
"uint32 error_code\n"
"\n"
"# 模块信息\n"
"string tbox_data\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::in2ulv_msgs::TboxMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.module_type);
      stream.next(m.error_code);
      stream.next(m.tbox_data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TboxMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::in2ulv_msgs::TboxMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::in2ulv_msgs::TboxMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "module_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.module_type);
    s << indent << "error_code: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.error_code);
    s << indent << "tbox_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.tbox_data);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IN2ULV_MSGS_MESSAGE_TBOXMSG_H
